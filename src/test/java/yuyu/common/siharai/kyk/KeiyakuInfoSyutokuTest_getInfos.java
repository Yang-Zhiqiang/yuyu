package yuyu.common.siharai.kyk;

import static org.junit.Assert.*;
import static yuyu.testinfr.YuyuFunctionTestUtil.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.transaction.Transactional;

import jp.co.dgic.testing.common.virtualmock.MockObjectManager;
import jp.co.slcs.swak.bizinfr.exception.BizAppException;
import jp.co.slcs.swak.core.inject.SWAKInjector;
import jp.co.slcs.swak.date.BizDate;
import jp.co.slcs.swak.date.BizDateYM;
import jp.co.slcs.swak.number.BizCurrency;
import jp.co.slcs.swak.number.BizNumber;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import yuyu.app.base.ref.TestDataMaker;
import yuyu.common.biz.bznayose.BetukutiKeiyakuInfoGet;
import yuyu.common.biz.bznayose.BetukutiKeiyakuInfoGetMockForSiharai;
import yuyu.common.hozen.khcommon.GetKhKykdrInfo;
import yuyu.common.hozen.khcommon.GetKhKykdrInfoMockForSiharai;
import yuyu.common.hozen.khcommon.KeisanHtyKeihi;
import yuyu.common.hozen.khcommon.KeisanHtyKeihiMockForSiharai;
import yuyu.def.biz.manager.BizDomManager;
import yuyu.def.classification.C_6daiLdKbn;
import yuyu.def.classification.C_Aplkahi;
import yuyu.def.classification.C_Hhknsei;
import yuyu.def.classification.C_HknkknsmnKbn;
import yuyu.def.classification.C_Hkuktsyu;
import yuyu.def.classification.C_Hrkkaisuu;
import yuyu.def.classification.C_Hrkkeiro;
import yuyu.def.classification.C_HrkkknsmnKbn;
import yuyu.def.classification.C_Htnpkkn;
import yuyu.def.classification.C_KataKbn;
import yuyu.def.classification.C_KhnkyhkgbairituKbn;
import yuyu.def.classification.C_KjkhukaKbn;
import yuyu.def.classification.C_KyhgndkataKbn;
import yuyu.def.classification.C_KykdrknHtdjytKbn;
import yuyu.def.classification.C_Kykjyoutai;
import yuyu.def.classification.C_Kyksei;
import yuyu.def.classification.C_NayoseYouhi;
import yuyu.def.classification.C_Nstknsyu;
import yuyu.def.classification.C_PmnjtkKbn;
import yuyu.def.classification.C_Saihoum;
import yuyu.def.classification.C_Sdpd;
import yuyu.def.classification.C_ShrhousiteiKbn;
import yuyu.def.classification.C_SntkhouKbn;
import yuyu.def.classification.C_StknsetKbn;
import yuyu.def.classification.C_Syoumetujiyuu;
import yuyu.def.classification.C_SyukyhkinkataKbn;
import yuyu.def.classification.C_SyutkKbn;
import yuyu.def.classification.C_Tdk;
import yuyu.def.classification.C_TkiktbrisyuruiKbn;
import yuyu.def.classification.C_Tkjyhyouten;
import yuyu.def.classification.C_Tkjyskgnkkn;
import yuyu.def.classification.C_TokkoudosghtnpKbn;
import yuyu.def.classification.C_TtdktyuuiKbn;
import yuyu.def.classification.C_Tuukasyu;
import yuyu.def.classification.C_UktKbn;
import yuyu.def.classification.C_UmuKbn;
import yuyu.def.classification.C_YokinKbn;
import yuyu.def.classification.C_YuukousyoumetuKbn;
import yuyu.def.db.entity.JT_SiKykKihon;
import yuyu.def.db.entity.JT_SiKykSyouhn;
import yuyu.def.db.entity.JT_SiUkt;
import yuyu.def.hozen.manager.HozenDomManager;
import yuyu.def.siharai.manager.SiharaiDomManager;
import yuyu.testinfr.OrderedRunner;
import yuyu.testinfr.TestOrder;
import yuyu.testinfr.inject.MockModuleBinder;

import com.google.inject.AbstractModule;

/**
 * 契約情報取得のメソッド{@link KeiyakuInfoSyutoku#exec(KeiyakuPrm)} テスト用クラスです。<br />
 */
@RunWith(OrderedRunner.class)
public class KeiyakuInfoSyutokuTest_getInfos {

    @Inject
    private KeiyakuInfoSyutoku keiyakuInfoSyutoku;

    private final static String fileName = "UT-SP_単体テスト仕様書（共通）_契約情報取得";

    private final static String sheetName = "テストデータ";

    @BeforeClass
    @Transactional
    public static void insertTestData() {

        try {
            TestDataMaker testDataMaker = new TestDataMaker();
            HashMap<String, Map<String, List<Map<String, String>>>> testDataAndTblMap;
            testDataAndTblMap = testDataMaker.getInData(KeiyakuInfoSyutokuTest_getInfos.class, fileName, sheetName);
            testDataMaker.insDataByDataId("データ001", testDataAndTblMap);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @AfterClass
    @Transactional
    public static void deleteTestData() {
        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);
        BizDomManager bizDomManager = SWAKInjector.getInstance(BizDomManager.class);
        SiharaiDomManager siharaiDomManager = SWAKInjector.getInstance(SiharaiDomManager.class);
        hozenDomManager.delete(hozenDomManager.getKykSyouhnRirekisBySyonoMaxHenkousikibetukey("11810111118"));
        hozenDomManager.delete(hozenDomManager.getKykSyouhnRirekisBySyonoMaxHenkousikibetukey("11810111141"));
        hozenDomManager.delete(hozenDomManager.getKykSyouhnRirekisBySyonoMaxHenkousikibetukey("11810111174"));
        hozenDomManager.delete(hozenDomManager.getAllAnsyuKihon());
        bizDomManager.delete(bizDomManager.getSyouhnZokusei("M910", 1));
        bizDomManager.delete(bizDomManager.getSyouhnZokusei("M920", 1));
        siharaiDomManager.delete(siharaiDomManager.getSiSyouhnZokusei("M910", C_KyhgndkataKbn.TYPE180, 1, "1001"));
        siharaiDomManager.delete(siharaiDomManager.getSiSyouhnZokusei("M920", C_KyhgndkataKbn.TYPE180, 1, "1001"));

    }

    @Before
    public void before(){
        MockModuleBinder.bind(new AbstractModule(){
            @Override
            protected void configure() {
                bind(KeisanHtyKeihi.class).to(KeisanHtyKeihiMockForSiharai.class);
                bind(BetukutiKeiyakuInfoGet.class).to(BetukutiKeiyakuInfoGetMockForSiharai.class);
                bind(GetKhKykdrInfo.class).to(GetKhKykdrInfoMockForSiharai.class);
            }
        });
    }

    @BeforeClass
    public static void testInit() {
        KeisanHtyKeihiMockForSiharai.caller = KeiyakuInfoSyutokuTest_getInfos.class;
        BetukutiKeiyakuInfoGetMockForSiharai.caller = KeiyakuInfoSyutokuTest_getInfos.class;
        GetKhKykdrInfoMockForSiharai.caller = KeiyakuInfoSyutokuTest_getInfos.class;
    }

    @AfterClass
    public static void testClear() {
        KeisanHtyKeihiMockForSiharai.caller = null;
        KeisanHtyKeihiMockForSiharai.SYORIPTN = null;
        BetukutiKeiyakuInfoGetMockForSiharai.caller = null;
        BetukutiKeiyakuInfoGetMockForSiharai.SYORIPTN = null;
        GetKhKykdrInfoMockForSiharai.caller = null;
        GetKhKykdrInfoMockForSiharai.SYORIPTN = null;
    }

    @Test
    @Transactional
    @TestOrder(10)
    public void testGetInfos_A1() {
        MockObjectManager.initialize();
        KeisanHtyKeihiMockForSiharai.SYORIPTN = KeisanHtyKeihiMockForSiharai.TESTPATTERN1;
        BetukutiKeiyakuInfoGetMockForSiharai.SYORIPTN = BetukutiKeiyakuInfoGetMockForSiharai.TESTPATTERN1;
        GetKhKykdrInfoMockForSiharai.SYORIPTN = GetKhKykdrInfoMockForSiharai.TESTPATTERN1;

        KeiyakuPrm keiyakuPrm = SWAKInjector.getInstance(KeiyakuPrm.class);
        keiyakuPrm.setSyono("11810111118");
        keiyakuPrm.setINayoseyh(C_NayoseYouhi.YOU);

        keiyakuInfoSyutoku.getInfos(keiyakuPrm);
        exNumericEquals(keiyakuInfoSyutoku.getKykKihons().size(), 1, "件数");
        JT_SiKykKihon siKykKihon = keiyakuInfoSyutoku.getKykKihons().get(0);
        exStringEquals(siKykKihon.getSyono(), "11810111118", "証券番号");
        exStringEquals(siKykKihon.getAitesyono(), "11810111185", "相手証券番号");
        exClassificationEquals(siKykKihon.getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(siKykKihon.getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exClassificationEquals(siKykKihon.getSntkhoukbn(), C_SntkhouKbn.KKT, "選択方法区分");
        exDateEquals(siKykKihon.getMosymd(), BizDate.valueOf(20150924), "申込日");
        exDateEquals(siKykKihon.getKktymd(), BizDate.valueOf(20150925), "告知日");
        exClassificationEquals(siKykKihon.getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(siKykKihon.getKykjyoutai(), C_Kykjyoutai.ENTYOU, "契約状態");
        exDateYMEquals(siKykKihon.getNexthrkym(), BizDateYM.valueOf(201403), "次回払込年月");
        exDateEquals(siKykKihon.getYykknmnryymd(), null, "猶予期間満了日");
        exBizCalcbleEquals(siKykKihon.getKeip(), BizCurrency.valueOf(50), "合計保険料");
        exDateEquals(siKykKihon.getSykyknyhenkouymd(), BizDate.valueOf(20150201), "最終契約内容変更日");
        exDateEquals(siKykKihon.getLasthkhenkouymd(), null, "最終払方変更日");
        exClassificationEquals(siKykKihon.getSyoumetujiyuu(), C_Syoumetujiyuu.CLGOFF, "消滅事由");
        exDateEquals(siKykKihon.getSyoumetuymd(), BizDate.valueOf(20150707), "消滅日");
        exDateEquals(siKykKihon.getHrketykouryokuhasseiymd(), null, "払済延長効力発生日");
        exClassificationEquals(siKykKihon.getStknsetkbn(), C_StknsetKbn.ARI, "質権設定区分");
        exClassificationEquals(siKykKihon.getAplkahikbn(), C_Aplkahi.NONE, "ＡＰＬ可否区分");
        exNumericEquals(siKykKihon.getSbuktnin(), 20, "死亡受取人人数");
        exClassificationEquals(siKykKihon.getSaihoum(), C_Saihoum.BLNK, "再保有無");
        exDateEquals(siKykKihon.getHksknnkaisiymd(), BizDate.valueOf(20150708), "復活責任開始日");
        exDateEquals(siKykKihon.getGnkykfksknnkaisiymd(), null, "原契約復旧責任開始日");
        exNumericEquals(siKykKihon.getJidouupdatekahi(), 0, "自動更新可否");
        exBizCalcbleEquals(siKykKihon.getJidouupdategop(), BizCurrency.valueOf(0), "自動更新後保険料");
        exClassificationEquals(siKykKihon.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exStringEquals(siKykKihon.getHhkntodouhukencd(), "", "被保険者都道府県コード");
        exClassificationEquals(siKykKihon.getTratkityuiumu(), C_UmuKbn.ARI, "取扱注意有無");
        exStringEquals(siKykKihon.getTratkityuiuny(), "ＡＡＡ", "取扱注意内容");
        exStringEquals(siKykKihon.getKyknmkn(), "カナ", "契約者名（カナ）");
        exStringEquals(siKykKihon.getKyknmkj(), "契約者名", "契約者名（漢字）");
        exClassificationEquals(siKykKihon.getKyksei(), C_Kyksei.MALE, "契約者性別");
        exDateEquals(siKykKihon.getKykseiymd(), BizDate.valueOf(20150924), "契約者生年月日");
        exStringEquals(siKykKihon.getKykyno(), "", "契約者郵便番号");
        exClassificationEquals(siKykKihon.getKkkyktdk(), C_Tdk.HGU, "契約管理契約者続柄");
        exStringEquals(siKykKihon.getTsinyno(), "0100411", "通信先郵便番号");
        exStringEquals(siKykKihon.getTsinadr1kn(), "ナナナナナ１", "通信先住所１（カナ）");
        exStringEquals(siKykKihon.getTsinadr2kn(), "ナナナナナ２", "通信先住所２（カナ）");
        exStringEquals(siKykKihon.getTsinadr3kn(), "ナナナナナ３", "通信先住所３（カナ）");
        exStringEquals(siKykKihon.getTsinadr1kj(), "通信先住所漢字一", "通信先住所１（漢字）");
        exStringEquals(siKykKihon.getTsinadr2kj(), "通信先住所漢字二", "通信先住所２（漢字）");
        exStringEquals(siKykKihon.getTsinadr3kj(), "通信先住所漢字三", "通信先住所３（漢字）");
        exStringEquals(siKykKihon.getTsintelno(), "010-0411-1111", "通信先電話番号");
        exStringEquals(siKykKihon.getHhknnmkn(), "カナレ", "被保険者名（カナ）");
        exStringEquals(siKykKihon.getHhknnmkj(), "被保険漢字", "被保険者名（漢字）");
        exClassificationEquals(siKykKihon.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(siKykKihon.getHhknseiymd(), BizDate.valueOf(20150919), "被保険者生年月日");
        exStringEquals(siKykKihon.getHhknyno(), "1160230", "被保険者郵便番号");
        exStringEquals(siKykKihon.getHhknadr1kn(), "カカカカカ１", "被保険者住所１（カナ）");
        exStringEquals(siKykKihon.getHhknadr2kn(), "カカカカカ２", "被保険者住所２（カナ）");
        exStringEquals(siKykKihon.getHhknadr3kn(), "カカカカカ３", "被保険者住所３（カナ）");
        exStringEquals(siKykKihon.getHhknadr1kj(), "漢字一", "被保険者住所１（漢字）");
        exStringEquals(siKykKihon.getHhknadr2kj(), "漢字二", "被保険者住所２（漢字）");
        exStringEquals(siKykKihon.getHhknadr3kj(), "漢字三", "被保険者住所３（漢字）");
        exStringEquals(siKykKihon.getHhkntelno(), "010-1234-5678", "被保険者電話番号");
        exStringEquals(siKykKihon.getSiteidruktnmkn(), "カナオウ", "指定代理受取人名（カナ）");
        exStringEquals(siKykKihon.getSiteidruktnmkj(), "受取人名漢字", "指定代理受取人名（漢字）");
        exClassificationEquals(siKykKihon.getSiteidrukttdk(), C_Tdk.HTSZN, "指定代理受取人続柄");
        exStringEquals(siKykKihon.getKzmeiginmkn(), "カナエブ", "口座名義人氏名（カナ）");
        exClassificationEquals(siKykKihon.getShrhousiteikbn(), C_ShrhousiteiKbn.BLNK, "支払方法指定区分");
        exStringEquals(siKykKihon.getBankcd(), "9900", "銀行コード");
        exStringEquals(siKykKihon.getSitencd(), "110", "支店コード");
        exClassificationEquals(siKykKihon.getYokinkbn(), C_YokinKbn.BETUDAN, "預金種目区分");
        exStringEquals(siKykKihon.getKouzano(), "1000001", "口座番号");
        exStringEquals(siKykKihon.getDrtencd(), "1000001", "代理店コード");
        exStringEquals(siKykKihon.getOyadrtencd(), "1010001", "親代理店コード");
        exStringEquals(siKykKihon.getDrtenkanrisosikicd(), "1110001", "代理店管理組織コード");
        exStringEquals(siKykKihon.getBosyuucd(), "100001", "募集人コード");
        exDateEquals(siKykKihon.getZennouryosyuymd(), null, "前納領収日");
        exNumericEquals(siKykKihon.getKykhnkkaisuu(), 0, "契約者変更回数");
        exBizCalcbleEquals(siKykKihon.getMisyuup(), BizCurrency.valueOf(0), "未収保険料");
        exDateYMEquals(siKykKihon.getMisyuupjyuutouym(), null, "未収保険料充当年月");
        exNumericEquals(siKykKihon.getMisyuupjytkaisuu(), 0, "未収保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getMikeikap(), BizCurrency.valueOf(0), "未経過保険料");
        exDateYMEquals(siKykKihon.getMikeikapjyuutouym(), null, "未経過保険料充当年月");
        exNumericEquals(siKykKihon.getMikeikapjytkaisuu(), 0, "未経過保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getKrkgk(), BizCurrency.valueOf(90), "仮受金額");
        exDateEquals(siKykKihon.getLastsyosaihkymd(), BizDate.valueOf(20150918), "最終証券再発行日");
        exDateEquals(siKykKihon.getLastmeihenymd(), BizDate.valueOf(20150919), "最終名義変更日");
        exStringEquals(siKykKihon.getKossyoricd(), "kid2", "更新処理コード");
        exDateEquals(siKykKihon.getLastsbukthenymd(), BizDate.valueOf(20160101), "最終死亡受取人変更日");
        exDateEquals(siKykKihon.getFstpnyknymd(), BizDate.valueOf(20180101), "初回保険料入金日");
        exStringEquals(siKykKihon.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykKihon.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siKykKihon.getGyoumuKousinTime(), "20150924000000", "業務用更新時間");
        exBizCalcbleEquals(siKykKihon.getHtykeihi(), BizCurrency.valueOf(11111), "必要経費");
        exBizCalcbleEquals(siKykKihon.getYenhtykeihi(), BizCurrency.valueOf(22222), "円換算必要経費");
        exBizCalcbleEquals(siKykKihon.getShrkykhtykeihi(),BizCurrency.valueOf(0), "支払時契約者必要経費");
        exClassificationEquals(siKykKihon.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exClassificationEquals(siKykKihon.getStdrsktkyhkumu(), C_UmuKbn.ARI, "被保険者代理特約付加有無");
        exClassificationEquals(siKykKihon.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(siKykKihon.getNkshrtkyknksyukkn(), 12, "年金支払特約年金期間");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn1(), C_TtdktyuuiKbn.TTDKTYUUOUTAITYUUI, "手続注意区分１");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn2(), C_TtdktyuuiKbn.KYKSYASOUSASYOUKAI, "手続注意区分２");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn3(), C_TtdktyuuiKbn.HASANOYOBITOUSAN, "手続注意区分３");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn4(), C_TtdktyuuiKbn.HOKENKEIYAKUSASIOSAE, "手続注意区分４");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn5(), C_TtdktyuuiKbn.KYKSYAYUKUEHUMEI, "手続注意区分５");
        exClassificationEquals(siKykKihon.getInitsbjiyensitihsytkhukaumu(), C_UmuKbn.ARI,
            "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(siKykKihon.getInitsbjiyenkasaiteihsygk(), BizCurrency.valueOf(9999999999999l),
            "初期死亡時円換算最低保証額");
        exClassificationEquals(siKykKihon.getKykdrtkykhukaumu(), C_UmuKbn.NONE, "契約者代理特約付加有無");
        exClassificationEquals(siKykKihon.getKykdrknhatudoujyoutai(), C_KykdrknHtdjytKbn.SETTEI, "契約者代理権発動状態");
        exStringEquals(siKykKihon.getKykdairinmkj(), "", "契約者代理人名（漢字）");
        exStringEquals(siKykKihon.getKykdairinmkn(), "", "契約者代理人名（カナ）");
        exClassificationEquals(siKykKihon.getKykdrnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者代理人名漢字化不可区分");
        exStringEquals(siKykKihon.getKykdryno(), "", "契約者代理人郵便番号");
        exStringEquals(siKykKihon.getKykdradr1kj(), "", "契約者代理人住所１（漢字）");
        exStringEquals(siKykKihon.getKykdradr2kj(), "", "契約者代理人住所２（漢字）");
        exStringEquals(siKykKihon.getKykdradr3kj(), "", "契約者代理人住所３（漢字）");
        exDateEquals(siKykKihon.getKykdrseiymd(),  null, "契約者代理人生年月日");
        exStringEquals(siKykKihon.getKykdrtelno(), "", "契約者代理人電話番号");
        exClassificationEquals(siKykKihon.getSdpdkbn(), C_Sdpd.SD, "Ｓ建Ｐ建区分");
        exClassificationEquals(siKykKihon.getTikiktbrisyuruikbn(), C_TkiktbrisyuruiKbn.NONE, "定期一括払種類区分");

        exNumericEquals(siKykKihon.getSiKykSyouhns().size(), 1, "件数");
        JT_SiKykSyouhn siKykSyouhn = siKykKihon.getSiKykSyouhns().get(0);
        exStringEquals(siKykSyouhn.getSyono(), "11810111118", "証券番号");
        exClassificationEquals(siKykSyouhn.getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(siKykSyouhn.getSyouhncd(), "M910", "商品コード");
        exClassificationEquals(siKykSyouhn.getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exNumericEquals(siKykSyouhn.getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(siKykSyouhn.getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(siKykSyouhn.getSyouhnnm(), "外貨建て一時払終身保険（即時保障型）１", "商品名");
        exStringEquals(siKykSyouhn.getSyouhnnmgm(), "外貨建て一時払終身保険（即時保障型）２", "商品名（画面用）");
        exStringEquals(siKykSyouhn.getSyouhnnmtyhy(), "外貨建て一時払終身保険（即時保障型）３", "商品名（帳票用）");
        exClassificationEquals(siKykSyouhn.getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(siKykSyouhn.getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(siKykSyouhn.getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(siKykSyouhn.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(siKykSyouhn.getYuukoukikanfrom(), BizDate.valueOf(20150708), "有効期間（自）");
        exDateEquals(siKykSyouhn.getYuukoukikanto(), BizDate.valueOf(20150712), "有効期間（至");
        exDateEquals(siKykSyouhn.getKykymd(), BizDate.valueOf(20150709), "契約日");
        exDateEquals(siKykSyouhn.getYendthnkymd(), BizDate.valueOf(20160709), "円建変更日");
        exDateEquals(siKykSyouhn.getSknnkaisiymd(), BizDate.valueOf(20150710), "責任開始日");
        exDateEquals(siKykSyouhn.getGansknnkaisiymd(), null, "がん責任開始日");
        exDateEquals(siKykSyouhn.getHkgansknnkaisiymd(), null, "復活がん責任開始日");
        exNumericEquals(siKykSyouhn.getKykage(), 4, "加入年齢");
        exClassificationEquals(siKykSyouhn.getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHknkkn(), 1, "保険期間");
        exDateEquals(siKykSyouhn.getHknkknmanryouymd(), BizDate.valueOf(20150712), "保険期間満了日");
        exClassificationEquals(siKykSyouhn.getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHrkkkn(), 2, "払込期間");
        exDateEquals(siKykSyouhn.getHrkkknmnryymd(), BizDate.valueOf(20150711), "払込期間満了日");
        exBizCalcbleEquals(siKykSyouhn.getHokenryou(), BizCurrency.valueOf(200), "保険料");
        exClassificationEquals(siKykSyouhn.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exClassificationEquals(siKykSyouhn.getKihonsntgkumu(), C_UmuKbn.ARI, "基本Ｓ日額有無");
        exBizCalcbleEquals(siKykSyouhn.getKihons(), BizCurrency.valueOf(10), "基本Ｓ");
        exClassificationEquals(siKykSyouhn.getKatakbn(), C_KataKbn.GKYUFGK_10, "型区分");
        exClassificationEquals(siKykSyouhn.getTkjyhyouten(), C_Tkjyhyouten.HYOUTEN100, "特条標点");
        exBizCalcbleEquals(siKykSyouhn.getTkjyp(), BizCurrency.valueOf(60), "特条保険料");
        exClassificationEquals(siKykSyouhn.getTkjyskgnkkn(), C_Tkjyskgnkkn.Y1, "特条削減期間");
        exStringEquals(siKykSyouhn.getHtnpbuicd1(), "1", "不担保部位コード１");
        exClassificationEquals(siKykSyouhn.getHtnpkkn1(), C_Htnpkkn.ONE, "不担保期間１");
        exStringEquals(siKykSyouhn.getHtnpbuicd2(), "2", "不担保部位コード２");
        exClassificationEquals(siKykSyouhn.getHtnpkkn2(), C_Htnpkkn.TOW, "不担保期間２");
        exStringEquals(siKykSyouhn.getHtnpbuicd3(), "3", "不担保部位コード３");
        exClassificationEquals(siKykSyouhn.getHtnpkkn3(), C_Htnpkkn.THREE, "不担保期間３");
        exStringEquals(siKykSyouhn.getHtnpbuicd4(), "4", "不担保部位コード４");
        exClassificationEquals(siKykSyouhn.getHtnpkkn4(), C_Htnpkkn.FOUR, "不担保期間４");
        exClassificationEquals(siKykSyouhn.getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "特定高度障害不担保区分");
        exStringEquals(siKykSyouhn.getKossyoricd(), "khhukkatu", "更新処理コード");
        exStringEquals(siKykSyouhn.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykSyouhn.getGyoumuKousinsyaId(), "", "業務用更新者ＩＤ");
        exStringEquals(siKykSyouhn.getGyoumuKousinTime(), "", "業務用更新時間");
        exStringEquals(siKykSyouhn.getRyouritusdno(), "111", "料率世代番号");
        exBizCalcbleEquals(siKykSyouhn.getYoteiriritu(), BizNumber.valueOf(1.2222), "予定利率");
        exNumericEquals(siKykSyouhn.getHhknnen(), 4, "被保険者年齢");
        exClassificationEquals(siKykSyouhn.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exBizCalcbleEquals(siKykSyouhn.getKyksjkkktyouseiriritu(), BizNumber.valueOf(3.0123), "契約時市場価格調整用利率");
        exBizCalcbleEquals(siKykSyouhn.getYoteirrthendohosyurrt(), BizNumber.valueOf(2.3333), "予定利率変動時保証利率");
        exBizCalcbleEquals(siKykSyouhn.getTumitateriritu(), BizNumber.valueOf(1.0123), "積立利率");
        exDateEquals(siKykSyouhn.getTmttknitenymd(), BizDate.valueOf(20170709), "積立金移転日");
        exNumericEquals(siKykSyouhn.getDai1hknkkn(), 1, "第１保険期間");

        exNumericEquals(siKykKihon.getSiUkts().size(), 1, "件数");
        JT_SiUkt siUkt = siKykKihon.getSiUkts().get(0);
        exStringEquals(siUkt.getSyono(), "11810111118", "証券番号");
        exClassificationEquals(siUkt.getHkuktsyu(), C_Hkuktsyu.KDSGHKUKT, "給付金受取人種類区分");
        exNumericEquals(siUkt.getUktsyurenno(), 1, "受取人種類別連番");
        exStringEquals(siUkt.getUktnmkn(), "カナレ", "受取人名（カナ）");
        exStringEquals(siUkt.getUktnmkj(), "被保険漢字", "受取人名（漢字）");
        exDateEquals(siUkt.getUktseiymd(), BizDate.valueOf(20150919), "受取人生年月日");
        exClassificationEquals(siUkt.getUkttdk(), C_Tdk.HONNIN, "受取人続柄");
        exClassificationEquals(siUkt.getUktkbn(), C_UktKbn.HHKN, "受取人区分");
        exBizCalcbleEquals(siUkt.getUktbnwari(), BizNumber.valueOf(100), "受取人分割割合");
        exStringEquals(siUkt.getKossyoricd(), "kid3", "更新処理コード");
        exStringEquals(siUkt.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siUkt.getGyoumuKousinsyaId(), "kid4", "業務用更新者ＩＤ");
        exStringEquals(siUkt.getGyoumuKousinTime(), "20160912000000", "業務用更新時間");

    }

    @Test
    @Transactional
    @TestOrder(20)
    public void testGetInfos_A2() {
        MockObjectManager.initialize();
        KeisanHtyKeihiMockForSiharai.SYORIPTN = KeisanHtyKeihiMockForSiharai.TESTPATTERN1;
        BetukutiKeiyakuInfoGetMockForSiharai.SYORIPTN = BetukutiKeiyakuInfoGetMockForSiharai.TESTPATTERN2;
        GetKhKykdrInfoMockForSiharai.SYORIPTN = GetKhKykdrInfoMockForSiharai.TESTPATTERN2;

        KeiyakuPrm keiyakuPrm = SWAKInjector.getInstance(KeiyakuPrm.class);
        keiyakuPrm.setSyono("11810111129");
        keiyakuPrm.setINayoseyh(C_NayoseYouhi.YOU);

        keiyakuInfoSyutoku.getInfos(keiyakuPrm);
        exNumericEquals(keiyakuInfoSyutoku.getKykKihons().size(), 2, "件数");
        JT_SiKykKihon siKykKihon = keiyakuInfoSyutoku.getKykKihons().get(0);
        exStringEquals(siKykKihon.getSyono(), "11810111129", "証券番号");
        exStringEquals(siKykKihon.getAitesyono(), "11810111129", "相手証券番号");
        exClassificationEquals(siKykKihon.getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(siKykKihon.getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exClassificationEquals(siKykKihon.getSntkhoukbn(), C_SntkhouKbn.KKT, "選択方法区分");
        exDateEquals(siKykKihon.getMosymd(), BizDate.valueOf(20150924), "申込日");
        exDateEquals(siKykKihon.getKktymd(), BizDate.valueOf(20150924), "告知日");
        exClassificationEquals(siKykKihon.getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(siKykKihon.getKykjyoutai(), C_Kykjyoutai.ENTYOU, "契約状態");
        exDateYMEquals(siKykKihon.getNexthrkym(), null, "次回払込年月");
        exDateEquals(siKykKihon.getYykknmnryymd(), null, "猶予期間満了日");
        exBizCalcbleEquals(siKykKihon.getKeip(), BizCurrency.valueOf(50), "合計保険料");
        exDateEquals(siKykKihon.getSykyknyhenkouymd(), null, "最終契約内容変更日");
        exDateEquals(siKykKihon.getLasthkhenkouymd(), null, "最終払方変更日");
        exClassificationEquals(siKykKihon.getSyoumetujiyuu(), C_Syoumetujiyuu.CLGOFF, "消滅事由");
        exDateEquals(siKykKihon.getSyoumetuymd(), BizDate.valueOf(20150707), "消滅日");
        exDateEquals(siKykKihon.getHrketykouryokuhasseiymd(), null, "払済延長効力発生日");
        exClassificationEquals(siKykKihon.getStknsetkbn(), C_StknsetKbn.ARI, "質権設定区分");
        exClassificationEquals(siKykKihon.getAplkahikbn(), C_Aplkahi.BLNK, "ＡＰＬ可否区分");
        exNumericEquals(siKykKihon.getSbuktnin(), 20, "死亡受取人人数");
        exClassificationEquals(siKykKihon.getSaihoum(), C_Saihoum.BLNK, "再保有無");
        exDateEquals(siKykKihon.getHksknnkaisiymd(), BizDate.valueOf(20150708), "復活責任開始日");
        exDateEquals(siKykKihon.getGnkykfksknnkaisiymd(), null, "原契約復旧責任開始日");
        exNumericEquals(siKykKihon.getJidouupdatekahi(), 0, "自動更新可否");
        exBizCalcbleEquals(siKykKihon.getJidouupdategop(), BizCurrency.valueOf(0), "自動更新後保険料");
        exClassificationEquals(siKykKihon.getLivingneedshukaumu(), C_UmuKbn.NONE, "リビングニーズ特約付加有無");
        exStringEquals(siKykKihon.getHhkntodouhukencd(), "", "被保険者都道府県コード");
        exClassificationEquals(siKykKihon.getTratkityuiumu(), C_UmuKbn.NONE, "取扱注意有無");
        exStringEquals(siKykKihon.getTratkityuiuny(), "", "取扱注意内容");
        exStringEquals(siKykKihon.getKyknmkn(), "カナ", "契約者名（カナ）");
        exStringEquals(siKykKihon.getKyknmkj(), "契約者名", "契約者名（漢字）");
        exClassificationEquals(siKykKihon.getKyksei(), C_Kyksei.MALE, "契約者性別");
        exDateEquals(siKykKihon.getKykseiymd(), BizDate.valueOf(20150924), "契約者生年月日");
        exStringEquals(siKykKihon.getKykyno(), "", "契約者郵便番号");
        exClassificationEquals(siKykKihon.getKkkyktdk(), C_Tdk.HGU, "契約管理契約者続柄");
        exStringEquals(siKykKihon.getTsinyno(), "", "通信先郵便番号");
        exStringEquals(siKykKihon.getTsinadr1kn(), "", "通信先住所１（カナ）");
        exStringEquals(siKykKihon.getTsinadr2kn(), "", "通信先住所２（カナ）");
        exStringEquals(siKykKihon.getTsinadr3kn(), "", "通信先住所３（カナ）");
        exStringEquals(siKykKihon.getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(siKykKihon.getTsinadr2kj(), "", "通信先住所２（漢字）");
        exStringEquals(siKykKihon.getTsinadr3kj(), "", "通信先住所３（漢字）");
        exStringEquals(siKykKihon.getTsintelno(), "", "通信先電話番号");
        exStringEquals(siKykKihon.getHhknnmkn(), "カナレ", "被保険者名（カナ）");
        exStringEquals(siKykKihon.getHhknnmkj(), "被保険漢字", "被保険者名（漢字）");
        exClassificationEquals(siKykKihon.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(siKykKihon.getHhknseiymd(), BizDate.valueOf(20150919), "被保険者生年月日");
        exStringEquals(siKykKihon.getHhknyno(), "1160230", "被保険者郵便番号");
        exStringEquals(siKykKihon.getHhknadr1kn(), "カカカカカ１", "被保険者住所１（カナ）");
        exStringEquals(siKykKihon.getHhknadr2kn(), "カカカカカ２", "被保険者住所２（カナ）");
        exStringEquals(siKykKihon.getHhknadr3kn(), "カカカカカ３", "被保険者住所３（カナ）");
        exStringEquals(siKykKihon.getHhknadr1kj(), "漢字一", "被保険者住所１（漢字）");
        exStringEquals(siKykKihon.getHhknadr2kj(), "漢字二", "被保険者住所２（漢字）");
        exStringEquals(siKykKihon.getHhknadr3kj(), "漢字三", "被保険者住所３（漢字）");
        exStringEquals(siKykKihon.getHhkntelno(), "010-1234-5678", "被保険者電話番号");
        exStringEquals(siKykKihon.getSiteidruktnmkn(), "", "指定代理受取人名（カナ）");
        exStringEquals(siKykKihon.getSiteidruktnmkj(), "", "指定代理受取人名（漢字）");
        exClassificationEquals(siKykKihon.getSiteidrukttdk(), C_Tdk.BLNK, "指定代理受取人続柄");
        exStringEquals(siKykKihon.getKzmeiginmkn(), "カナエブ", "口座名義人氏名（カナ）");
        exClassificationEquals(siKykKihon.getShrhousiteikbn(), C_ShrhousiteiKbn.BLNK, "支払方法指定区分");
        exStringEquals(siKykKihon.getBankcd(), "9901", "銀行コード");
        exStringEquals(siKykKihon.getSitencd(), "110", "支店コード");
        exClassificationEquals(siKykKihon.getYokinkbn(), C_YokinKbn.BETUDAN, "預金種目区分");
        exStringEquals(siKykKihon.getKouzano(), "1000001", "口座番号");
        exStringEquals(siKykKihon.getDrtencd(), "", "代理店コード");
        exStringEquals(siKykKihon.getOyadrtencd(), "", "親代理店コード");
        exStringEquals(siKykKihon.getDrtenkanrisosikicd(), "", "代理店管理組織コード");
        exStringEquals(siKykKihon.getBosyuucd(), "", "募集人コード");
        exNumericEquals(siKykKihon.getKykhnkkaisuu(), 1, "契約者変更回数");
        exBizCalcbleEquals(siKykKihon.getMisyuup(), BizCurrency.valueOf(0), "未収保険料");
        exDateYMEquals(siKykKihon.getMisyuupjyuutouym(), null, "未収保険料充当年月");
        exNumericEquals(siKykKihon.getMisyuupjytkaisuu(), 0, "未収保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getMikeikap(), BizCurrency.valueOf(0), "未経過保険料");
        exDateYMEquals(siKykKihon.getMikeikapjyuutouym(), null, "未経過保険料充当年月");
        exNumericEquals(siKykKihon.getMikeikapjytkaisuu(), 0, "未経過保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getKrkgk(), BizCurrency.valueOf(0), "仮受金額");
        exDateEquals(siKykKihon.getLastsyosaihkymd(), BizDate.valueOf(20150918), "最終証券再発行日");
        exDateEquals(siKykKihon.getLastmeihenymd(), BizDate.valueOf(20150918), "最終名義変更日");
        exStringEquals(siKykKihon.getKossyoricd(), "kid2", "更新処理コード");
        exDateEquals(siKykKihon.getLastsbukthenymd(), BizDate.valueOf(20160101), "最終死亡受取人変更日");
        exDateEquals(siKykKihon.getFstpnyknymd(), null, "初回保険料入金日");
        exStringEquals(siKykKihon.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykKihon.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siKykKihon.getGyoumuKousinTime(), "20150924000000", "業務用更新時間");
        exBizCalcbleEquals(siKykKihon.getHtykeihi(), BizCurrency.valueOf(11111), "必要経費");
        exBizCalcbleEquals(siKykKihon.getYenhtykeihi(), BizCurrency.valueOf(22222), "円換算必要経費");
        exBizCalcbleEquals(siKykKihon.getShrkykhtykeihi(),BizCurrency.valueOf(0), "支払時契約者必要経費");
        exClassificationEquals(siKykKihon.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exClassificationEquals(siKykKihon.getStdrsktkyhkumu(), C_UmuKbn.ARI, "被保険者代理特約付加有無");
        exClassificationEquals(siKykKihon.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(siKykKihon.getNkshrtkyknksyukkn(), 12, "年金支払特約年金期間");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn1(), C_TtdktyuuiKbn.TTDKTYUUOUTAITYUUI, "手続注意区分１");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn2(), C_TtdktyuuiKbn.KYKSYASOUSASYOUKAI, "手続注意区分２");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn3(), C_TtdktyuuiKbn.HASANOYOBITOUSAN, "手続注意区分３");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn4(), C_TtdktyuuiKbn.HOKENKEIYAKUSASIOSAE, "手続注意区分４");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn5(), C_TtdktyuuiKbn.KYKSYAYUKUEHUMEI, "手続注意区分５");
        exClassificationEquals(siKykKihon.getInitsbjiyensitihsytkhukaumu(), C_UmuKbn.NONE,
            "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(siKykKihon.getInitsbjiyenkasaiteihsygk(), BizCurrency.valueOf(0),
            "初期死亡時円換算最低保証額");
        exClassificationEquals(siKykKihon.getKykdrtkykhukaumu(), C_UmuKbn.NONE, "契約者代理特約付加有無");
        exClassificationEquals(siKykKihon.getKykdrknhatudoujyoutai(), C_KykdrknHtdjytKbn.SETTEI, "契約者代理権発動状態");
        exStringEquals(siKykKihon.getKykdairinmkj(), "", "契約者代理人名（漢字）");
        exStringEquals(siKykKihon.getKykdairinmkn(), "", "契約者代理人名（カナ）");
        exClassificationEquals(siKykKihon.getKykdrnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者代理人名漢字化不可区分");
        exStringEquals(siKykKihon.getKykdryno(), "", "契約者代理人郵便番号");
        exStringEquals(siKykKihon.getKykdradr1kj(), "", "契約者代理人住所１（漢字）");
        exStringEquals(siKykKihon.getKykdradr2kj(), "", "契約者代理人住所２（漢字）");
        exStringEquals(siKykKihon.getKykdradr3kj(), "", "契約者代理人住所３（漢字）");
        exDateEquals(siKykKihon.getKykdrseiymd(),  null, "契約者代理人生年月日");
        exStringEquals(siKykKihon.getKykdrtelno(), "", "契約者代理人電話番号");
        exClassificationEquals(siKykKihon.getSdpdkbn(), C_Sdpd.SD, "Ｓ建Ｐ建区分");
        exClassificationEquals(siKykKihon.getTikiktbrisyuruikbn(), C_TkiktbrisyuruiKbn.NONE, "定期一括払種類区分");

        exNumericEquals(siKykKihon.getSiKykSyouhns().size(), 1, "件数");
        JT_SiKykSyouhn siKykSyouhn = siKykKihon.getSiKykSyouhns().get(0);
        exStringEquals(siKykSyouhn.getSyono(), "11810111129", "証券番号");
        exClassificationEquals(siKykSyouhn.getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(siKykSyouhn.getSyouhncd(), "M910", "商品コード");
        exClassificationEquals(siKykSyouhn.getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exNumericEquals(siKykSyouhn.getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(siKykSyouhn.getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(siKykSyouhn.getSyouhnnm(), "外貨建て一時払終身保険（即時保障型）１", "商品名");
        exStringEquals(siKykSyouhn.getSyouhnnmgm(), "外貨建て一時払終身保険（即時保障型）２", "商品名（画面用）");
        exStringEquals(siKykSyouhn.getSyouhnnmtyhy(), "外貨建て一時払終身保険（即時保障型）３", "商品名（帳票用）");
        exClassificationEquals(siKykSyouhn.getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(siKykSyouhn.getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(siKykSyouhn.getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(siKykSyouhn.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(siKykSyouhn.getYuukoukikanfrom(), BizDate.valueOf(20150708), "有効期間（自）");
        exDateEquals(siKykSyouhn.getYuukoukikanto(), BizDate.valueOf(20150712), "有効期間（至");
        exDateEquals(siKykSyouhn.getKykymd(), BizDate.valueOf(20150709), "契約日");
        exDateEquals(siKykSyouhn.getYendthnkymd(), BizDate.valueOf(20160710), "円建変更日");
        exDateEquals(siKykSyouhn.getSknnkaisiymd(), BizDate.valueOf(20150710), "責任開始日");
        exDateEquals(siKykSyouhn.getGansknnkaisiymd(), null, "がん責任開始日");
        exDateEquals(siKykSyouhn.getHkgansknnkaisiymd(), null, "復活がん責任開始日");
        exNumericEquals(siKykSyouhn.getKykage(), 4, "加入年齢");
        exClassificationEquals(siKykSyouhn.getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHknkkn(), 1, "保険期間");
        exDateEquals(siKykSyouhn.getHknkknmanryouymd(), BizDate.valueOf(20150712), "保険期間満了日");
        exClassificationEquals(siKykSyouhn.getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHrkkkn(), 2, "払込期間");
        exDateEquals(siKykSyouhn.getHrkkknmnryymd(), BizDate.valueOf(20150711), "払込期間満了日");
        exBizCalcbleEquals(siKykSyouhn.getHokenryou(), BizCurrency.valueOf(200), "保険料");
        exClassificationEquals(siKykSyouhn.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exClassificationEquals(siKykSyouhn.getKihonsntgkumu(), C_UmuKbn.ARI, "基本Ｓ日額有無");
        exBizCalcbleEquals(siKykSyouhn.getKihons(), BizCurrency.valueOf(10), "基本Ｓ");
        exClassificationEquals(siKykSyouhn.getKatakbn(), C_KataKbn.GKYUFGK_10, "型区分");
        exClassificationEquals(siKykSyouhn.getTkjyhyouten(), C_Tkjyhyouten.BLNK, "特条標点");
        exBizCalcbleEquals(siKykSyouhn.getTkjyp(), BizCurrency.valueOf(0), "特条保険料");
        exClassificationEquals(siKykSyouhn.getTkjyskgnkkn(), C_Tkjyskgnkkn.BLNK, "特条削減期間");
        exStringEquals(siKykSyouhn.getHtnpbuicd1(), "", "不担保部位コード１");
        exClassificationEquals(siKykSyouhn.getHtnpkkn1(), C_Htnpkkn.BLNK, "不担保期間１");
        exStringEquals(siKykSyouhn.getHtnpbuicd2(), "", "不担保部位コード２");
        exClassificationEquals(siKykSyouhn.getHtnpkkn2(), C_Htnpkkn.BLNK, "不担保期間２");
        exStringEquals(siKykSyouhn.getHtnpbuicd3(), "", "不担保部位コード３");
        exClassificationEquals(siKykSyouhn.getHtnpkkn3(), C_Htnpkkn.BLNK, "不担保期間３");
        exStringEquals(siKykSyouhn.getHtnpbuicd4(), "", "不担保部位コード４");
        exClassificationEquals(siKykSyouhn.getHtnpkkn4(), C_Htnpkkn.BLNK, "不担保期間４");
        exClassificationEquals(siKykSyouhn.getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.BLNK, "特定高度障害不担保区分");
        exStringEquals(siKykSyouhn.getKossyoricd(), "khhukkatu", "更新処理コード");
        exStringEquals(siKykSyouhn.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykSyouhn.getGyoumuKousinsyaId(), "", "業務用更新者ＩＤ");
        exStringEquals(siKykSyouhn.getGyoumuKousinTime(), "", "業務用更新時間");
        exStringEquals(siKykSyouhn.getRyouritusdno(), "", "料率世代番号");
        exBizCalcbleEquals(siKykSyouhn.getYoteiriritu(), BizNumber.valueOf(0), "予定利率");
        exNumericEquals(siKykSyouhn.getHhknnen(), 4, "被保険者年齢");
        exClassificationEquals(siKykSyouhn.getHhknsei(), C_Hhknsei.BLNK, "被保険者性別");
        exBizCalcbleEquals(siKykSyouhn.getKyksjkkktyouseiriritu(), BizNumber.valueOf(0), "契約時市場価格調整用利率");
        exBizCalcbleEquals(siKykSyouhn.getYoteirrthendohosyurrt(), BizNumber.valueOf(0), "予定利率変動時保証利率");
        exDateEquals(siKykSyouhn.getTmttknitenymd(), null, "積立金移転日");
        exNumericEquals(siKykSyouhn.getDai1hknkkn(), 1, "第１保険期間");

        exNumericEquals(siKykKihon.getSiUkts().size(), 0, "件数");

        JT_SiKykKihon siKykKihon1 = keiyakuInfoSyutoku.getKykKihons().get(1);
        exStringEquals(siKykKihon1.getSyono(), "11810111152", "証券番号");
        exStringEquals(siKykKihon1.getAitesyono(), "11810111152", "相手証券番号");
        exClassificationEquals(siKykKihon1.getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(siKykKihon1.getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exClassificationEquals(siKykKihon1.getSntkhoukbn(), C_SntkhouKbn.KKT, "選択方法区分");
        exDateEquals(siKykKihon1.getMosymd(), BizDate.valueOf(20150924), "申込日");
        exDateEquals(siKykKihon1.getKktymd(), BizDate.valueOf(20150924), "告知日");
        exClassificationEquals(siKykKihon1.getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(siKykKihon1.getKykjyoutai(), C_Kykjyoutai.ENTYOU, "契約状態");
        exDateYMEquals(siKykKihon1.getNexthrkym(), null, "次回払込年月");
        exDateEquals(siKykKihon1.getYykknmnryymd(), null, "猶予期間満了日");
        exBizCalcbleEquals(siKykKihon1.getKeip(), BizCurrency.valueOf(50), "合計保険料");
        exDateEquals(siKykKihon1.getSykyknyhenkouymd(), null, "最終契約内容変更日");
        exDateEquals(siKykKihon1.getLasthkhenkouymd(), null, "最終払方変更日");
        exClassificationEquals(siKykKihon1.getSyoumetujiyuu(), C_Syoumetujiyuu.CLGOFF, "消滅事由");
        exDateEquals(siKykKihon1.getSyoumetuymd(), BizDate.valueOf(20150707), "消滅日");
        exDateEquals(siKykKihon1.getHrketykouryokuhasseiymd(), null, "払済延長効力発生日");
        exClassificationEquals(siKykKihon1.getStknsetkbn(), C_StknsetKbn.ARI, "質権設定区分");
        exClassificationEquals(siKykKihon1.getAplkahikbn(), C_Aplkahi.BLNK, "ＡＰＬ可否区分");
        exNumericEquals(siKykKihon1.getSbuktnin(), 20, "死亡受取人人数");
        exClassificationEquals(siKykKihon1.getSaihoum(), C_Saihoum.BLNK, "再保有無");
        exDateEquals(siKykKihon1.getHksknnkaisiymd(), BizDate.valueOf(20150708), "復活責任開始日");
        exDateEquals(siKykKihon1.getGnkykfksknnkaisiymd(), null, "原契約復旧責任開始日");
        exNumericEquals(siKykKihon1.getJidouupdatekahi(), 0, "自動更新可否");
        exBizCalcbleEquals(siKykKihon1.getJidouupdategop(), BizCurrency.valueOf(0), "自動更新後保険料");
        exClassificationEquals(siKykKihon1.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exStringEquals(siKykKihon1.getHhkntodouhukencd(), "", "被保険者都道府県コード");
        exClassificationEquals(siKykKihon1.getTratkityuiumu(), C_UmuKbn.NONE, "取扱注意有無");
        exStringEquals(siKykKihon1.getTratkityuiuny(), "", "取扱注意内容");
        exStringEquals(siKykKihon1.getKyknmkn(), "カナ", "契約者名（カナ）");
        exStringEquals(siKykKihon1.getKyknmkj(), "契約者名", "契約者名（漢字）");
        exClassificationEquals(siKykKihon1.getKyksei(), C_Kyksei.MALE, "契約者性別");
        exDateEquals(siKykKihon1.getKykseiymd(), BizDate.valueOf(20150924), "契約者生年月日");
        exStringEquals(siKykKihon1.getKykyno(), "", "契約者郵便番号");
        exClassificationEquals(siKykKihon1.getKkkyktdk(), C_Tdk.HGU, "契約管理契約者続柄");
        exStringEquals(siKykKihon1.getTsinyno(), "", "通信先郵便番号");
        exStringEquals(siKykKihon1.getTsinadr1kn(), "", "通信先住所１（カナ）");
        exStringEquals(siKykKihon1.getTsinadr2kn(), "", "通信先住所２（カナ）");
        exStringEquals(siKykKihon1.getTsinadr3kn(), "", "通信先住所３（カナ）");
        exStringEquals(siKykKihon1.getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(siKykKihon1.getTsinadr2kj(), "", "通信先住所２（漢字）");
        exStringEquals(siKykKihon1.getTsinadr3kj(), "", "通信先住所３（漢字）");
        exStringEquals(siKykKihon1.getTsintelno(), "", "通信先電話番号");
        exStringEquals(siKykKihon1.getHhknnmkn(), "カナレナレ", "被保険者名（カナ）");
        exStringEquals(siKykKihon1.getHhknnmkj(), "被保険保険漢字", "被保険者名（漢字）");
        exClassificationEquals(siKykKihon1.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(siKykKihon1.getHhknseiymd(), BizDate.valueOf(20150919), "被保険者生年月日");
        exStringEquals(siKykKihon1.getHhknyno(), "1160000", "被保険者郵便番号");
        exStringEquals(siKykKihon1.getHhknadr1kn(), "カカカカカ１", "被保険者住所１（カナ）");
        exStringEquals(siKykKihon1.getHhknadr2kn(), "カカカカカ２", "被保険者住所２（カナ）");
        exStringEquals(siKykKihon1.getHhknadr3kn(), "カカカカカ３", "被保険者住所３（カナ）");
        exStringEquals(siKykKihon1.getHhknadr1kj(), "漢字一", "被保険者住所１（漢字）");
        exStringEquals(siKykKihon1.getHhknadr2kj(), "漢字二", "被保険者住所２（漢字）");
        exStringEquals(siKykKihon1.getHhknadr3kj(), "漢字三", "被保険者住所３（漢字）");
        exStringEquals(siKykKihon1.getHhkntelno(), "010-1234-5678", "被保険者電話番号");
        exStringEquals(siKykKihon1.getSiteidruktnmkn(), "", "指定代理受取人名（カナ）");
        exStringEquals(siKykKihon1.getSiteidruktnmkj(), "", "指定代理受取人名（漢字）");
        exClassificationEquals(siKykKihon1.getSiteidrukttdk(), C_Tdk.BLNK, "指定代理受取人続柄");
        exStringEquals(siKykKihon1.getKzmeiginmkn(), "", "口座名義人氏名（カナ）");
        exClassificationEquals(siKykKihon1.getShrhousiteikbn(), C_ShrhousiteiKbn.BLNK, "支払方法指定区分");
        exStringEquals(siKykKihon1.getBankcd(), "", "銀行コード");
        exStringEquals(siKykKihon1.getSitencd(), "", "支店コード");
        exClassificationEquals(siKykKihon1.getYokinkbn(), C_YokinKbn.BLNK, "預金種目区分");
        exStringEquals(siKykKihon1.getKouzano(), "", "口座番号");
        exStringEquals(siKykKihon1.getDrtencd(), "", "代理店コード");
        exStringEquals(siKykKihon1.getOyadrtencd(), "", "親代理店コード");
        exStringEquals(siKykKihon1.getDrtenkanrisosikicd(), "", "代理店管理組織コード");
        exStringEquals(siKykKihon1.getBosyuucd(), "", "募集人コード");
        exNumericEquals(siKykKihon1.getKykhnkkaisuu(), 0, "契約者変更回数");
        exBizCalcbleEquals(siKykKihon1.getMisyuup(), BizCurrency.valueOf(0), "未収保険料");
        exDateYMEquals(siKykKihon1.getMisyuupjyuutouym(), null, "未収保険料充当年月");
        exNumericEquals(siKykKihon1.getMisyuupjytkaisuu(), 0, "未収保険料充当回数");
        exBizCalcbleEquals(siKykKihon1.getMikeikap(), BizCurrency.valueOf(0), "未経過保険料");
        exDateYMEquals(siKykKihon1.getMikeikapjyuutouym(), null, "未経過保険料充当年月");
        exNumericEquals(siKykKihon1.getMikeikapjytkaisuu(), 0, "未経過保険料充当回数");
        exBizCalcbleEquals(siKykKihon1.getKrkgk(), BizCurrency.valueOf(0), "仮受金額");
        exDateEquals(siKykKihon1.getLastsyosaihkymd(), BizDate.valueOf(20150918), "最終証券再発行日");
        exDateEquals(siKykKihon1.getLastmeihenymd(), BizDate.valueOf(20150918), "最終名義変更日");
        exStringEquals(siKykKihon1.getKossyoricd(), "kid2", "更新処理コード");
        exDateEquals(siKykKihon1.getLastsbukthenymd(), BizDate.valueOf(20160101), "最終死亡受取人変更日");
        exStringEquals(siKykKihon1.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykKihon1.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siKykKihon1.getGyoumuKousinTime(), "20150924000000", "業務用更新時間");
        exBizCalcbleEquals(siKykKihon1.getHtykeihi(), BizCurrency.valueOf(11111), "必要経費");
        exBizCalcbleEquals(siKykKihon1.getYenhtykeihi(), BizCurrency.valueOf(22222), "円換算必要経費");
        exBizCalcbleEquals(siKykKihon1.getShrkykhtykeihi(),BizCurrency.valueOf(0), "支払時契約者必要経費");
        exClassificationEquals(siKykKihon1.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exClassificationEquals(siKykKihon1.getStdrsktkyhkumu(), C_UmuKbn.NONE, "被保険者代理特約付加有無");
        exClassificationEquals(siKykKihon1.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(siKykKihon1.getNkshrtkyknksyukkn(), 12, "年金支払特約年金期間");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn1(), C_TtdktyuuiKbn.TTDKTYUUOUTAITYUUI, "手続注意区分１");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn2(), C_TtdktyuuiKbn.KYKSYASOUSASYOUKAI, "手続注意区分２");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn3(), C_TtdktyuuiKbn.HASANOYOBITOUSAN, "手続注意区分３");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn4(), C_TtdktyuuiKbn.HOKENKEIYAKUSASIOSAE, "手続注意区分４");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn5(), C_TtdktyuuiKbn.KYKSYAYUKUEHUMEI, "手続注意区分５");
        exClassificationEquals(siKykKihon1.getInitsbjiyensitihsytkhukaumu(), C_UmuKbn.NONE,
            "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(siKykKihon1.getInitsbjiyenkasaiteihsygk(), BizCurrency.valueOf(0),
            "初期死亡時円換算最低保証額");
        exClassificationEquals(siKykKihon.getKykdrtkykhukaumu(), C_UmuKbn.NONE, "契約者代理特約付加有無");
        exClassificationEquals(siKykKihon.getKykdrknhatudoujyoutai(), C_KykdrknHtdjytKbn.SETTEI, "契約者代理権発動状態");
        exStringEquals(siKykKihon.getKykdairinmkj(), "", "契約者代理人名（漢字）");
        exStringEquals(siKykKihon.getKykdairinmkn(), "", "契約者代理人名（カナ）");
        exClassificationEquals(siKykKihon.getKykdrnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者代理人名漢字化不可区分");
        exStringEquals(siKykKihon.getKykdryno(), "", "契約者代理人郵便番号");
        exStringEquals(siKykKihon.getKykdradr1kj(), "", "契約者代理人住所１（漢字）");
        exStringEquals(siKykKihon.getKykdradr2kj(), "", "契約者代理人住所２（漢字）");
        exStringEquals(siKykKihon.getKykdradr3kj(), "", "契約者代理人住所３（漢字）");
        exDateEquals(siKykKihon.getKykdrseiymd(),  null, "契約者代理人生年月日");
        exStringEquals(siKykKihon.getKykdrtelno(), "", "契約者代理人電話番号");
        exClassificationEquals(siKykKihon.getSdpdkbn(), C_Sdpd.SD, "Ｓ建Ｐ建区分");
        exClassificationEquals(siKykKihon.getTikiktbrisyuruikbn(), C_TkiktbrisyuruiKbn.NONE, "定期一括払種類区分");

        exNumericEquals(siKykKihon1.getSiKykSyouhns().size(),1, "件数");
        JT_SiKykSyouhn siKykSyouhn1 = siKykKihon1.getSiKykSyouhns().get(0);
        exStringEquals(siKykSyouhn1.getSyono(), "11810111152", "証券番号");
        exClassificationEquals(siKykSyouhn1.getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(siKykSyouhn1.getSyouhncd(), "M910", "商品コード");
        exClassificationEquals(siKykSyouhn1.getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exNumericEquals(siKykSyouhn1.getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(siKykSyouhn1.getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(siKykSyouhn1.getSyouhnnm(), "外貨建て一時払終身保険（即時保障型）１", "商品名");
        exStringEquals(siKykSyouhn1.getSyouhnnmgm(), "外貨建て一時払終身保険（即時保障型）２", "商品名（画面用）");
        exStringEquals(siKykSyouhn1.getSyouhnnmtyhy(), "外貨建て一時払終身保険（即時保障型）３", "商品名（帳票用）");
        exClassificationEquals(siKykSyouhn1.getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(siKykSyouhn1.getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(siKykSyouhn1.getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(siKykSyouhn1.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(siKykSyouhn1.getYuukoukikanfrom(), BizDate.valueOf(20150708), "有効期間（自）");
        exDateEquals(siKykSyouhn1.getYuukoukikanto(), BizDate.valueOf(20150712), "有効期間（至");
        exDateEquals(siKykSyouhn1.getKykymd(), BizDate.valueOf(20150709), "契約日");
        exDateEquals(siKykSyouhn1.getYendthnkymd(), BizDate.valueOf(20160711), "円建変更日");
        exDateEquals(siKykSyouhn1.getSknnkaisiymd(), BizDate.valueOf(20150710), "責任開始日");
        exDateEquals(siKykSyouhn1.getGansknnkaisiymd(), null, "がん責任開始日");
        exDateEquals(siKykSyouhn1.getHkgansknnkaisiymd(), null, "復活がん責任開始日");
        exNumericEquals(siKykSyouhn1.getKykage(), 4, "加入年齢");
        exClassificationEquals(siKykSyouhn1.getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(siKykSyouhn1.getHknkkn(), 1, "保険期間");
        exDateEquals(siKykSyouhn1.getHknkknmanryouymd(), BizDate.valueOf(20150712), "保険期間満了日");
        exClassificationEquals(siKykSyouhn1.getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(siKykSyouhn1.getHrkkkn(), 2, "払込期間");
        exDateEquals(siKykSyouhn1.getHrkkknmnryymd(), BizDate.valueOf(20150711), "払込期間満了日");
        exBizCalcbleEquals(siKykSyouhn1.getHokenryou(), BizCurrency.valueOf(200), "保険料");
        exClassificationEquals(siKykSyouhn1.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exClassificationEquals(siKykSyouhn1.getKihonsntgkumu(), C_UmuKbn.ARI, "基本Ｓ日額有無");
        exBizCalcbleEquals(siKykSyouhn1.getKihons(), BizCurrency.valueOf(10), "基本Ｓ");
        exClassificationEquals(siKykSyouhn1.getKatakbn(), C_KataKbn.GKYUFGK_10, "型区分");
        exClassificationEquals(siKykSyouhn1.getTkjyhyouten(), C_Tkjyhyouten.BLNK, "特条標点");
        exBizCalcbleEquals(siKykSyouhn1.getTkjyp(), BizCurrency.valueOf(0), "特条保険料");
        exClassificationEquals(siKykSyouhn1.getTkjyskgnkkn(), C_Tkjyskgnkkn.BLNK, "特条削減期間");
        exStringEquals(siKykSyouhn1.getHtnpbuicd1(), "", "不担保部位コード１");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn1(), C_Htnpkkn.BLNK, "不担保期間１");
        exStringEquals(siKykSyouhn1.getHtnpbuicd2(), "", "不担保部位コード２");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn2(), C_Htnpkkn.BLNK, "不担保期間２");
        exStringEquals(siKykSyouhn1.getHtnpbuicd3(), "", "不担保部位コード３");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn3(), C_Htnpkkn.BLNK, "不担保期間３");
        exStringEquals(siKykSyouhn1.getHtnpbuicd4(), "", "不担保部位コード４");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn4(), C_Htnpkkn.BLNK, "不担保期間４");
        exClassificationEquals(siKykSyouhn1.getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.BLNK, "特定高度障害不担保区分");
        exStringEquals(siKykSyouhn1.getKossyoricd(), "khhukkatu", "更新処理コード");
        exStringEquals(siKykSyouhn1.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykSyouhn1.getGyoumuKousinsyaId(), "", "業務用更新者ＩＤ");
        exStringEquals(siKykSyouhn1.getGyoumuKousinTime(), "", "業務用更新時間");
        exStringEquals(siKykSyouhn1.getRyouritusdno(), "", "料率世代番号");
        exBizCalcbleEquals(siKykSyouhn1.getYoteiriritu(), BizNumber.valueOf(0), "予定利率");
        exNumericEquals(siKykSyouhn1.getHhknnen(), 4, "被保険者年齢");
        exClassificationEquals(siKykSyouhn1.getHhknsei(), C_Hhknsei.BLNK, "被保険者性別");
        exBizCalcbleEquals(siKykSyouhn1.getKyksjkkktyouseiriritu(), BizNumber.valueOf(0), "契約時市場価格調整用利率");
        exBizCalcbleEquals(siKykSyouhn1.getTumitateriritu(), BizNumber.valueOf(0), "積立利率");
        exDateEquals(siKykSyouhn1.getTmttknitenymd(), BizDate.valueOf(20170711), "積立金移転日");
        exNumericEquals(siKykSyouhn.getDai1hknkkn(), 1, "第１保険期間");

        exNumericEquals(siKykKihon1.getSiUkts().size(), 3, "件数");
        JT_SiUkt siUkt = siKykKihon1.getSiUkts().get(0);
        exStringEquals(siUkt.getSyono(), "11810111152", "証券番号");
        exClassificationEquals(siUkt.getHkuktsyu(), C_Hkuktsyu.KDSGHKUKT, "給付金受取人種類区分");
        exNumericEquals(siUkt.getUktsyurenno(), 1, "受取人種類別連番");
        exStringEquals(siUkt.getUktnmkn(), "カナレナレ", "受取人名（カナ）");
        exStringEquals(siUkt.getUktnmkj(), "被保険保険漢字", "受取人名（漢字）");
        exDateEquals(siUkt.getUktseiymd(), BizDate.valueOf(20150919), "受取人生年月日");
        exClassificationEquals(siUkt.getUkttdk(), C_Tdk.HONNIN, "受取人続柄");
        exClassificationEquals(siUkt.getUktkbn(), C_UktKbn.HHKN, "受取人区分");
        exBizCalcbleEquals(siUkt.getUktbnwari(), BizNumber.valueOf(100), "受取人分割割合");
        exStringEquals(siUkt.getKossyoricd(), "kid3", "更新処理コード");
        exStringEquals(siUkt.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siUkt.getGyoumuKousinsyaId(), "kid4", "業務用更新者ＩＤ");
        exStringEquals(siUkt.getGyoumuKousinTime(), "", "業務用更新時間");
        JT_SiUkt siUkt1 = siKykKihon1.getSiUkts().get(1);
        exStringEquals(siUkt1.getSyono(), "11810111152", "証券番号");
        exClassificationEquals(siUkt1.getHkuktsyu(), C_Hkuktsyu.SBHKKUKT, "給付金受取人種類区分");
        exNumericEquals(siUkt1.getUktsyurenno(), 1, "受取人種類別連番");
        exStringEquals(siUkt1.getUktnmkn(), "カナ", "受取人名（カナ）");
        exStringEquals(siUkt1.getUktnmkj(), "受取人名漢字一", "受取人名（漢字）");
        exDateEquals(siUkt1.getUktseiymd(), null, "受取人生年月日");
        exClassificationEquals(siUkt1.getUkttdk(), C_Tdk.HGU, "受取人続柄");
        exClassificationEquals(siUkt1.getUktkbn(), C_UktKbn.SOUZOKUNIN, "受取人区分");
        exBizCalcbleEquals(siUkt1.getUktbnwari(), BizNumber.valueOf(50), "受取人分割割合");
        exStringEquals(siUkt1.getKossyoricd(), "khgengaku", "更新処理コード");
        exStringEquals(siUkt1.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siUkt1.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siUkt1.getGyoumuKousinTime(), "20150912000000", "業務用更新時間");
        JT_SiUkt siUkt2 = siKykKihon1.getSiUkts().get(2);
        exStringEquals(siUkt2.getSyono(), "11810111152", "証券番号");
        exClassificationEquals(siUkt2.getHkuktsyu(), C_Hkuktsyu.SBHKKUKT, "給付金受取人種類区分");
        exNumericEquals(siUkt2.getUktsyurenno(), 2, "受取人種類別連番");
        exStringEquals(siUkt2.getUktnmkn(), "カオ", "受取人名（カナ）");
        exStringEquals(siUkt2.getUktnmkj(), "受取人名漢字二", "受取人名（漢字）");
        exDateEquals(siUkt2.getUktseiymd(), null, "受取人生年月日");
        exClassificationEquals(siUkt2.getUkttdk(), C_Tdk.OYA, "受取人続柄");
        exClassificationEquals(siUkt2.getUktkbn(), C_UktKbn.STDRNIN, "受取人区分");
        exBizCalcbleEquals(siUkt2.getUktbnwari(), BizNumber.valueOf(100), "受取人分割割合");
        exStringEquals(siUkt2.getKossyoricd(), "khgengaku", "更新処理コード");
        exStringEquals(siUkt2.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siUkt2.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siUkt2.getGyoumuKousinTime(), "20150912000000", "業務用更新時間");

    }

    @Test
    @Transactional
    @TestOrder(30)
    public void testGetInfos_A3() {
        MockObjectManager.initialize();
        KeisanHtyKeihiMockForSiharai.SYORIPTN = KeisanHtyKeihiMockForSiharai.TESTPATTERN1;
        BetukutiKeiyakuInfoGetMockForSiharai.SYORIPTN = BetukutiKeiyakuInfoGetMockForSiharai.TESTPATTERN3;
        GetKhKykdrInfoMockForSiharai.SYORIPTN = GetKhKykdrInfoMockForSiharai.TESTPATTERN2;

        KeiyakuPrm keiyakuPrm = SWAKInjector.getInstance(KeiyakuPrm.class);
        keiyakuPrm.setSyono("11810111130");
        keiyakuPrm.setINayoseyh(C_NayoseYouhi.YOU);

        keiyakuInfoSyutoku.getInfos(keiyakuPrm);
        exNumericEquals(keiyakuInfoSyutoku.getKykKihons().size(), 4, "件数");
        JT_SiKykKihon siKykKihon = keiyakuInfoSyutoku.getKykKihons().get(0);
        exStringEquals(siKykKihon.getSyono(), "11810111130", "証券番号");
        exStringEquals(siKykKihon.getAitesyono(), "11810111130", "相手証券番号");
        exClassificationEquals(siKykKihon.getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(siKykKihon.getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exClassificationEquals(siKykKihon.getSntkhoukbn(), C_SntkhouKbn.KKT, "選択方法区分");
        exDateEquals(siKykKihon.getMosymd(), BizDate.valueOf(20150924), "申込日");
        exDateEquals(siKykKihon.getKktymd(), BizDate.valueOf(20150924), "告知日");
        exClassificationEquals(siKykKihon.getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(siKykKihon.getKykjyoutai(), C_Kykjyoutai.ENTYOU, "契約状態");
        exDateYMEquals(siKykKihon.getNexthrkym(), null, "次回払込年月");
        exDateEquals(siKykKihon.getYykknmnryymd(), null, "猶予期間満了日");
        exBizCalcbleEquals(siKykKihon.getKeip(), BizCurrency.valueOf(50), "合計保険料");
        exDateEquals(siKykKihon.getSykyknyhenkouymd(), null, "最終契約内容変更日");
        exDateEquals(siKykKihon.getLasthkhenkouymd(), null, "最終払方変更日");
        exClassificationEquals(siKykKihon.getSyoumetujiyuu(), C_Syoumetujiyuu.CLGOFF, "消滅事由");
        exDateEquals(siKykKihon.getSyoumetuymd(), BizDate.valueOf(20150707), "消滅日");
        exDateEquals(siKykKihon.getHrketykouryokuhasseiymd(), null, "払済延長効力発生日");
        exClassificationEquals(siKykKihon.getStknsetkbn(), C_StknsetKbn.ARI, "質権設定区分");
        exClassificationEquals(siKykKihon.getAplkahikbn(), C_Aplkahi.BLNK, "ＡＰＬ可否区分");
        exNumericEquals(siKykKihon.getSbuktnin(), 20, "死亡受取人人数");
        exClassificationEquals(siKykKihon.getSaihoum(), C_Saihoum.BLNK, "再保有無");
        exDateEquals(siKykKihon.getHksknnkaisiymd(), BizDate.valueOf(20150708), "復活責任開始日");
        exDateEquals(siKykKihon.getGnkykfksknnkaisiymd(), null, "原契約復旧責任開始日");
        exNumericEquals(siKykKihon.getJidouupdatekahi(), 0, "自動更新可否");
        exBizCalcbleEquals(siKykKihon.getJidouupdategop(), BizCurrency.valueOf(0), "自動更新後保険料");
        exClassificationEquals(siKykKihon.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exStringEquals(siKykKihon.getHhkntodouhukencd(), "", "被保険者都道府県コード");
        exClassificationEquals(siKykKihon.getTratkityuiumu(), C_UmuKbn.NONE, "取扱注意有無");
        exStringEquals(siKykKihon.getTratkityuiuny(), "", "取扱注意内容");
        exStringEquals(siKykKihon.getKyknmkn(), "カナ", "契約者名（カナ）");
        exStringEquals(siKykKihon.getKyknmkj(), "契約者名", "契約者名（漢字）");
        exClassificationEquals(siKykKihon.getKyksei(), C_Kyksei.MALE, "契約者性別");
        exDateEquals(siKykKihon.getKykseiymd(), BizDate.valueOf(20150924), "契約者生年月日");
        exStringEquals(siKykKihon.getKykyno(), "", "契約者郵便番号");
        exClassificationEquals(siKykKihon.getKkkyktdk(), C_Tdk.HGU, "契約管理契約者続柄");
        exStringEquals(siKykKihon.getTsinyno(), "", "通信先郵便番号");
        exStringEquals(siKykKihon.getTsinadr1kn(), "", "通信先住所１（カナ）");
        exStringEquals(siKykKihon.getTsinadr2kn(), "", "通信先住所２（カナ）");
        exStringEquals(siKykKihon.getTsinadr3kn(), "", "通信先住所３（カナ）");
        exStringEquals(siKykKihon.getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(siKykKihon.getTsinadr2kj(), "", "通信先住所２（漢字）");
        exStringEquals(siKykKihon.getTsinadr3kj(), "", "通信先住所３（漢字）");
        exStringEquals(siKykKihon.getTsintelno(), "", "通信先電話番号");
        exStringEquals(siKykKihon.getHhknnmkn(), "", "被保険者名（カナ）");
        exStringEquals(siKykKihon.getHhknnmkj(), "", "被保険者名（漢字）");
        exClassificationEquals(siKykKihon.getHhknsei(), C_Hhknsei.BLNK, "被保険者性別");
        exDateEquals(siKykKihon.getHhknseiymd(), null, "被保険者生年月日");
        exStringEquals(siKykKihon.getHhknyno(), "", "被保険者郵便番号");
        exStringEquals(siKykKihon.getHhknadr1kn(), "", "被保険者住所１（カナ）");
        exStringEquals(siKykKihon.getHhknadr2kn(), "", "被保険者住所２（カナ）");
        exStringEquals(siKykKihon.getHhknadr3kn(), "", "被保険者住所３（カナ）");
        exStringEquals(siKykKihon.getHhknadr1kj(), "", "被保険者住所１（漢字）");
        exStringEquals(siKykKihon.getHhknadr2kj(), "", "被保険者住所２（漢字）");
        exStringEquals(siKykKihon.getHhknadr3kj(), "", "被保険者住所３（漢字）");
        exStringEquals(siKykKihon.getHhkntelno(), "", "被保険者電話番号");
        exStringEquals(siKykKihon.getSiteidruktnmkn(), "", "指定代理受取人名（カナ）");
        exStringEquals(siKykKihon.getSiteidruktnmkj(), "", "指定代理受取人名（漢字）");
        exClassificationEquals(siKykKihon.getSiteidrukttdk(), C_Tdk.BLNK, "指定代理受取人続柄");
        exStringEquals(siKykKihon.getKzmeiginmkn(), "", "口座名義人氏名（カナ）");
        exClassificationEquals(siKykKihon.getShrhousiteikbn(), C_ShrhousiteiKbn.BLNK, "支払方法指定区分");
        exStringEquals(siKykKihon.getBankcd(), "", "銀行コード");
        exStringEquals(siKykKihon.getSitencd(), "", "支店コード");
        exClassificationEquals(siKykKihon.getYokinkbn(), C_YokinKbn.BLNK, "預金種目区分");
        exStringEquals(siKykKihon.getKouzano(), "", "口座番号");
        exStringEquals(siKykKihon.getDrtencd(), "", "代理店コード");
        exStringEquals(siKykKihon.getOyadrtencd(), "", "親代理店コード");
        exStringEquals(siKykKihon.getDrtenkanrisosikicd(), "", "代理店管理組織コード");
        exStringEquals(siKykKihon.getBosyuucd(), "", "募集人コード");
        exNumericEquals(siKykKihon.getKykhnkkaisuu(), 0, "契約者変更回数");
        exBizCalcbleEquals(siKykKihon.getMisyuup(), BizCurrency.valueOf(0), "未収保険料");
        exDateYMEquals(siKykKihon.getMisyuupjyuutouym(), null, "未収保険料充当年月");
        exNumericEquals(siKykKihon.getMisyuupjytkaisuu(), 0, "未収保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getMikeikap(), BizCurrency.valueOf(0), "未経過保険料");
        exDateYMEquals(siKykKihon.getMikeikapjyuutouym(), null, "未経過保険料充当年月");
        exNumericEquals(siKykKihon.getMikeikapjytkaisuu(), 0, "未経過保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getKrkgk(), BizCurrency.valueOf(0), "仮受金額");
        exDateEquals(siKykKihon.getLastsyosaihkymd(), BizDate.valueOf(20150918), "最終証券再発行日");
        exDateEquals(siKykKihon.getLastmeihenymd(), BizDate.valueOf(20150918), "最終名義変更日");
        exStringEquals(siKykKihon.getKossyoricd(), "kid2", "更新処理コード");
        exDateEquals(siKykKihon.getLastsbukthenymd(), BizDate.valueOf(20160101), "最終死亡受取人変更日");
        exStringEquals(siKykKihon.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykKihon.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siKykKihon.getGyoumuKousinTime(), "20150924000000", "業務用更新時間");
        exBizCalcbleEquals(siKykKihon.getHtykeihi(), BizCurrency.valueOf(11111), "必要経費");
        exBizCalcbleEquals(siKykKihon.getYenhtykeihi(), BizCurrency.valueOf(22222), "円換算必要経費");
        exBizCalcbleEquals(siKykKihon.getShrkykhtykeihi(),BizCurrency.valueOf(0), "支払時契約者必要経費");
        exClassificationEquals(siKykKihon.getNstkhkumu(), C_UmuKbn.NONE, "年金支払特約付加有無");
        exClassificationEquals(siKykKihon.getStdrsktkyhkumu(), C_UmuKbn.ARI, "被保険者代理特約付加有無");
        exClassificationEquals(siKykKihon.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(siKykKihon.getNkshrtkyknksyukkn(), 12, "年金支払特約年金期間");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn1(), C_TtdktyuuiKbn.TTDKTYUUOUTAITYUUI, "手続注意区分１");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn2(), C_TtdktyuuiKbn.KYKSYASOUSASYOUKAI, "手続注意区分２");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn3(), C_TtdktyuuiKbn.HASANOYOBITOUSAN, "手続注意区分３");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn4(), C_TtdktyuuiKbn.HOKENKEIYAKUSASIOSAE, "手続注意区分４");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn5(), C_TtdktyuuiKbn.KYKSYAYUKUEHUMEI, "手続注意区分５");
        exClassificationEquals(siKykKihon.getInitsbjiyensitihsytkhukaumu(), C_UmuKbn.NONE,
            "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(siKykKihon.getInitsbjiyenkasaiteihsygk(), BizCurrency.valueOf(0),
            "初期死亡時円換算最低保証額");
        exClassificationEquals(siKykKihon.getKykdrtkykhukaumu(), C_UmuKbn.ARI, "契約者代理特約付加有無");
        exClassificationEquals(siKykKihon.getKykdrknhatudoujyoutai(), C_KykdrknHtdjytKbn.SETTEI, "契約者代理権発動状態");
        exStringEquals(siKykKihon.getKykdairinmkj(), "契代名　一あ", "契約者代理人名（漢字）");
        exStringEquals(siKykKihon.getKykdairinmkn(), "ケイダイメイ　イチア", "契約者代理人名（カナ）");
        exClassificationEquals(siKykKihon.getKykdrnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "契約者代理人名漢字化不可区分");
        exStringEquals(siKykKihon.getKykdryno(), "0001111", "契約者代理人郵便番号");
        exStringEquals(siKykKihon.getKykdradr1kj(), "住所１", "契約者代理人住所１（漢字）");
        exStringEquals(siKykKihon.getKykdradr2kj(), "住所２", "契約者代理人住所２（漢字）");
        exStringEquals(siKykKihon.getKykdradr3kj(), "住所３", "契約者代理人住所３（漢字）");
        exDateEquals(siKykKihon.getKykdrseiymd(), BizDate.valueOf(19800101), "契約者代理人生年月日");
        exStringEquals(siKykKihon.getKykdrtelno(), "080-1111-1111", "契約者代理人電話番号");
        exClassificationEquals(siKykKihon.getSdpdkbn(), C_Sdpd.SD, "Ｓ建Ｐ建区分");
        exClassificationEquals(siKykKihon.getTikiktbrisyuruikbn(), C_TkiktbrisyuruiKbn.NONE, "定期一括払種類区分");

        exNumericEquals(siKykKihon.getSiKykSyouhns().size(), 1, "件数");
        JT_SiKykSyouhn siKykSyouhn = siKykKihon.getSiKykSyouhns().get(0);
        exStringEquals(siKykSyouhn.getSyono(), "11810111130", "証券番号");
        exClassificationEquals(siKykSyouhn.getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(siKykSyouhn.getSyouhncd(), "M910", "商品コード");
        exClassificationEquals(siKykSyouhn.getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exNumericEquals(siKykSyouhn.getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(siKykSyouhn.getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(siKykSyouhn.getSyouhnnm(), "外貨建て一時払終身保険（即時保障型）１", "商品名");
        exStringEquals(siKykSyouhn.getSyouhnnmgm(), "外貨建て一時払終身保険（即時保障型）２", "商品名（画面用）");
        exStringEquals(siKykSyouhn.getSyouhnnmtyhy(), "外貨建て一時払終身保険（即時保障型）３", "商品名（帳票用）");
        exClassificationEquals(siKykSyouhn.getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(siKykSyouhn.getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(siKykSyouhn.getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(siKykSyouhn.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(siKykSyouhn.getYuukoukikanfrom(), BizDate.valueOf(20150708), "有効期間（自）");
        exDateEquals(siKykSyouhn.getYuukoukikanto(), BizDate.valueOf(20150712), "有効期間（至");
        exDateEquals(siKykSyouhn.getKykymd(), BizDate.valueOf(20150709), "契約日");
        exDateEquals(siKykSyouhn.getYendthnkymd(), BizDate.valueOf(20160712), "円建変更日");
        exDateEquals(siKykSyouhn.getSknnkaisiymd(), BizDate.valueOf(20150710), "責任開始日");
        exDateEquals(siKykSyouhn.getGansknnkaisiymd(), null, "がん責任開始日");
        exDateEquals(siKykSyouhn.getHkgansknnkaisiymd(), null, "復活がん責任開始日");
        exNumericEquals(siKykSyouhn.getKykage(), 4, "加入年齢");
        exClassificationEquals(siKykSyouhn.getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHknkkn(), 1, "保険期間");
        exDateEquals(siKykSyouhn.getHknkknmanryouymd(), BizDate.valueOf(20150712), "保険期間満了日");
        exClassificationEquals(siKykSyouhn.getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHrkkkn(), 2, "払込期間");
        exDateEquals(siKykSyouhn.getHrkkknmnryymd(), BizDate.valueOf(20150711), "払込期間満了日");
        exBizCalcbleEquals(siKykSyouhn.getHokenryou(), BizCurrency.valueOf(200), "保険料");
        exClassificationEquals(siKykSyouhn.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exClassificationEquals(siKykSyouhn.getKihonsntgkumu(), C_UmuKbn.ARI, "基本Ｓ日額有無");
        exBizCalcbleEquals(siKykSyouhn.getKihons(), BizCurrency.valueOf(10), "基本Ｓ");
        exClassificationEquals(siKykSyouhn.getKatakbn(), C_KataKbn.GKYUFGK_10, "型区分");
        exClassificationEquals(siKykSyouhn.getTkjyhyouten(), C_Tkjyhyouten.HYOUTEN100, "特条標点");
        exBizCalcbleEquals(siKykSyouhn.getTkjyp(), BizCurrency.valueOf(60), "特条保険料");
        exClassificationEquals(siKykSyouhn.getTkjyskgnkkn(), C_Tkjyskgnkkn.BLNK, "特条削減期間");
        exStringEquals(siKykSyouhn.getHtnpbuicd1(), "1", "不担保部位コード１");
        exClassificationEquals(siKykSyouhn.getHtnpkkn1(), C_Htnpkkn.ONE, "不担保期間１");
        exStringEquals(siKykSyouhn.getHtnpbuicd2(), "2", "不担保部位コード２");
        exClassificationEquals(siKykSyouhn.getHtnpkkn2(), C_Htnpkkn.TOW, "不担保期間２");
        exStringEquals(siKykSyouhn.getHtnpbuicd3(), "3", "不担保部位コード３");
        exClassificationEquals(siKykSyouhn.getHtnpkkn3(), C_Htnpkkn.THREE, "不担保期間３");
        exStringEquals(siKykSyouhn.getHtnpbuicd4(), "4", "不担保部位コード４");
        exClassificationEquals(siKykSyouhn.getHtnpkkn4(), C_Htnpkkn.FOUR, "不担保期間４");
        exClassificationEquals(siKykSyouhn.getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "特定高度障害不担保区分");
        exStringEquals(siKykSyouhn.getKossyoricd(), "khhukkatu", "更新処理コード");
        exStringEquals(siKykSyouhn.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykSyouhn.getGyoumuKousinsyaId(), "", "業務用更新者ＩＤ");
        exStringEquals(siKykSyouhn.getGyoumuKousinTime(), "", "業務用更新時間");
        exStringEquals(siKykSyouhn.getRyouritusdno(), "", "料率世代番号");
        exBizCalcbleEquals(siKykSyouhn.getYoteiriritu(), BizNumber.valueOf(0), "予定利率");
        exNumericEquals(siKykSyouhn.getHhknnen(), 4, "被保険者年齢");
        exClassificationEquals(siKykSyouhn.getHhknsei(), C_Hhknsei.BLNK, "被保険者性別");
        exBizCalcbleEquals(siKykSyouhn.getKyksjkkktyouseiriritu(), BizNumber.valueOf(0), "契約時市場価格調整用利率");
        exBizCalcbleEquals(siKykSyouhn.getTumitateriritu(), BizNumber.valueOf(0), "積立利率");
        exDateEquals(siKykSyouhn.getTmttknitenymd(), BizDate.valueOf(20170712), "積立金移転日");
        exNumericEquals(siKykSyouhn.getDai1hknkkn(), 1, "第１保険期間");

        exNumericEquals(siKykKihon.getSiUkts().size(), 0, "件数");

        JT_SiKykKihon siKykKihon1 = keiyakuInfoSyutoku.getKykKihons().get(1);
        exStringEquals(siKykKihon1.getSyono(), "11810111163", "証券番号");
        exStringEquals(siKykKihon1.getAitesyono(), "11810111163", "相手証券番号");
        exClassificationEquals(siKykKihon1.getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(siKykKihon1.getHrkkeiro(), C_Hrkkeiro.CREDIT, "払込経路");
        exClassificationEquals(siKykKihon1.getSntkhoukbn(), C_SntkhouKbn.KKT, "選択方法区分");
        exDateEquals(siKykKihon1.getMosymd(), BizDate.valueOf(20150924), "申込日");
        exDateEquals(siKykKihon1.getKktymd(), BizDate.valueOf(20150924), "告知日");
        exClassificationEquals(siKykKihon1.getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(siKykKihon1.getKykjyoutai(), C_Kykjyoutai.ENTYOU, "契約状態");
        exDateYMEquals(siKykKihon1.getNexthrkym(), null, "次回払込年月");
        exDateEquals(siKykKihon1.getYykknmnryymd(), null, "猶予期間満了日");
        exBizCalcbleEquals(siKykKihon1.getKeip(), BizCurrency.valueOf(50), "合計保険料");
        exDateEquals(siKykKihon1.getSykyknyhenkouymd(), null, "最終契約内容変更日");
        exDateEquals(siKykKihon1.getLasthkhenkouymd(), null, "最終払方変更日");
        exClassificationEquals(siKykKihon1.getSyoumetujiyuu(), C_Syoumetujiyuu.CLGOFF, "消滅事由");
        exDateEquals(siKykKihon1.getSyoumetuymd(), BizDate.valueOf(20150707), "消滅日");
        exDateEquals(siKykKihon1.getHrketykouryokuhasseiymd(), null, "払済延長効力発生日");
        exClassificationEquals(siKykKihon1.getStknsetkbn(), C_StknsetKbn.ARI, "質権設定区分");
        exClassificationEquals(siKykKihon1.getAplkahikbn(), C_Aplkahi.BLNK, "ＡＰＬ可否区分");
        exNumericEquals(siKykKihon1.getSbuktnin(), 20, "死亡受取人人数");
        exClassificationEquals(siKykKihon1.getSaihoum(), C_Saihoum.BLNK, "再保有無");
        exDateEquals(siKykKihon1.getHksknnkaisiymd(), BizDate.valueOf(20150708), "復活責任開始日");
        exDateEquals(siKykKihon1.getGnkykfksknnkaisiymd(), null, "原契約復旧責任開始日");
        exNumericEquals(siKykKihon1.getJidouupdatekahi(), 0, "自動更新可否");
        exBizCalcbleEquals(siKykKihon1.getJidouupdategop(), BizCurrency.valueOf(0), "自動更新後保険料");
        exClassificationEquals(siKykKihon1.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exStringEquals(siKykKihon1.getHhkntodouhukencd(), "", "被保険者都道府県コード");
        exClassificationEquals(siKykKihon1.getTratkityuiumu(), C_UmuKbn.NONE, "取扱注意有無");
        exStringEquals(siKykKihon1.getTratkityuiuny(), "", "取扱注意内容");
        exStringEquals(siKykKihon1.getKyknmkn(), "", "契約者名（カナ）");
        exStringEquals(siKykKihon1.getKyknmkj(), "", "契約者名（漢字）");
        exClassificationEquals(siKykKihon1.getKyksei(), C_Kyksei.BLNK, "契約者性別");
        exDateEquals(siKykKihon1.getKykseiymd(), null, "契約者生年月日");
        exStringEquals(siKykKihon1.getKykyno(), "", "契約者郵便番号");
        exClassificationEquals(siKykKihon1.getKkkyktdk(), C_Tdk.BLNK, "契約管理契約者続柄");
        exStringEquals(siKykKihon1.getTsinyno(), "", "通信先郵便番号");
        exStringEquals(siKykKihon1.getTsinadr1kn(), "", "通信先住所１（カナ）");
        exStringEquals(siKykKihon1.getTsinadr2kn(), "", "通信先住所２（カナ）");
        exStringEquals(siKykKihon1.getTsinadr3kn(), "", "通信先住所３（カナ）");
        exStringEquals(siKykKihon1.getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(siKykKihon1.getTsinadr2kj(), "", "通信先住所２（漢字）");
        exStringEquals(siKykKihon1.getTsinadr3kj(), "", "通信先住所３（漢字）");
        exStringEquals(siKykKihon1.getTsintelno(), "", "通信先電話番号");
        exStringEquals(siKykKihon1.getHhknnmkn(), "カナレ", "被保険者名（カナ）");
        exStringEquals(siKykKihon1.getHhknnmkj(), "被保険漢字", "被保険者名（漢字）");
        exClassificationEquals(siKykKihon1.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(siKykKihon1.getHhknseiymd(), BizDate.valueOf(20150919), "被保険者生年月日");
        exStringEquals(siKykKihon1.getHhknyno(), "1160230", "被保険者郵便番号");
        exStringEquals(siKykKihon1.getHhknadr1kn(), "カカカカカ１", "被保険者住所１（カナ）");
        exStringEquals(siKykKihon1.getHhknadr2kn(), "カカカカカ２", "被保険者住所２（カナ）");
        exStringEquals(siKykKihon1.getHhknadr3kn(), "カカカカカ３", "被保険者住所３（カナ）");
        exStringEquals(siKykKihon1.getHhknadr1kj(), "漢字一", "被保険者住所１（漢字）");
        exStringEquals(siKykKihon1.getHhknadr2kj(), "漢字二", "被保険者住所２（漢字）");
        exStringEquals(siKykKihon1.getHhknadr3kj(), "漢字三", "被保険者住所３（漢字）");
        exStringEquals(siKykKihon1.getHhkntelno(), "010-1234-5678", "被保険者電話番号");
        exStringEquals(siKykKihon1.getSiteidruktnmkn(), "", "指定代理受取人名（カナ）");
        exStringEquals(siKykKihon1.getSiteidruktnmkj(), "", "指定代理受取人名（漢字）");
        exClassificationEquals(siKykKihon1.getSiteidrukttdk(), C_Tdk.BLNK, "指定代理受取人続柄");
        exStringEquals(siKykKihon1.getKzmeiginmkn(), "", "口座名義人氏名（カナ）");
        exClassificationEquals(siKykKihon1.getShrhousiteikbn(), C_ShrhousiteiKbn.BLNK, "支払方法指定区分");
        exStringEquals(siKykKihon1.getBankcd(), "", "銀行コード");
        exStringEquals(siKykKihon1.getSitencd(), "", "支店コード");
        exClassificationEquals(siKykKihon1.getYokinkbn(), C_YokinKbn.BLNK, "預金種目区分");
        exStringEquals(siKykKihon1.getKouzano(), "", "口座番号");
        exStringEquals(siKykKihon1.getDrtencd(), "", "代理店コード");
        exStringEquals(siKykKihon1.getOyadrtencd(), "", "親代理店コード");
        exStringEquals(siKykKihon1.getDrtenkanrisosikicd(), "", "代理店管理組織コード");
        exStringEquals(siKykKihon1.getBosyuucd(), "", "募集人コード");
        exNumericEquals(siKykKihon1.getKykhnkkaisuu(), 1, "契約者変更回数");
        exBizCalcbleEquals(siKykKihon1.getMisyuup(), BizCurrency.valueOf(0), "未収保険料");
        exDateYMEquals(siKykKihon1.getMisyuupjyuutouym(), null, "未収保険料充当年月");
        exNumericEquals(siKykKihon1.getMisyuupjytkaisuu(), 0, "未収保険料充当回数");
        exBizCalcbleEquals(siKykKihon1.getMikeikap(), BizCurrency.valueOf(0), "未経過保険料");
        exDateYMEquals(siKykKihon1.getMikeikapjyuutouym(), null, "未経過保険料充当年月");
        exNumericEquals(siKykKihon1.getMikeikapjytkaisuu(), 0, "未経過保険料充当回数");
        exBizCalcbleEquals(siKykKihon1.getKrkgk(), BizCurrency.valueOf(0), "仮受金額");
        exDateEquals(siKykKihon1.getLastsyosaihkymd(), BizDate.valueOf(20150918), "最終証券再発行日");
        exDateEquals(siKykKihon1.getLastmeihenymd(), BizDate.valueOf(20150918), "最終名義変更日");
        exStringEquals(siKykKihon1.getKossyoricd(), "kid2", "更新処理コード");
        exDateEquals(siKykKihon1.getLastsbukthenymd(), BizDate.valueOf(20160101), "最終死亡受取人変更日");
        exStringEquals(siKykKihon1.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykKihon1.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siKykKihon1.getGyoumuKousinTime(), "20150924000000", "業務用更新時間");
        exBizCalcbleEquals(siKykKihon1.getHtykeihi(), BizCurrency.valueOf(11111), "必要経費");
        exBizCalcbleEquals(siKykKihon1.getYenhtykeihi(), BizCurrency.valueOf(22222), "円換算必要経費");
        exBizCalcbleEquals(siKykKihon1.getShrkykhtykeihi(),BizCurrency.valueOf(0), "支払時契約者必要経費");
        exClassificationEquals(siKykKihon1.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exClassificationEquals(siKykKihon1.getStdrsktkyhkumu(), C_UmuKbn.ARI, "被保険者代理特約付加有無");
        exClassificationEquals(siKykKihon1.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(siKykKihon1.getNkshrtkyknksyukkn(), 12, "年金支払特約年金期間");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn1(), C_TtdktyuuiKbn.TTDKTYUUOUTAITYUUI, "手続注意区分１");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn2(), C_TtdktyuuiKbn.KYKSYASOUSASYOUKAI, "手続注意区分２");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn3(), C_TtdktyuuiKbn.HASANOYOBITOUSAN, "手続注意区分３");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn4(), C_TtdktyuuiKbn.HOKENKEIYAKUSASIOSAE, "手続注意区分４");
        exClassificationEquals(siKykKihon1.getTtdktyuuikbn5(), C_TtdktyuuiKbn.KYKSYAYUKUEHUMEI, "手続注意区分５");
        exClassificationEquals(siKykKihon1.getInitsbjiyensitihsytkhukaumu(), C_UmuKbn.NONE,
            "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(siKykKihon1.getInitsbjiyenkasaiteihsygk(), BizCurrency.valueOf(0),
            "初期死亡時円換算最低保証額");
        exClassificationEquals(siKykKihon.getKykdrtkykhukaumu(), C_UmuKbn.ARI, "契約者代理特約付加有無");
        exClassificationEquals(siKykKihon.getKykdrknhatudoujyoutai(), C_KykdrknHtdjytKbn.SETTEI, "契約者代理権発動状態");
        exStringEquals(siKykKihon.getKykdairinmkj(), "契代名　一あ", "契約者代理人名（漢字）");
        exStringEquals(siKykKihon.getKykdairinmkn(), "ケイダイメイ　イチア", "契約者代理人名（カナ）");
        exClassificationEquals(siKykKihon.getKykdrnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "契約者代理人名漢字化不可区分");
        exStringEquals(siKykKihon.getKykdryno(), "0001111", "契約者代理人郵便番号");
        exStringEquals(siKykKihon.getKykdradr1kj(), "住所１", "契約者代理人住所１（漢字）");
        exStringEquals(siKykKihon.getKykdradr2kj(), "住所２", "契約者代理人住所２（漢字）");
        exStringEquals(siKykKihon.getKykdradr3kj(), "住所３", "契約者代理人住所３（漢字）");
        exDateEquals(siKykKihon.getKykdrseiymd(), BizDate.valueOf(19800101), "契約者代理人生年月日");
        exStringEquals(siKykKihon.getKykdrtelno(), "080-1111-1111", "契約者代理人電話番号");
        exClassificationEquals(siKykKihon.getSdpdkbn(), C_Sdpd.SD, "Ｓ建Ｐ建区分");
        exClassificationEquals(siKykKihon.getTikiktbrisyuruikbn(), C_TkiktbrisyuruiKbn.NONE, "定期一括払種類区分");

        exNumericEquals(siKykKihon1.getSiKykSyouhns().size(), 1, "件数");
        JT_SiKykSyouhn siKykSyouhn1 = siKykKihon1.getSiKykSyouhns().get(0);
        exStringEquals(siKykSyouhn1.getSyono(), "11810111163", "証券番号");
        exClassificationEquals(siKykSyouhn1.getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(siKykSyouhn1.getSyouhncd(), "M910", "商品コード");
        exClassificationEquals(siKykSyouhn1.getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exNumericEquals(siKykSyouhn1.getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(siKykSyouhn1.getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(siKykSyouhn1.getSyouhnnm(), "外貨建て一時払終身保険（即時保障型）１", "商品名");
        exStringEquals(siKykSyouhn1.getSyouhnnmgm(), "外貨建て一時払終身保険（即時保障型）２", "商品名（画面用）");
        exStringEquals(siKykSyouhn1.getSyouhnnmtyhy(), "外貨建て一時払終身保険（即時保障型）３", "商品名（帳票用）");
        exClassificationEquals(siKykSyouhn1.getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(siKykSyouhn1.getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(siKykSyouhn1.getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(siKykSyouhn1.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(siKykSyouhn1.getYuukoukikanfrom(), BizDate.valueOf(20150708), "有効期間（自）");
        exDateEquals(siKykSyouhn1.getYuukoukikanto(), BizDate.valueOf(20150712), "有効期間（至");
        exDateEquals(siKykSyouhn1.getKykymd(), BizDate.valueOf(20150709), "契約日");
        exDateEquals(siKykSyouhn1.getYendthnkymd(), BizDate.valueOf(20160713), "円建変更日");
        exDateEquals(siKykSyouhn1.getSknnkaisiymd(), BizDate.valueOf(20150710), "責任開始日");
        exDateEquals(siKykSyouhn1.getGansknnkaisiymd(), null, "がん責任開始日");
        exDateEquals(siKykSyouhn1.getHkgansknnkaisiymd(), null, "復活がん責任開始日");
        exNumericEquals(siKykSyouhn1.getKykage(), 4, "加入年齢");
        exClassificationEquals(siKykSyouhn1.getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(siKykSyouhn1.getHknkkn(), 1, "保険期間");
        exDateEquals(siKykSyouhn1.getHknkknmanryouymd(), BizDate.valueOf(20150712), "保険期間満了日");
        exClassificationEquals(siKykSyouhn1.getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(siKykSyouhn1.getHrkkkn(), 2, "払込期間");
        exDateEquals(siKykSyouhn1.getHrkkknmnryymd(), BizDate.valueOf(20150711), "払込期間満了日");
        exBizCalcbleEquals(siKykSyouhn1.getHokenryou(), BizCurrency.valueOf(200), "保険料");
        exClassificationEquals(siKykSyouhn1.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exClassificationEquals(siKykSyouhn1.getKihonsntgkumu(), C_UmuKbn.ARI, "基本Ｓ日額有無");
        exBizCalcbleEquals(siKykSyouhn1.getKihons(), BizCurrency.valueOf(10), "基本Ｓ");
        exClassificationEquals(siKykSyouhn1.getKatakbn(), C_KataKbn.GKYUFGK_10, "型区分");
        exClassificationEquals(siKykSyouhn1.getTkjyhyouten(), C_Tkjyhyouten.BLNK, "特条標点");
        exBizCalcbleEquals(siKykSyouhn1.getTkjyp(), BizCurrency.valueOf(0), "特条保険料");
        exClassificationEquals(siKykSyouhn1.getTkjyskgnkkn(), C_Tkjyskgnkkn.BLNK, "特条削減期間");
        exStringEquals(siKykSyouhn1.getHtnpbuicd1(), "", "不担保部位コード１");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn1(), C_Htnpkkn.BLNK, "不担保期間１");
        exStringEquals(siKykSyouhn1.getHtnpbuicd2(), "", "不担保部位コード２");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn2(), C_Htnpkkn.BLNK, "不担保期間２");
        exStringEquals(siKykSyouhn1.getHtnpbuicd3(), "", "不担保部位コード３");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn3(), C_Htnpkkn.BLNK, "不担保期間３");
        exStringEquals(siKykSyouhn1.getHtnpbuicd4(), "", "不担保部位コード４");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn4(), C_Htnpkkn.BLNK, "不担保期間４");
        exClassificationEquals(siKykSyouhn1.getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.BLNK, "特定高度障害不担保区分");
        exStringEquals(siKykSyouhn1.getKossyoricd(), "khhukkatu", "更新処理コード");
        exStringEquals(siKykSyouhn1.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykSyouhn1.getGyoumuKousinsyaId(), "", "業務用更新者ＩＤ");
        exStringEquals(siKykSyouhn1.getGyoumuKousinTime(), "", "業務用更新時間");
        exStringEquals(siKykSyouhn1.getRyouritusdno(), "", "料率世代番号");
        exBizCalcbleEquals(siKykSyouhn1.getYoteiriritu(), BizNumber.valueOf(0), "予定利率");
        exNumericEquals(siKykSyouhn1.getHhknnen(), 4, "被保険者年齢");
        exClassificationEquals(siKykSyouhn1.getHhknsei(), C_Hhknsei.BLNK, "被保険者性別");
        exBizCalcbleEquals(siKykSyouhn1.getKyksjkkktyouseiriritu(), BizNumber.valueOf(0), "契約時市場価格調整用利率");
        exBizCalcbleEquals(siKykSyouhn1.getTumitateriritu(), BizNumber.valueOf(0), "積立利率");
        exDateEquals(siKykSyouhn1.getTmttknitenymd(), BizDate.valueOf(20170713), "積立金移転日");
        exNumericEquals(siKykSyouhn.getDai1hknkkn(), 1, "第１保険期間");

        exNumericEquals(siKykKihon1.getSiUkts().size(), 0, "件数");

        assertNull(keiyakuInfoSyutoku.getKykKihons().get(2));
        assertNull(keiyakuInfoSyutoku.getKykKihons().get(3));

    }

    @Test
    @Transactional
    @TestOrder(40)
    public void testGetInfos_A4() {
        MockObjectManager.initialize();
        KeisanHtyKeihiMockForSiharai.SYORIPTN = KeisanHtyKeihiMockForSiharai.TESTPATTERN1;
        GetKhKykdrInfoMockForSiharai.SYORIPTN = GetKhKykdrInfoMockForSiharai.TESTPATTERN2;

        KeiyakuPrm keiyakuPrm = SWAKInjector.getInstance(KeiyakuPrm.class);
        keiyakuPrm.setSyono("11810111141");
        keiyakuPrm.setINayoseyh(C_NayoseYouhi.HUYOU);

        keiyakuInfoSyutoku.getInfos(keiyakuPrm);
        exNumericEquals(keiyakuInfoSyutoku.getKykKihons().size(), 1, "件数");
        JT_SiKykKihon siKykKihon = keiyakuInfoSyutoku.getKykKihons().get(0);
        exStringEquals(siKykKihon.getSyono(), "11810111141", "証券番号");
        exStringEquals(siKykKihon.getAitesyono(), "11810111141", "相手証券番号");
        exClassificationEquals(siKykKihon.getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(siKykKihon.getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exClassificationEquals(siKykKihon.getSntkhoukbn(), C_SntkhouKbn.KKT, "選択方法区分");
        exDateEquals(siKykKihon.getMosymd(), BizDate.valueOf(20150924), "申込日");
        exDateEquals(siKykKihon.getKktymd(), BizDate.valueOf(20150924), "告知日");
        exClassificationEquals(siKykKihon.getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(siKykKihon.getKykjyoutai(), C_Kykjyoutai.ENTYOU, "契約状態");
        exDateYMEquals(siKykKihon.getNexthrkym(), BizDateYM.valueOf(201403), "次回払込年月");
        exDateEquals(siKykKihon.getYykknmnryymd(), null, "猶予期間満了日");
        exBizCalcbleEquals(siKykKihon.getKeip(), BizCurrency.valueOf(50), "合計保険料");
        exDateEquals(siKykKihon.getSykyknyhenkouymd(), BizDate.valueOf(20150201), "最終契約内容変更日");
        exDateEquals(siKykKihon.getLasthkhenkouymd(), null, "最終払方変更日");
        exClassificationEquals(siKykKihon.getSyoumetujiyuu(), C_Syoumetujiyuu.CLGOFF, "消滅事由");
        exDateEquals(siKykKihon.getSyoumetuymd(), BizDate.valueOf(20150707), "消滅日");
        exDateEquals(siKykKihon.getHrketykouryokuhasseiymd(), null, "払済延長効力発生日");
        exClassificationEquals(siKykKihon.getStknsetkbn(), C_StknsetKbn.ARI, "質権設定区分");
        exClassificationEquals(siKykKihon.getAplkahikbn(), C_Aplkahi.BLNK, "ＡＰＬ可否区分");
        exNumericEquals(siKykKihon.getSbuktnin(), 20, "死亡受取人人数");
        exClassificationEquals(siKykKihon.getSaihoum(), C_Saihoum.BLNK, "再保有無");
        exDateEquals(siKykKihon.getHksknnkaisiymd(), BizDate.valueOf(20150708), "復活責任開始日");
        exDateEquals(siKykKihon.getGnkykfksknnkaisiymd(), null, "原契約復旧責任開始日");
        exNumericEquals(siKykKihon.getJidouupdatekahi(), 0, "自動更新可否");
        exBizCalcbleEquals(siKykKihon.getJidouupdategop(), BizCurrency.valueOf(0), "自動更新後保険料");
        exClassificationEquals(siKykKihon.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exStringEquals(siKykKihon.getHhkntodouhukencd(), "", "被保険者都道府県コード");
        exClassificationEquals(siKykKihon.getTratkityuiumu(), C_UmuKbn.NONE, "取扱注意有無");
        exStringEquals(siKykKihon.getTratkityuiuny(), "", "取扱注意内容");
        exStringEquals(siKykKihon.getKyknmkn(), "カナ", "契約者名（カナ）");
        exStringEquals(siKykKihon.getKyknmkj(), "契約者名", "契約者名（漢字）");
        exClassificationEquals(siKykKihon.getKyksei(), C_Kyksei.MALE, "契約者性別");
        exDateEquals(siKykKihon.getKykseiymd(), BizDate.valueOf(20150924), "契約者生年月日");
        exStringEquals(siKykKihon.getKykyno(), "", "契約者郵便番号");
        exClassificationEquals(siKykKihon.getKkkyktdk(), C_Tdk.HGU, "契約管理契約者続柄");
        exStringEquals(siKykKihon.getTsinyno(), "0100411", "通信先郵便番号");
        exStringEquals(siKykKihon.getTsinadr1kn(), "", "通信先住所１（カナ）");
        exStringEquals(siKykKihon.getTsinadr2kn(), "", "通信先住所２（カナ）");
        exStringEquals(siKykKihon.getTsinadr3kn(), "", "通信先住所３（カナ）");
        exStringEquals(siKykKihon.getTsinadr1kj(), "通信先住所漢字一", "通信先住所１（漢字）");
        exStringEquals(siKykKihon.getTsinadr2kj(), "通信先住所漢字二", "通信先住所２（漢字）");
        exStringEquals(siKykKihon.getTsinadr3kj(), "通信先住所漢字三", "通信先住所３（漢字）");
        exStringEquals(siKykKihon.getTsintelno(), "010-0411-1111", "通信先電話番号");
        exStringEquals(siKykKihon.getHhknnmkn(), "カナレ", "被保険者名（カナ）");
        exStringEquals(siKykKihon.getHhknnmkj(), "被保険漢字", "被保険者名（漢字）");
        exClassificationEquals(siKykKihon.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(siKykKihon.getHhknseiymd(), BizDate.valueOf(20150919), "被保険者生年月日");
        exStringEquals(siKykKihon.getHhknyno(), "1160230", "被保険者郵便番号");
        exStringEquals(siKykKihon.getHhknadr1kn(), "カカカカカ１", "被保険者住所１（カナ）");
        exStringEquals(siKykKihon.getHhknadr2kn(), "カカカカカ２", "被保険者住所２（カナ）");
        exStringEquals(siKykKihon.getHhknadr3kn(), "カカカカカ３", "被保険者住所３（カナ）");
        exStringEquals(siKykKihon.getHhknadr1kj(), "漢字一", "被保険者住所１（漢字）");
        exStringEquals(siKykKihon.getHhknadr2kj(), "漢字二", "被保険者住所２（漢字）");
        exStringEquals(siKykKihon.getHhknadr3kj(), "漢字三", "被保険者住所３（漢字）");
        exStringEquals(siKykKihon.getHhkntelno(), "010-1234-5678", "被保険者電話番号");
        exStringEquals(siKykKihon.getSiteidruktnmkn(), "カナオウ", "指定代理受取人名（カナ）");
        exStringEquals(siKykKihon.getSiteidruktnmkj(), "受取人名漢字", "指定代理受取人名（漢字）");
        exClassificationEquals(siKykKihon.getSiteidrukttdk(), C_Tdk.HTSZN, "指定代理受取人続柄");
        exStringEquals(siKykKihon.getKzmeiginmkn(), "カナエブ", "口座名義人氏名（カナ）");
        exClassificationEquals(siKykKihon.getShrhousiteikbn(), C_ShrhousiteiKbn.BLNK, "支払方法指定区分");
        exStringEquals(siKykKihon.getBankcd(), "9900", "銀行コード");
        exStringEquals(siKykKihon.getSitencd(), "110", "支店コード");
        exClassificationEquals(siKykKihon.getYokinkbn(), C_YokinKbn.BETUDAN, "預金種目区分");
        exStringEquals(siKykKihon.getKouzano(), "1000001", "口座番号");
        exStringEquals(siKykKihon.getDrtencd(), "1000001", "代理店コード");
        exStringEquals(siKykKihon.getOyadrtencd(), "4040001", "親代理店コード");
        exStringEquals(siKykKihon.getDrtenkanrisosikicd(), "4440001", "代理店管理組織コード");
        exStringEquals(siKykKihon.getBosyuucd(), "100001", "募集人コード");
        exDateEquals(siKykKihon.getZennouryosyuymd(), BizDate.valueOf("20181104"), "前納領収日");
        exNumericEquals(siKykKihon.getKykhnkkaisuu(), 1, "契約者変更回数");
        exBizCalcbleEquals(siKykKihon.getMisyuup(), BizCurrency.valueOf(0), "未収保険料");
        exDateYMEquals(siKykKihon.getMisyuupjyuutouym(), null, "未収保険料充当年月");
        exNumericEquals(siKykKihon.getMisyuupjytkaisuu(), 0, "未収保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getMikeikap(), BizCurrency.valueOf(0), "未経過保険料");
        exDateYMEquals(siKykKihon.getMikeikapjyuutouym(), null, "未経過保険料充当年月");
        exNumericEquals(siKykKihon.getMikeikapjytkaisuu(), 0, "未経過保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getKrkgk(), BizCurrency.valueOf(0), "仮受金額");
        exDateEquals(siKykKihon.getLastsyosaihkymd(), BizDate.valueOf(20150918), "最終証券再発行日");
        exDateEquals(siKykKihon.getLastmeihenymd(), BizDate.valueOf(20150918), "最終名義変更日");
        exStringEquals(siKykKihon.getKossyoricd(), "kid2", "更新処理コード");
        exDateEquals(siKykKihon.getLastsbukthenymd(), BizDate.valueOf(20160101), "最終死亡受取人変更日");
        exStringEquals(siKykKihon.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykKihon.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siKykKihon.getGyoumuKousinTime(), "20150924000000", "業務用更新時間");
        exBizCalcbleEquals(siKykKihon.getHtykeihi(), BizCurrency.valueOf(11111), "必要経費");
        exBizCalcbleEquals(siKykKihon.getYenhtykeihi(), BizCurrency.valueOf(22222), "円換算必要経費");
        exBizCalcbleEquals(siKykKihon.getShrkykhtykeihi(),BizCurrency.valueOf(0), "支払時契約者必要経費");
        exClassificationEquals(siKykKihon.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exClassificationEquals(siKykKihon.getStdrsktkyhkumu(), C_UmuKbn.ARI, "被保険者代理特約付加有無");
        exClassificationEquals(siKykKihon.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(siKykKihon.getNkshrtkyknksyukkn(), 12, "年金支払特約年金期間");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn1(), C_TtdktyuuiKbn.TTDKTYUUOUTAITYUUI, "手続注意区分１");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn2(), C_TtdktyuuiKbn.KYKSYASOUSASYOUKAI, "手続注意区分２");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn3(), C_TtdktyuuiKbn.HASANOYOBITOUSAN, "手続注意区分３");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn4(), C_TtdktyuuiKbn.HOKENKEIYAKUSASIOSAE, "手続注意区分４");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn5(), C_TtdktyuuiKbn.KYKSYAYUKUEHUMEI, "手続注意区分５");
        exClassificationEquals(siKykKihon.getInitsbjiyensitihsytkhukaumu(), C_UmuKbn.NONE,
            "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(siKykKihon.getInitsbjiyenkasaiteihsygk(), BizCurrency.valueOf(0),
            "初期死亡時円換算最低保証額");
        exClassificationEquals(siKykKihon.getKykdrtkykhukaumu(), C_UmuKbn.ARI, "契約者代理特約付加有無");
        exClassificationEquals(siKykKihon.getKykdrknhatudoujyoutai(), C_KykdrknHtdjytKbn.SETTEI, "契約者代理権発動状態");
        exStringEquals(siKykKihon.getKykdairinmkj(), "契代名　一あ", "契約者代理人名（漢字）");
        exStringEquals(siKykKihon.getKykdairinmkn(), "ケイダイメイ　イチア", "契約者代理人名（カナ）");
        exClassificationEquals(siKykKihon.getKykdrnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "契約者代理人名漢字化不可区分");
        exStringEquals(siKykKihon.getKykdryno(), "0001111", "契約者代理人郵便番号");
        exStringEquals(siKykKihon.getKykdradr1kj(), "住所１", "契約者代理人住所１（漢字）");
        exStringEquals(siKykKihon.getKykdradr2kj(), "住所２", "契約者代理人住所２（漢字）");
        exStringEquals(siKykKihon.getKykdradr3kj(), "住所３", "契約者代理人住所３（漢字）");
        exDateEquals(siKykKihon.getKykdrseiymd(), BizDate.valueOf(19800101), "契約者代理人生年月日");
        exStringEquals(siKykKihon.getKykdrtelno(), "080-1111-1111", "契約者代理人電話番号");
        exClassificationEquals(siKykKihon.getSdpdkbn(), C_Sdpd.SD, "Ｓ建Ｐ建区分");
        exClassificationEquals(siKykKihon.getTikiktbrisyuruikbn(), C_TkiktbrisyuruiKbn.NONE, "定期一括払種類区分");

        exNumericEquals(siKykKihon.getSiKykSyouhns().size(), 1, "件数");
        JT_SiKykSyouhn siKykSyouhn = siKykKihon.getSiKykSyouhns().get(0);
        exStringEquals(siKykSyouhn.getSyono(), "11810111141", "証券番号");
        exClassificationEquals(siKykSyouhn.getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(siKykSyouhn.getSyouhncd(), "M910", "商品コード");
        exClassificationEquals(siKykSyouhn.getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exNumericEquals(siKykSyouhn.getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(siKykSyouhn.getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(siKykSyouhn.getSyouhnnm(), "外貨建て一時払終身保険（即時保障型）１", "商品名");
        exStringEquals(siKykSyouhn.getSyouhnnmgm(), "外貨建て一時払終身保険（即時保障型）２", "商品名（画面用）");
        exStringEquals(siKykSyouhn.getSyouhnnmtyhy(), "外貨建て一時払終身保険（即時保障型）３", "商品名（帳票用）");
        exClassificationEquals(siKykSyouhn.getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(siKykSyouhn.getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(siKykSyouhn.getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(siKykSyouhn.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(siKykSyouhn.getYuukoukikanfrom(), BizDate.valueOf(20150708), "有効期間（自）");
        exDateEquals(siKykSyouhn.getYuukoukikanto(), BizDate.valueOf(20150712), "有効期間（至");
        exDateEquals(siKykSyouhn.getKykymd(), BizDate.valueOf(20150709), "契約日");
        exDateEquals(siKykSyouhn.getYendthnkymd(), BizDate.valueOf(20160714), "円建変更日");
        exDateEquals(siKykSyouhn.getSknnkaisiymd(), BizDate.valueOf(20150710), "責任開始日");
        exDateEquals(siKykSyouhn.getGansknnkaisiymd(), null, "がん責任開始日");
        exDateEquals(siKykSyouhn.getHkgansknnkaisiymd(), null, "復活がん責任開始日");
        exNumericEquals(siKykSyouhn.getKykage(), 4, "加入年齢");
        exClassificationEquals(siKykSyouhn.getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHknkkn(), 1, "保険期間");
        exDateEquals(siKykSyouhn.getHknkknmanryouymd(), BizDate.valueOf(20150712), "保険期間満了日");
        exClassificationEquals(siKykSyouhn.getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHrkkkn(), 2, "払込期間");
        exDateEquals(siKykSyouhn.getHrkkknmnryymd(), BizDate.valueOf(20150711), "払込期間満了日");
        exBizCalcbleEquals(siKykSyouhn.getHokenryou(), BizCurrency.valueOf(200), "保険料");
        exClassificationEquals(siKykSyouhn.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exClassificationEquals(siKykSyouhn.getKihonsntgkumu(), C_UmuKbn.ARI, "基本Ｓ日額有無");
        exBizCalcbleEquals(siKykSyouhn.getKihons(), BizCurrency.valueOf(10), "基本Ｓ");
        exClassificationEquals(siKykSyouhn.getKatakbn(), C_KataKbn.GKYUFGK_10, "型区分");
        exClassificationEquals(siKykSyouhn.getTkjyhyouten(), C_Tkjyhyouten.HYOUTEN100, "特条標点");
        exBizCalcbleEquals(siKykSyouhn.getTkjyp(), BizCurrency.valueOf(60), "特条保険料");
        exClassificationEquals(siKykSyouhn.getTkjyskgnkkn(), C_Tkjyskgnkkn.Y1, "特条削減期間");
        exStringEquals(siKykSyouhn.getHtnpbuicd1(), "1", "不担保部位コード１");
        exClassificationEquals(siKykSyouhn.getHtnpkkn1(), C_Htnpkkn.ONE, "不担保期間１");
        exStringEquals(siKykSyouhn.getHtnpbuicd2(), "2", "不担保部位コード２");
        exClassificationEquals(siKykSyouhn.getHtnpkkn2(), C_Htnpkkn.TOW, "不担保期間２");
        exStringEquals(siKykSyouhn.getHtnpbuicd3(), "3", "不担保部位コード３");
        exClassificationEquals(siKykSyouhn.getHtnpkkn3(), C_Htnpkkn.THREE, "不担保期間３");
        exStringEquals(siKykSyouhn.getHtnpbuicd4(), "4", "不担保部位コード４");
        exClassificationEquals(siKykSyouhn.getHtnpkkn4(), C_Htnpkkn.FOUR, "不担保期間４");
        exClassificationEquals(siKykSyouhn.getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "特定高度障害不担保区分");
        exStringEquals(siKykSyouhn.getKossyoricd(), "khhukkatu", "更新処理コード");
        exStringEquals(siKykSyouhn.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykSyouhn.getGyoumuKousinsyaId(), "", "業務用更新者ＩＤ");
        exStringEquals(siKykSyouhn.getGyoumuKousinTime(), "", "業務用更新時間");
        exStringEquals(siKykSyouhn.getRyouritusdno(), "", "料率世代番号");
        exBizCalcbleEquals(siKykSyouhn.getYoteiriritu(), BizNumber.valueOf(0), "予定利率");
        exNumericEquals(siKykSyouhn.getHhknnen(), 4, "被保険者年齢");
        exClassificationEquals(siKykSyouhn.getHhknsei(), C_Hhknsei.BLNK, "被保険者性別");
        exBizCalcbleEquals(siKykSyouhn.getKyksjkkktyouseiriritu(), BizNumber.valueOf(0), "契約時市場価格調整用利率");
        exBizCalcbleEquals(siKykSyouhn.getTumitateriritu(), BizNumber.valueOf(0), "積立利率");
        exDateEquals(siKykSyouhn.getTmttknitenymd(), null, "積立金移転日");
        exNumericEquals(siKykSyouhn.getDai1hknkkn(), 1, "第１保険期間");

        exNumericEquals(siKykKihon.getSiUkts().size(), 1, "件数");
        JT_SiUkt siUkt = siKykKihon.getSiUkts().get(0);
        exStringEquals(siUkt.getSyono(), "11810111141", "証券番号");
        exClassificationEquals(siUkt.getHkuktsyu(), C_Hkuktsyu.KDSGHKUKT, "給付金受取人種類区分");
        exNumericEquals(siUkt.getUktsyurenno(), 1, "受取人種類別連番");
        exStringEquals(siUkt.getUktnmkn(), "カナレ", "受取人名（カナ）");
        exStringEquals(siUkt.getUktnmkj(), "被保険漢字", "受取人名（漢字）");
        exDateEquals(siUkt.getUktseiymd(), BizDate.valueOf(20150919), "受取人生年月日");
        exClassificationEquals(siUkt.getUkttdk(), C_Tdk.HONNIN, "受取人続柄");
        exClassificationEquals(siUkt.getUktkbn(), C_UktKbn.HHKN, "受取人区分");
        exBizCalcbleEquals(siUkt.getUktbnwari(), BizNumber.valueOf(100), "受取人分割割合");
        exStringEquals(siUkt.getKossyoricd(), "kid3", "更新処理コード");
        exStringEquals(siUkt.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siUkt.getGyoumuKousinsyaId(), "kid4", "業務用更新者ＩＤ");
        exStringEquals(siUkt.getGyoumuKousinTime(), "", "業務用更新時間");

    }

    @Test
    @Transactional
    @TestOrder(50)
    public void testGetInfos_A5() {
        MockObjectManager.initialize();
        KeisanHtyKeihiMockForSiharai.SYORIPTN = KeisanHtyKeihiMockForSiharai.TESTPATTERN1;
        GetKhKykdrInfoMockForSiharai.SYORIPTN = GetKhKykdrInfoMockForSiharai.TESTPATTERN2;

        KeiyakuPrm keiyakuPrm = SWAKInjector.getInstance(KeiyakuPrm.class);
        keiyakuPrm.setSyono("11810111174");
        keiyakuPrm.setINayoseyh(C_NayoseYouhi.HUYOU);

        keiyakuInfoSyutoku.getInfos(keiyakuPrm);
        exNumericEquals(keiyakuInfoSyutoku.getKykKihons().size(), 1, "件数");
        JT_SiKykKihon siKykKihon = keiyakuInfoSyutoku.getKykKihons().get(0);
        exStringEquals(siKykKihon.getSyono(), "11810111174", "証券番号");
        exStringEquals(siKykKihon.getAitesyono(), "11810111174", "相手証券番号");
        exClassificationEquals(siKykKihon.getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(siKykKihon.getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exClassificationEquals(siKykKihon.getSntkhoukbn(), C_SntkhouKbn.KKT, "選択方法区分");
        exDateEquals(siKykKihon.getMosymd(), BizDate.valueOf(20150924), "申込日");
        exDateEquals(siKykKihon.getKktymd(), BizDate.valueOf(20150924), "告知日");
        exClassificationEquals(siKykKihon.getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(siKykKihon.getKykjyoutai(), C_Kykjyoutai.ENTYOU, "契約状態");
        exDateYMEquals(siKykKihon.getNexthrkym(), BizDateYM.valueOf(201403), "次回払込年月");
        exDateEquals(siKykKihon.getYykknmnryymd(), null, "猶予期間満了日");
        exBizCalcbleEquals(siKykKihon.getKeip(), BizCurrency.valueOf(50), "合計保険料");
        exDateEquals(siKykKihon.getSykyknyhenkouymd(), BizDate.valueOf(20150201), "最終契約内容変更日");
        exDateEquals(siKykKihon.getLasthkhenkouymd(), null, "最終払方変更日");
        exClassificationEquals(siKykKihon.getSyoumetujiyuu(), C_Syoumetujiyuu.CLGOFF, "消滅事由");
        exDateEquals(siKykKihon.getSyoumetuymd(), BizDate.valueOf(20150707), "消滅日");
        exDateEquals(siKykKihon.getHrketykouryokuhasseiymd(), null, "払済延長効力発生日");
        exClassificationEquals(siKykKihon.getStknsetkbn(), C_StknsetKbn.ARI, "質権設定区分");
        exClassificationEquals(siKykKihon.getAplkahikbn(), C_Aplkahi.BLNK, "ＡＰＬ可否区分");
        exNumericEquals(siKykKihon.getSbuktnin(), 20, "死亡受取人人数");
        exClassificationEquals(siKykKihon.getSaihoum(), C_Saihoum.BLNK, "再保有無");
        exDateEquals(siKykKihon.getHksknnkaisiymd(), BizDate.valueOf(20150708), "復活責任開始日");
        exDateEquals(siKykKihon.getGnkykfksknnkaisiymd(), null, "原契約復旧責任開始日");
        exNumericEquals(siKykKihon.getJidouupdatekahi(), 0, "自動更新可否");
        exBizCalcbleEquals(siKykKihon.getJidouupdategop(), BizCurrency.valueOf(0), "自動更新後保険料");
        exClassificationEquals(siKykKihon.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exStringEquals(siKykKihon.getHhkntodouhukencd(), "", "被保険者都道府県コード");
        exClassificationEquals(siKykKihon.getTratkityuiumu(), C_UmuKbn.NONE, "取扱注意有無");
        exStringEquals(siKykKihon.getTratkityuiuny(), "", "取扱注意内容");
        exStringEquals(siKykKihon.getKyknmkn(), "カナ", "契約者名（カナ）");
        exStringEquals(siKykKihon.getKyknmkj(), "契約者名", "契約者名（漢字）");
        exClassificationEquals(siKykKihon.getKyksei(), C_Kyksei.MALE, "契約者性別");
        exDateEquals(siKykKihon.getKykseiymd(), BizDate.valueOf(19700101), "契約者生年月日");
        exStringEquals(siKykKihon.getKykyno(), "", "契約者郵便番号");
        exClassificationEquals(siKykKihon.getKkkyktdk(), C_Tdk.HGU, "契約管理契約者続柄");
        exStringEquals(siKykKihon.getTsinyno(), "0100411", "通信先郵便番号");
        exStringEquals(siKykKihon.getTsinadr1kn(), "", "通信先住所１（カナ）");
        exStringEquals(siKykKihon.getTsinadr2kn(), "", "通信先住所２（カナ）");
        exStringEquals(siKykKihon.getTsinadr3kn(), "", "通信先住所３（カナ）");
        exStringEquals(siKykKihon.getTsinadr1kj(), "通信先住所漢字一", "通信先住所１（漢字）");
        exStringEquals(siKykKihon.getTsinadr2kj(), "通信先住所漢字二", "通信先住所２（漢字）");
        exStringEquals(siKykKihon.getTsinadr3kj(), "通信先住所漢字三", "通信先住所３（漢字）");
        exStringEquals(siKykKihon.getTsintelno(), "010-0411-1111", "通信先電話番号");
        exStringEquals(siKykKihon.getHhknnmkn(), "カナレ", "被保険者名（カナ）");
        exStringEquals(siKykKihon.getHhknnmkj(), "被保険漢字", "被保険者名（漢字）");
        exClassificationEquals(siKykKihon.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(siKykKihon.getHhknseiymd(), BizDate.valueOf(20150919), "被保険者生年月日");
        exStringEquals(siKykKihon.getHhknyno(), "1160230", "被保険者郵便番号");
        exStringEquals(siKykKihon.getHhknadr1kn(), "カカカカカ１", "被保険者住所１（カナ）");
        exStringEquals(siKykKihon.getHhknadr2kn(), "カカカカカ２", "被保険者住所２（カナ）");
        exStringEquals(siKykKihon.getHhknadr3kn(), "カカカカカ３", "被保険者住所３（カナ）");
        exStringEquals(siKykKihon.getHhknadr1kj(), "漢字一", "被保険者住所１（漢字）");
        exStringEquals(siKykKihon.getHhknadr2kj(), "漢字二", "被保険者住所２（漢字）");
        exStringEquals(siKykKihon.getHhknadr3kj(), "漢字三", "被保険者住所３（漢字）");
        exStringEquals(siKykKihon.getHhkntelno(), "010-1234-5678", "被保険者電話番号");
        exStringEquals(siKykKihon.getSiteidruktnmkn(), "カカカカ", "指定代理受取人名（カナ）");
        exStringEquals(siKykKihon.getSiteidruktnmkj(), "受取人名", "指定代理受取人名（漢字）");
        exClassificationEquals(siKykKihon.getSiteidrukttdk(), C_Tdk.HTSZN, "指定代理受取人続柄");
        exStringEquals(siKykKihon.getKzmeiginmkn(), "カナエブ", "口座名義人氏名（カナ）");
        exClassificationEquals(siKykKihon.getShrhousiteikbn(), C_ShrhousiteiKbn.BLNK, "支払方法指定区分");
        exStringEquals(siKykKihon.getBankcd(), "9900", "銀行コード");
        exStringEquals(siKykKihon.getSitencd(), "110", "支店コード");
        exClassificationEquals(siKykKihon.getYokinkbn(), C_YokinKbn.BETUDAN, "預金種目区分");
        exStringEquals(siKykKihon.getKouzano(), "1000001", "口座番号");
        exStringEquals(siKykKihon.getDrtencd(), "1000001", "代理店コード");
        exStringEquals(siKykKihon.getOyadrtencd(), "7070001", "親代理店コード");
        exStringEquals(siKykKihon.getDrtenkanrisosikicd(), "7770001", "代理店管理組織コード");
        exStringEquals(siKykKihon.getBosyuucd(), "100001", "募集人コード");
        exNumericEquals(siKykKihon.getKykhnkkaisuu(), 1, "契約者変更回数");
        exBizCalcbleEquals(siKykKihon.getMisyuup(), BizCurrency.valueOf(0), "未収保険料");
        exDateYMEquals(siKykKihon.getMisyuupjyuutouym(), null, "未収保険料充当年月");
        exNumericEquals(siKykKihon.getMisyuupjytkaisuu(), 0, "未収保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getMikeikap(), BizCurrency.valueOf(0), "未経過保険料");
        exDateYMEquals(siKykKihon.getMikeikapjyuutouym(), null, "未経過保険料充当年月");
        exNumericEquals(siKykKihon.getMikeikapjytkaisuu(), 0, "未経過保険料充当回数");
        exBizCalcbleEquals(siKykKihon.getKrkgk(), BizCurrency.valueOf(0), "仮受金額");
        exDateEquals(siKykKihon.getLastsyosaihkymd(), BizDate.valueOf(20150918), "最終証券再発行日");
        exDateEquals(siKykKihon.getLastmeihenymd(), BizDate.valueOf(20150918), "最終名義変更日");
        exStringEquals(siKykKihon.getKossyoricd(), "kid2", "更新処理コード");
        exDateEquals(siKykKihon.getLastsbukthenymd(), BizDate.valueOf(20160101), "最終死亡受取人変更日");
        exStringEquals(siKykKihon.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykKihon.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siKykKihon.getGyoumuKousinTime(), "20150924000000", "業務用更新時間");
        exBizCalcbleEquals(siKykKihon.getHtykeihi(), BizCurrency.valueOf(11111), "必要経費");
        exBizCalcbleEquals(siKykKihon.getYenhtykeihi(), BizCurrency.valueOf(22222), "円換算必要経費");
        exBizCalcbleEquals(siKykKihon.getShrkykhtykeihi(),BizCurrency.valueOf(12345678900.00), "支払時契約者必要経費");
        exClassificationEquals(siKykKihon.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exClassificationEquals(siKykKihon.getStdrsktkyhkumu(), C_UmuKbn.ARI, "被保険者代理特約付加有無");
        exClassificationEquals(siKykKihon.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(siKykKihon.getNkshrtkyknksyukkn(), 12, "年金支払特約年金期間");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn1(), C_TtdktyuuiKbn.TTDKTYUUOUTAITYUUI, "手続注意区分１");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn2(), C_TtdktyuuiKbn.KYKSYASOUSASYOUKAI, "手続注意区分２");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn3(), C_TtdktyuuiKbn.HASANOYOBITOUSAN, "手続注意区分３");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn4(), C_TtdktyuuiKbn.HOKENKEIYAKUSASIOSAE, "手続注意区分４");
        exClassificationEquals(siKykKihon.getTtdktyuuikbn5(), C_TtdktyuuiKbn.KYKSYAYUKUEHUMEI, "手続注意区分５");
        exClassificationEquals(siKykKihon.getInitsbjiyensitihsytkhukaumu(), C_UmuKbn.NONE,
            "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(siKykKihon.getInitsbjiyenkasaiteihsygk(), BizCurrency.valueOf(0),
            "初期死亡時円換算最低保証額");
        exClassificationEquals(siKykKihon.getKykdrtkykhukaumu(), C_UmuKbn.ARI, "契約者代理特約付加有無");
        exClassificationEquals(siKykKihon.getKykdrknhatudoujyoutai(), C_KykdrknHtdjytKbn.SETTEI, "契約者代理権発動状態");
        exStringEquals(siKykKihon.getKykdairinmkj(), "契代名　一あ", "契約者代理人名（漢字）");
        exStringEquals(siKykKihon.getKykdairinmkn(), "ケイダイメイ　イチア", "契約者代理人名（カナ）");
        exClassificationEquals(siKykKihon.getKykdrnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "契約者代理人名漢字化不可区分");
        exStringEquals(siKykKihon.getKykdryno(), "0001111", "契約者代理人郵便番号");
        exStringEquals(siKykKihon.getKykdradr1kj(), "住所１", "契約者代理人住所１（漢字）");
        exStringEquals(siKykKihon.getKykdradr2kj(), "住所２", "契約者代理人住所２（漢字）");
        exStringEquals(siKykKihon.getKykdradr3kj(), "住所３", "契約者代理人住所３（漢字）");
        exDateEquals(siKykKihon.getKykdrseiymd(), BizDate.valueOf(19800101), "契約者代理人生年月日");
        exStringEquals(siKykKihon.getKykdrtelno(), "080-1111-1111", "契約者代理人電話番号");
        exClassificationEquals(siKykKihon.getSdpdkbn(), C_Sdpd.SD, "Ｓ建Ｐ建区分");
        exClassificationEquals(siKykKihon.getTikiktbrisyuruikbn(), C_TkiktbrisyuruiKbn.NONE, "定期一括払種類区分");

        exNumericEquals(siKykKihon.getSiKykSyouhns().size(), 3, "件数");
        JT_SiKykSyouhn siKykSyouhn = siKykKihon.getSiKykSyouhns().get(0);
        exStringEquals(siKykSyouhn.getSyono(), "11810111174", "証券番号");
        exClassificationEquals(siKykSyouhn.getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(siKykSyouhn.getSyouhncd(), "M920", "商品コード");
        exClassificationEquals(siKykSyouhn.getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exNumericEquals(siKykSyouhn.getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(siKykSyouhn.getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(siKykSyouhn.getSyouhnnm(), "外貨建て一時払終身保険（即時保障型）１", "商品名");
        exStringEquals(siKykSyouhn.getSyouhnnmgm(), "外貨建て一時払終身保険（即時保障型）２", "商品名（画面用）");
        exStringEquals(siKykSyouhn.getSyouhnnmtyhy(), "外貨建て一時払終身保険（即時保障型）３", "商品名（帳票用）");
        exClassificationEquals(siKykSyouhn.getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(siKykSyouhn.getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(siKykSyouhn.getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(siKykSyouhn.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(siKykSyouhn.getYuukoukikanfrom(), BizDate.valueOf(20150708), "有効期間（自）");
        exDateEquals(siKykSyouhn.getYuukoukikanto(), BizDate.valueOf(20150712), "有効期間（至");
        exDateEquals(siKykSyouhn.getKykymd(), BizDate.valueOf(20150709), "契約日");
        exDateEquals(siKykSyouhn.getYendthnkymd(), BizDate.valueOf(20160715), "円建変更日");
        exDateEquals(siKykSyouhn.getSknnkaisiymd(), BizDate.valueOf(20150710), "責任開始日");
        exDateEquals(siKykSyouhn.getGansknnkaisiymd(), null, "がん責任開始日");
        exDateEquals(siKykSyouhn.getHkgansknnkaisiymd(), null, "復活がん責任開始日");
        exNumericEquals(siKykSyouhn.getKykage(), 4, "加入年齢");
        exClassificationEquals(siKykSyouhn.getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHknkkn(), 1, "保険期間");
        exDateEquals(siKykSyouhn.getHknkknmanryouymd(), BizDate.valueOf(20150712), "保険期間満了日");
        exClassificationEquals(siKykSyouhn.getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(siKykSyouhn.getHrkkkn(), 2, "払込期間");
        exDateEquals(siKykSyouhn.getHrkkknmnryymd(), BizDate.valueOf(20150711), "払込期間満了日");
        exBizCalcbleEquals(siKykSyouhn.getHokenryou(), BizCurrency.valueOf(200), "保険料");
        exClassificationEquals(siKykSyouhn.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exClassificationEquals(siKykSyouhn.getKihonsntgkumu(), C_UmuKbn.ARI, "基本Ｓ日額有無");
        exBizCalcbleEquals(siKykSyouhn.getKihons(), BizCurrency.valueOf(10), "基本Ｓ");
        exClassificationEquals(siKykSyouhn.getKatakbn(), C_KataKbn.GKYUFGK_10, "型区分");
        exClassificationEquals(siKykSyouhn.getTkjyhyouten(), C_Tkjyhyouten.BLNK, "特条標点");
        exBizCalcbleEquals(siKykSyouhn.getTkjyp(), BizCurrency.valueOf(0), "特条保険料");
        exClassificationEquals(siKykSyouhn.getTkjyskgnkkn(), C_Tkjyskgnkkn.BLNK, "特条削減期間");
        exStringEquals(siKykSyouhn.getHtnpbuicd1(), "", "不担保部位コード１");
        exClassificationEquals(siKykSyouhn.getHtnpkkn1(), C_Htnpkkn.BLNK, "不担保期間１");
        exStringEquals(siKykSyouhn.getHtnpbuicd2(), "", "不担保部位コード２");
        exClassificationEquals(siKykSyouhn.getHtnpkkn2(), C_Htnpkkn.BLNK, "不担保期間２");
        exStringEquals(siKykSyouhn.getHtnpbuicd3(), "", "不担保部位コード３");
        exClassificationEquals(siKykSyouhn.getHtnpkkn3(), C_Htnpkkn.BLNK, "不担保期間３");
        exStringEquals(siKykSyouhn.getHtnpbuicd4(), "", "不担保部位コード４");
        exClassificationEquals(siKykSyouhn.getHtnpkkn4(), C_Htnpkkn.BLNK, "不担保期間４");
        exClassificationEquals(siKykSyouhn.getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.BLNK, "特定高度障害不担保区分");
        exStringEquals(siKykSyouhn.getKossyoricd(), "khhukkatu", "更新処理コード");
        exStringEquals(siKykSyouhn.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykSyouhn.getGyoumuKousinsyaId(), "", "業務用更新者ＩＤ");
        exStringEquals(siKykSyouhn.getGyoumuKousinTime(), "", "業務用更新時間");
        exStringEquals(siKykSyouhn.getRyouritusdno(), "", "料率世代番号");
        exBizCalcbleEquals(siKykSyouhn.getYoteiriritu(), BizNumber.valueOf(0), "予定利率");
        exNumericEquals(siKykSyouhn.getHhknnen(), 4, "被保険者年齢");
        exClassificationEquals(siKykSyouhn.getHhknsei(), C_Hhknsei.BLNK, "被保険者性別");
        exBizCalcbleEquals(siKykSyouhn.getKyksjkkktyouseiriritu(), BizNumber.valueOf(0), "契約時市場価格調整用利率");
        exBizCalcbleEquals(siKykSyouhn.getTumitateriritu(), BizNumber.valueOf(0), "積立利率");
        exDateEquals(siKykSyouhn.getTmttknitenymd(), BizDate.valueOf(20170715), "積立金移転日");
        exNumericEquals(siKykSyouhn.getDai1hknkkn(), 1, "第１保険期間");

        JT_SiKykSyouhn siKykSyouhn1 = siKykKihon.getSiKykSyouhns().get(1);
        exStringEquals(siKykSyouhn1.getSyono(), "11810111174", "証券番号");
        exClassificationEquals(siKykSyouhn1.getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(siKykSyouhn1.getSyouhncd(), "M920", "商品コード");
        exClassificationEquals(siKykSyouhn1.getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exNumericEquals(siKykSyouhn1.getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(siKykSyouhn1.getKyksyouhnrenno(), 2, "契約商品連番");
        exStringEquals(siKykSyouhn1.getSyouhnnm(), "外貨建て一時払終身保険（即時保障型）１", "商品名");
        exStringEquals(siKykSyouhn1.getSyouhnnmgm(), "外貨建て一時払終身保険（即時保障型）２", "商品名（画面用）");
        exStringEquals(siKykSyouhn1.getSyouhnnmtyhy(), "外貨建て一時払終身保険（即時保障型）３", "商品名（帳票用）");
        exClassificationEquals(siKykSyouhn1.getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(siKykSyouhn1.getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(siKykSyouhn1.getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(siKykSyouhn1.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(siKykSyouhn1.getYuukoukikanfrom(), BizDate.valueOf(20150708), "有効期間（自）");
        exDateEquals(siKykSyouhn1.getYuukoukikanto(), BizDate.valueOf(20150712), "有効期間（至");
        exDateEquals(siKykSyouhn1.getKykymd(), BizDate.valueOf(20150709), "契約日");
        exDateEquals(siKykSyouhn1.getYendthnkymd(), BizDate.valueOf(20160716), "円建変更日");
        exDateEquals(siKykSyouhn1.getSknnkaisiymd(), BizDate.valueOf(20150710), "責任開始日");
        exDateEquals(siKykSyouhn1.getGansknnkaisiymd(), null, "がん責任開始日");
        exDateEquals(siKykSyouhn1.getHkgansknnkaisiymd(), null, "復活がん責任開始日");
        exNumericEquals(siKykSyouhn1.getKykage(), 8, "加入年齢");
        exClassificationEquals(siKykSyouhn1.getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(siKykSyouhn1.getHknkkn(), 5, "保険期間");
        exDateEquals(siKykSyouhn1.getHknkknmanryouymd(), BizDate.valueOf(20150712), "保険期間満了日");
        exClassificationEquals(siKykSyouhn1.getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(siKykSyouhn1.getHrkkkn(), 6, "払込期間");
        exDateEquals(siKykSyouhn1.getHrkkknmnryymd(), BizDate.valueOf(20150711), "払込期間満了日");
        exBizCalcbleEquals(siKykSyouhn1.getHokenryou(), BizCurrency.valueOf(200), "保険料");
        exClassificationEquals(siKykSyouhn1.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exClassificationEquals(siKykSyouhn1.getKihonsntgkumu(), C_UmuKbn.ARI, "基本Ｓ日額有無");
        exBizCalcbleEquals(siKykSyouhn1.getKihons(), BizCurrency.valueOf(20), "基本Ｓ");
        exClassificationEquals(siKykSyouhn1.getKatakbn(), C_KataKbn.GKYUFGK_10, "型区分");
        exClassificationEquals(siKykSyouhn1.getTkjyhyouten(), C_Tkjyhyouten.BLNK, "特条標点");
        exBizCalcbleEquals(siKykSyouhn1.getTkjyp(), BizCurrency.valueOf(0), "特条保険料");
        exClassificationEquals(siKykSyouhn1.getTkjyskgnkkn(), C_Tkjyskgnkkn.BLNK, "特条削減期間");
        exStringEquals(siKykSyouhn1.getHtnpbuicd1(), "", "不担保部位コード１");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn1(), C_Htnpkkn.BLNK, "不担保期間１");
        exStringEquals(siKykSyouhn1.getHtnpbuicd2(), "", "不担保部位コード２");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn2(), C_Htnpkkn.BLNK, "不担保期間２");
        exStringEquals(siKykSyouhn1.getHtnpbuicd3(), "", "不担保部位コード３");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn3(), C_Htnpkkn.BLNK, "不担保期間３");
        exStringEquals(siKykSyouhn1.getHtnpbuicd4(), "", "不担保部位コード４");
        exClassificationEquals(siKykSyouhn1.getHtnpkkn4(), C_Htnpkkn.BLNK, "不担保期間４");
        exClassificationEquals(siKykSyouhn1.getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.BLNK, "特定高度障害不担保区分");
        exStringEquals(siKykSyouhn1.getKossyoricd(), "khhukkatu", "更新処理コード");
        exStringEquals(siKykSyouhn1.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykSyouhn1.getGyoumuKousinsyaId(), "cdd", "業務用更新者ＩＤ");
        exStringEquals(siKykSyouhn1.getGyoumuKousinTime(), "20150912000000", "業務用更新時間");
        exStringEquals(siKykSyouhn1.getRyouritusdno(), "", "料率世代番号");
        exBizCalcbleEquals(siKykSyouhn1.getYoteiriritu(), BizNumber.valueOf(0), "予定利率");
        exNumericEquals(siKykSyouhn1.getHhknnen(), 8, "被保険者年齢");
        exClassificationEquals(siKykSyouhn1.getHhknsei(), C_Hhknsei.BLNK, "被保険者性別");
        exBizCalcbleEquals(siKykSyouhn1.getKyksjkkktyouseiriritu(), BizNumber.valueOf(0), "契約時市場価格調整用利率");
        exBizCalcbleEquals(siKykSyouhn1.getTumitateriritu(), BizNumber.valueOf(0), "積立利率");
        exDateEquals(siKykSyouhn1.getTmttknitenymd(), null, "積立金移転日");
        exNumericEquals(siKykSyouhn.getDai1hknkkn(), 1, "第１保険期間");

        JT_SiKykSyouhn siKykSyouhn2 = siKykKihon.getSiKykSyouhns().get(2);
        exStringEquals(siKykSyouhn2.getSyono(), "11810111174", "証券番号");
        exClassificationEquals(siKykSyouhn2.getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(siKykSyouhn2.getSyouhncd(), "M920", "商品コード");
        exClassificationEquals(siKykSyouhn2.getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exNumericEquals(siKykSyouhn2.getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(siKykSyouhn2.getKyksyouhnrenno(), 3, "契約商品連番");
        exStringEquals(siKykSyouhn2.getSyouhnnm(), "外貨建て一時払終身保険（即時保障型）１", "商品名");
        exStringEquals(siKykSyouhn2.getSyouhnnmgm(), "外貨建て一時払終身保険（即時保障型）２", "商品名（画面用）");
        exStringEquals(siKykSyouhn2.getSyouhnnmtyhy(), "外貨建て一時払終身保険（即時保障型）３", "商品名（帳票用）");
        exClassificationEquals(siKykSyouhn2.getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(siKykSyouhn2.getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(siKykSyouhn2.getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(siKykSyouhn2.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(siKykSyouhn2.getYuukoukikanfrom(), BizDate.valueOf(20150708), "有効期間（自）");
        exDateEquals(siKykSyouhn2.getYuukoukikanto(), BizDate.valueOf(20150712), "有効期間（至");
        exDateEquals(siKykSyouhn2.getKykymd(), BizDate.valueOf(20150709), "契約日");
        exDateEquals(siKykSyouhn2.getYendthnkymd(), BizDate.valueOf(20160717), "円建変更日");
        exDateEquals(siKykSyouhn2.getSknnkaisiymd(), BizDate.valueOf(20150710), "責任開始日");
        exDateEquals(siKykSyouhn2.getGansknnkaisiymd(), null, "がん責任開始日");
        exDateEquals(siKykSyouhn2.getHkgansknnkaisiymd(), null, "復活がん責任開始日");
        exNumericEquals(siKykSyouhn2.getKykage(), 12, "加入年齢");
        exClassificationEquals(siKykSyouhn2.getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(siKykSyouhn2.getHknkkn(), 9, "保険期間");
        exDateEquals(siKykSyouhn2.getHknkknmanryouymd(), BizDate.valueOf(20150712), "保険期間満了日");
        exClassificationEquals(siKykSyouhn2.getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(siKykSyouhn2.getHrkkkn(), 10, "払込期間");
        exDateEquals(siKykSyouhn2.getHrkkknmnryymd(), BizDate.valueOf(20150711), "払込期間満了日");
        exBizCalcbleEquals(siKykSyouhn2.getHokenryou(), BizCurrency.valueOf(200), "保険料");
        exClassificationEquals(siKykSyouhn2.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exClassificationEquals(siKykSyouhn2.getKihonsntgkumu(), C_UmuKbn.ARI, "基本Ｓ日額有無");
        exBizCalcbleEquals(siKykSyouhn2.getKihons(), BizCurrency.valueOf(30), "基本Ｓ");
        exClassificationEquals(siKykSyouhn2.getKatakbn(), C_KataKbn.GKYUFGK_10, "型区分");
        exClassificationEquals(siKykSyouhn2.getTkjyhyouten(), C_Tkjyhyouten.BLNK, "特条標点");
        exBizCalcbleEquals(siKykSyouhn2.getTkjyp(), BizCurrency.valueOf(0), "特条保険料");
        exClassificationEquals(siKykSyouhn2.getTkjyskgnkkn(), C_Tkjyskgnkkn.BLNK, "特条削減期間");
        exStringEquals(siKykSyouhn2.getHtnpbuicd1(), "", "不担保部位コード１");
        exClassificationEquals(siKykSyouhn2.getHtnpkkn1(), C_Htnpkkn.BLNK, "不担保期間１");
        exStringEquals(siKykSyouhn2.getHtnpbuicd2(), "", "不担保部位コード２");
        exClassificationEquals(siKykSyouhn2.getHtnpkkn2(), C_Htnpkkn.BLNK, "不担保期間２");
        exStringEquals(siKykSyouhn2.getHtnpbuicd3(), "", "不担保部位コード３");
        exClassificationEquals(siKykSyouhn2.getHtnpkkn3(), C_Htnpkkn.BLNK, "不担保期間３");
        exStringEquals(siKykSyouhn2.getHtnpbuicd4(), "", "不担保部位コード４");
        exClassificationEquals(siKykSyouhn2.getHtnpkkn4(), C_Htnpkkn.BLNK, "不担保期間４");
        exClassificationEquals(siKykSyouhn2.getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.BLNK, "特定高度障害不担保区分");
        exStringEquals(siKykSyouhn2.getKossyoricd(), "khhukkatu", "更新処理コード");
        exStringEquals(siKykSyouhn2.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siKykSyouhn2.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siKykSyouhn2.getGyoumuKousinTime(), "20151212000000", "業務用更新時間");
        exStringEquals(siKykSyouhn2.getRyouritusdno(), "", "料率世代番号");
        exBizCalcbleEquals(siKykSyouhn2.getYoteiriritu(), BizNumber.valueOf(0), "予定利率");
        exNumericEquals(siKykSyouhn2.getHhknnen(), 12, "被保険者年齢");
        exClassificationEquals(siKykSyouhn2.getHhknsei(), C_Hhknsei.BLNK, "被保険者性別");
        exBizCalcbleEquals(siKykSyouhn2.getKyksjkkktyouseiriritu(), BizNumber.valueOf(0), "契約時市場価格調整用利率");
        exBizCalcbleEquals(siKykSyouhn2.getTumitateriritu(), BizNumber.valueOf(0), "積立利率");
        exDateEquals(siKykSyouhn2.getTmttknitenymd(), BizDate.valueOf(20170717), "積立金移転日");
        exNumericEquals(siKykSyouhn.getDai1hknkkn(), 1, "第１保険期間");

        exNumericEquals(siKykKihon.getSiUkts().size(), 1, "件数");
        JT_SiUkt siUkt1 = siKykKihon.getSiUkts().get(0);
        exStringEquals(siUkt1.getSyono(), "11810111174", "証券番号");
        exClassificationEquals(siUkt1.getHkuktsyu(), C_Hkuktsyu.SBHKKUKT, "給付金受取人種類区分");
        exNumericEquals(siUkt1.getUktsyurenno(), 2, "受取人種類別連番");
        exStringEquals(siUkt1.getUktnmkn(), "カナ", "受取人名（カナ）");
        exStringEquals(siUkt1.getUktnmkj(), "契約者名", "受取人名（漢字）");
        exDateEquals(siUkt1.getUktseiymd(), BizDate.valueOf(19700101), "受取人生年月日");
        exClassificationEquals(siUkt1.getUkttdk(), C_Tdk.HGU, "受取人続柄");
        exClassificationEquals(siUkt1.getUktkbn(), C_UktKbn.KYK, "受取人区分");
        exBizCalcbleEquals(siUkt1.getUktbnwari(), BizNumber.valueOf(50), "受取人分割割合");
        exStringEquals(siUkt1.getKossyoricd(), "khgengaku", "更新処理コード");
        exStringEquals(siUkt1.getKossyorisscd(), "", "更新処理詳細コード");
        exStringEquals(siUkt1.getGyoumuKousinsyaId(), "kid", "業務用更新者ＩＤ");
        exStringEquals(siUkt1.getGyoumuKousinTime(), "20150912000000", "業務用更新時間");

    }

    @Test
    @Transactional
    @TestOrder(60)
    public void testGetInfos_A6() {
        MockObjectManager.initialize();
        KeisanHtyKeihiMockForSiharai.SYORIPTN = KeisanHtyKeihiMockForSiharai.TESTPATTERN1;
        BetukutiKeiyakuInfoGetMockForSiharai.SYORIPTN = BetukutiKeiyakuInfoGetMockForSiharai.TESTPATTERN1;
        GetKhKykdrInfoMockForSiharai.SYORIPTN = GetKhKykdrInfoMockForSiharai.TESTPATTERN2;

        KeiyakuPrm keiyakuPrm = SWAKInjector.getInstance(KeiyakuPrm.class);
        keiyakuPrm.setSyono("99806001168");
        keiyakuPrm.setINayoseyh(C_NayoseYouhi.YOU);

        keiyakuInfoSyutoku.getInfos(keiyakuPrm);

        JT_SiKykKihon siKykKihon = keiyakuInfoSyutoku.getKykKihons().get(0);
        exClassificationEquals(siKykKihon.getKykdrtkykhukaumu(), C_UmuKbn.ARI, "契約者代理特約付加有無");
        exClassificationEquals(siKykKihon.getKykdrknhatudoujyoutai(), C_KykdrknHtdjytKbn.BLNK, "契約者代理権発動状態");
        exStringEquals(siKykKihon.getKykdairinmkj(), "契代名　一あ", "契約者代理人名（漢字）");
        exStringEquals(siKykKihon.getKykdairinmkn(), "ケイダイメイ　イチア", "契約者代理人名（カナ）");
        exClassificationEquals(siKykKihon.getKykdrnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "契約者代理人名漢字化不可区分");
        exStringEquals(siKykKihon.getKykdryno(), "0001111", "契約者代理人郵便番号");
        exStringEquals(siKykKihon.getKykdradr1kj(), "住所１", "契約者代理人住所１（漢字）");
        exStringEquals(siKykKihon.getKykdradr2kj(), "住所２", "契約者代理人住所２（漢字）");
        exStringEquals(siKykKihon.getKykdradr3kj(), "住所３", "契約者代理人住所３（漢字）");
        exDateEquals(siKykKihon.getKykdrseiymd(), BizDate.valueOf(19800101), "契約者代理人生年月日");
        exStringEquals(siKykKihon.getKykdrtelno(), "080-1111-1111", "契約者代理人電話番号");

    }

    @Test
    @Transactional
    @TestOrder(70)
    public void testGetInfos_A7() {
        MockObjectManager.initialize();
        KeisanHtyKeihiMockForSiharai.SYORIPTN = KeisanHtyKeihiMockForSiharai.TESTPATTERN1;
        BetukutiKeiyakuInfoGetMockForSiharai.SYORIPTN = BetukutiKeiyakuInfoGetMockForSiharai.TESTPATTERN1;
        GetKhKykdrInfoMockForSiharai.SYORIPTN = GetKhKykdrInfoMockForSiharai.TESTPATTERN2;

        KeiyakuPrm keiyakuPrm = SWAKInjector.getInstance(KeiyakuPrm.class);
        keiyakuPrm.setSyono("99806001216");
        keiyakuPrm.setINayoseyh(C_NayoseYouhi.YOU);

        keiyakuInfoSyutoku.getInfos(keiyakuPrm);

        JT_SiKykKihon siKykKihon = keiyakuInfoSyutoku.getKykKihons().get(0);

        exClassificationEquals(siKykKihon.getKykdrtkykhukaumu(), C_UmuKbn.NONE, "契約者代理特約付加有無");
        exClassificationEquals(siKykKihon.getKykdrknhatudoujyoutai(), C_KykdrknHtdjytKbn.BLNK, "契約者代理権発動状態");
        exStringEquals(siKykKihon.getKykdairinmkj(), "", "契約者代理人名（漢字）");
        exStringEquals(siKykKihon.getKykdairinmkn(), "", "契約者代理人名（カナ）");
        exClassificationEquals(siKykKihon.getKykdrnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者代理人名漢字化不可区分");
        exStringEquals(siKykKihon.getKykdryno(), "", "契約者代理人郵便番号");
        exStringEquals(siKykKihon.getKykdradr1kj(), "", "契約者代理人住所１（漢字）");
        exStringEquals(siKykKihon.getKykdradr2kj(), "", "契約者代理人住所２（漢字）");
        exStringEquals(siKykKihon.getKykdradr3kj(), "", "契約者代理人住所３（漢字）");
        exDateEquals(siKykKihon.getKykdrseiymd(),  null, "契約者代理人生年月日");
        exStringEquals(siKykKihon.getKykdrtelno(), "", "契約者代理人電話番号");

    }

    @Test(expected = BizAppException.class)
    @TestOrder(80)
    public void testGetInfos_B1() {
        try {

            KeiyakuPrm keiyakuPrm = SWAKInjector.getInstance(KeiyakuPrm.class);
            keiyakuPrm.setSyono("11810111392");
            keiyakuPrm.setINayoseyh(C_NayoseYouhi.HUYOU);

            keiyakuInfoSyutoku.getInfos(keiyakuPrm);
        } catch (BizAppException e) {
            exStringEquals(e.getMessage(), "テーブル取得エラー　IT_KykSyouhn　key:pSyono=11810111392", "エラーメッセージ");
            throw e;
        }

    }


}
