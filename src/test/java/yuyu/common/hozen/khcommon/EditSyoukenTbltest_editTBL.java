package yuyu.common.hozen.khcommon;

import static yuyu.testinfr.YuyuFunctionTestUtil.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.transaction.Transactional;

import jp.co.dgic.testing.common.virtualmock.MockObjectManager;
import jp.co.slcs.swak.core.classification.Classification;
import jp.co.slcs.swak.core.inject.SWAKInjector;
import jp.co.slcs.swak.date.BizDate;
import jp.co.slcs.swak.number.BizCurrency;
import jp.co.slcs.swak.number.BizNumber;
import jp.co.slcs.swak.number.currencytype.BizCurrencyTypes;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import yuyu.app.base.ref.TestDataMaker;
import yuyu.app.base.ref.TestDataMakerException;
import yuyu.common.base.BaseUserInfo;
import yuyu.common.biz.bzcommon.KeisanGaikakanzan;
import yuyu.common.biz.bzcommon.KeisanGaikakanzanMockForHozen;
import yuyu.common.biz.exception.CommonBizAppException;
import yuyu.common.siharai.sicommon.CalcJdkghkKngk;
import yuyu.common.siharai.sicommon.CalcJdkghkKngkMockForHozen;
import yuyu.def.biz.manager.BizDomManager;
import yuyu.def.classification.C_AisyoumeiKbn;
import yuyu.def.classification.C_Channelcd;
import yuyu.def.classification.C_HassouKbn;
import yuyu.def.classification.C_Hhknsei;
import yuyu.def.classification.C_HnskariyuuKbn;
import yuyu.def.classification.C_InsizeiShryouhiKbn;
import yuyu.def.classification.C_KjkhukaKbn;
import yuyu.def.classification.C_Seibetu;
import yuyu.def.classification.C_SinsaihkKbn;
import yuyu.def.classification.C_StdrsktkyhnkKbn;
import yuyu.def.classification.C_SyoriKbn;
import yuyu.def.classification.C_SyoukenUktKbn;
import yuyu.def.classification.C_SyoukenUktMidasiKbn;
import yuyu.def.classification.C_SyoukensaihkKbn;
import yuyu.def.classification.C_SyutkKbn;
import yuyu.def.classification.C_TantouCdKbn;
import yuyu.def.classification.C_TetudukisyuKbn;
import yuyu.def.classification.C_TokusyuSyoriNaiyouKbn;
import yuyu.def.classification.C_Tuukasyu;
import yuyu.def.classification.C_TyokusouhtkekKbn;
import yuyu.def.classification.C_UktsyuKbn;
import yuyu.def.classification.C_UmuKbn;
import yuyu.def.db.entity.BM_SyouhnZokusei;
import yuyu.def.db.entity.IT_AnsyuKihon;
import yuyu.def.db.entity.IT_HhknSya;
import yuyu.def.db.entity.IT_HokenSyouken;
import yuyu.def.db.entity.IT_HokenSyoukenHukaInfo;
import yuyu.def.db.entity.IT_KhTtdkTyuui;
import yuyu.def.db.entity.IT_KykDairiten;
import yuyu.def.db.entity.IT_KykKihon;
import yuyu.def.db.entity.IT_KykSonotaTkyk;
import yuyu.def.db.entity.IT_KykSya;
import yuyu.def.db.entity.IT_KykSyouhn;
import yuyu.def.db.entity.IT_KykUkt;
import yuyu.def.db.entity.IT_NyknJissekiRireki;
import yuyu.def.db.entity.IT_SyouhnTokujou;
import yuyu.def.db.entity.IT_Zennou;
import yuyu.def.hozen.manager.HozenDomManager;
import yuyu.testinfr.OrderedRunner;
import yuyu.testinfr.TestOrder;
import yuyu.testinfr.inject.MockModuleBinder;

import com.google.inject.AbstractModule;

/**
 * 保険証券TBL編集クラスのメソッド {@link EditSyoukenTbl#editTBL(KhozenCommonParam,IT_KykKihon,List,IT_KykSonotaTkyk,List,IT_SyouhnTokujou,IT_KykSya,IT_HhknSya,IT_KykUkt,IT_KykUkt,List,IT_KhTtdkTyuui,List,List,EditHokenSyoukenParam,BizDate,C_SinsaihkKbn,C_TetudukisyuKbn,C_HassouKbn)}テスト用クラスです<br />
 */
@RunWith(OrderedRunner.class)
public class EditSyoukenTbltest_editTBL {

    private final static String syoNo1 = "20806000019";

    private final static String syoNo2 = "20806000020";

    private final static String syoNo2_1 = "22806000011";

    private final static String syoNo2_2 = "22806000022";

    private final static String syoNo2_3 = "22806000033";

    private final static String syoNo2_4 = "22806000044";

    private final static String syoNo2_5 = "22806000055";

    private final static String syoNo2_6 = "22806000066";

    private final static String syoNo2_7 = "22806000077";

    private final static String syoNo2_8 = "22806000088";

    private final static String syoNo2_9 = "22806000099";

    private final static String syoNo2_10 = "22806000103";

    private final static String syoNo2_11 = "22806000114";

    private final static String syoNo2_12 = "22806000125";

    private final static String syoNo2_13 = "22806000136";

    private final static String syoNo2_14 = "22806000147";

    private final static String syoNo2_15 = "22806000158";

    private final static String syoNo2_16 = "22806000169";

    private final static String syoNo2_17 = "22806000170";

    private final static String syoNo2_18 = "22806000181";

    private final static String syoNo2_19 = "22806000192";

    private final static String syoNo3 = "20806000031";

    private final static String syoNo3_1 = "23806000012";

    private final static String syoNo3_2 = "23806000023";

    private final static String syoNo3_3 = "23806000034";

    private final static String syoNo3_4 = "23806000045";

    private final static String syoNo3_5 = "23806000056";

    private final static String syoNo3_6 = "23806000067";

    private final static String syoNo3_7 = "23806000078";

    private final static String syoNo3_8 = "23806000089";

    private final static String syoNo3_9 = "23806000090";

    private final static String syoNo3_10 = "23806000104";

    private final static String syoNo3_11 = "23806000115";

    private final static String syoNo3_12 = "23806000126";

    private final static String syoNo3_13 = "23806000137";

    private final static String syoNo3_14 = "23806000148";

    private final static String syoNo3_15 = "23806000159";

    private final static String syoNo3_16 = "23806000160";

    private final static String syoNo3_17 = "23806000171";

    private final static String syoNo3_18 = "23806000182";

    private final static String syoNo3_19 = "23806000193";

    private final static String syoNo3_20 = "23806000207";

    private final static String syoNo3_21 = "23806000218";

    private final static String syoNo3_22 = "23806000229";

    private final static String syoNo3_23 = "23806000230";

    private final static String syoNo3_24 = "23806000241";

    private final static String syoNo3_25 = "23806000252";

    private final static String syoNo3_26 = "23806000263";

    private final static String syoNo3_27 = "23806000274";

    private final static String syoNo3_28 = "23806000285";

    private final static String syoNo3_29 = "23806000296";

    private final static String syoNo3_30 = "23806000300";

    private final static String syoNo3_31 = "23806000311";

    private final static String syoNo3_32 = "23806000322";

    private final static String syoNo3_33 = "23806000333";

    private final static String syoNo3_34 = "23806000344";

    private final static String syoNo3_35 = "23806000355";

    private final static String syoNo4 = "20806000042";

    private final static String syoNo4_1 = "24806000013";

    private final static String syoNo4_2 = "24806000024";

    private final static String syoNo4_3 = "24806000035";

    private final static String syoNo4_4 = "24806000046";

    private final static String syoNo4_5 = "24806000057";

    private final static String syoNo4_6 = "24806000068";

    private final static String syoNo4_7 = "24806000079";

    private final static String syoNo4_8 = "24806000080";

    private final static String syoNo4_9 = "24806000091";

    private final static String syoNo4_10 = "24806000105";

    private final static String syoNo4_11 = "24806000116";

    private final static String syoNo4_12 = "24806000127";

    private final static String syoNo4_13 = "24806000138";

    private final static String syoNo4_14 = "24806000149";

    private final static String syoNo4_15 = "24806000150";

    private final static String syoNo4_16 = "24806000161";

    private final static String syoNo4_17 = "24806000172";

    private final static String syoNo4_18 = "24806000183";

    private final static String syoNo5 = "20806000053";

    private final static String syoNo6 = "20806000064";

    private final static String syoNo7 = "20806000075";

    private final static String syoNo8 = "20806000086";

    private final static String syoNo9 = "20806000097";

    private final static String syoNo10 = "20806000101";

    private final static String syoNo11 = "20806000112";

    private final static String syoNo12 = "20806000123";

    private final static String syoNo13 = "20806000134";

    private final static String syoNo14 = "20806000145";

    private final static String syoNo15 = "20806000156";

    private final static String syoNo16 = "20806000167";

    private final static String syoNo17 = "20806000178";

    private final static String syoNo18 = "20806000189";

    private final static String syoNo19 = "20806000190";

    private final static String syoNo20 = "20806000204";

    private final static String syoNo21 = "20806000215";

    private final static String syoNo22 = "20806000226";

    private final static String syoNo23 = "20806000237";

    private final static String syoNo24 = "20806000248";

    private final static String syoNo25 = "20806000259";

    private final static String syoNo26 = "20806000260";

    private final static String syoNo27 = "20806000271";

    private final static String syoNo28 = "99806019860";

    private final static String syoNo5_1 = "12806000018";

    private final static String syoNo5_2 = "12806000029";

    private final static String syoNo5_3 = "12806000030";

    private final static String syoNo6_1 = "60806050120";

    private final static String syoNo6_2 = "60806050131";

    private final static String syoNo6_3 = "60806050544";

    private final static String kbnKey1 = "01";

    private final static String kbnKey2 = "02";

    private final static String kbnKey3 = "03";

    private final static String kbnKey4 = "04";

    private final static String kbnKey5 = "05";

    private final static String kbnKey6 = "06";

    private final static String kbnKey7 = "07";

    private final static String kbnKey8 = "08";

    private final static String kbnKey9 = "09";

    private final static String kbnKey10 = "00";

    @Inject
    private EditSyoukenTbl editSyoukenTbl;

    @Inject
    private KhozenCommonParam khozenCommonParam;

    @Inject
    private EditHokenSyoukenParam editHokenSyoukenParam;

    @Inject
    private BaseUserInfo baseUserInfo;

    private final static String fileName = "UT-SP_単体テスト仕様書_保険証券TBL編集";

    private final static String sheetName = "INデータ";

    @Before
    public void before(){
        MockModuleBinder.bind(new AbstractModule(){
            @Override
            protected void configure() {
                bind(KeisanKijyungk.class).to(KeisanKijyungkMockForHozen.class);
                bind(KeisanGaikakanzan.class).to(KeisanGaikakanzanMockForHozen.class);
                bind(CalcJdkghkKngk.class).to(CalcJdkghkKngkMockForHozen.class);
                bind(EditSuiihyouTbl.class).to(EditSuiihyouTblMockForHozen.class);
                bind(EditSuiihyouTblNenkin.class).to(EditSuiihyouTblNenkinMockForHozen.class);
                bind(EditSyoukenTblNenkin.class).to(EditSyoukenTblNenkinMockForHozen.class);
                bind(EditSyoukenTblSyuusin.class).to(EditSyoukenTblSyuusinMockForHozen.class);
                bind(EditSyoukenTblNenkin2.class).to(EditSyoukenTblNenkin2MockForHozen.class);
                bind(EditSuiihyouTblNenkin2.class).to(EditSuiihyouTblNenkin2MockForHozen.class);
                bind(EditSyoukenTblSyuusin2.class).to(EditSyoukenTblSyuusin2MockForHozen.class);
                bind(EditSuiihyouTblSyuusin2.class).to(EditSuiihyouTblSyuusin2MockForHozen.class);
                bind(EditSuiihyouTblNenkin3.class).to(EditSuiihyouTblNenkin3MockForHozen.class);
                bind(EditSyoukenTblNenkin3.class).to(EditSyoukenTblNenkin3MockForHozen.class);
                bind(EditSyoukenTblSyuusin3.class).to(EditSyoukenTblSyuusin3MockForHozen.class);
                bind(EditSuiihyouTblSyuusin3.class).to(EditSuiihyouTblSyuusin3MockForHozen.class);
            }
        });
    }
    @BeforeClass
    public static void testInit() {
        KeisanKijyungkMockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        KeisanGaikakanzanMockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        CalcJdkghkKngkMockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSuiihyouTblMockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSuiihyouTblNenkinMockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSyoukenTblNenkinMockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSyoukenTblSyuusinMockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSyoukenTblNenkin2MockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSuiihyouTblNenkin2MockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSyoukenTblSyuusin2MockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSuiihyouTblSyuusin2MockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSuiihyouTblNenkin3MockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSyoukenTblNenkin3MockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSyoukenTblSyuusin3MockForHozen.caller = EditSyoukenTbltest_editTBL.class;
        EditSuiihyouTblSyuusin3MockForHozen.caller = EditSyoukenTbltest_editTBL.class;
    }

    @AfterClass
    public static void testClear() {
        KeisanKijyungkMockForHozen.caller = null;
        KeisanGaikakanzanMockForHozen.caller = null;
        CalcJdkghkKngkMockForHozen.caller = null;
        EditSuiihyouTblMockForHozen.caller = null;
        EditSyoukenTblNenkinMockForHozen.caller = null;
        EditSyoukenTblSyuusinMockForHozen.caller = null;
        EditSuiihyouTblNenkinMockForHozen.caller = null;
        EditSyoukenTblNenkinMockForHozen .caller = null;
        EditSyoukenTblNenkin2MockForHozen.caller = null;
        EditSuiihyouTblNenkin2MockForHozen.caller = null;
        EditSyoukenTblSyuusin2MockForHozen.caller = null;
        EditSuiihyouTblSyuusin2MockForHozen.caller = null;
        EditSuiihyouTblNenkin3MockForHozen.caller = null;
        EditSyoukenTblNenkin3MockForHozen.caller = null;
        EditSyoukenTblSyuusin3MockForHozen.caller = null;
        EditSuiihyouTblSyuusin3MockForHozen.caller = null;

        KeisanKijyungkMockForHozen.SYORIPTN = null;
        KeisanGaikakanzanMockForHozen.SYORIPTN = null;
        CalcJdkghkKngkMockForHozen.SYORIPTN = null;
        EditSuiihyouTblMockForHozen.SYORIPTN = null;
        EditSyoukenTblNenkinMockForHozen.SYORIPTN = null;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = null;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = null;
        EditSyoukenTblNenkinMockForHozen .SYORIPTN = null;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = null;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = null;
        EditSyoukenTblSyuusin2MockForHozen.SYORIPTN = null;
        EditSuiihyouTblSyuusin2MockForHozen.SYORIPTN = null;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = null;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = null;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = null;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = null;

        MockObjectManager.initialize();
    }
    @BeforeClass
    @Transactional
    public static void insertTestData() {
        try {
            TestDataMaker testDataMaker = new TestDataMaker();
            HashMap<String, Map<String, List<Map<String, String>>>> testDataAndTblMap;
            testDataAndTblMap = testDataMaker.getInData(EditSyoukenTbltest_editTBL.class, fileName, sheetName);
            testDataMaker.insDataByDataId("データ001", testDataAndTblMap);
        } catch (TestDataMakerException e) {
            e.printStackTrace();
        }
    }

    @AfterClass
    @Transactional
    public static void deleteTestData() {



        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);
        hozenDomManager.delete(hozenDomManager.getAllKykKihon());

        BizDomManager bizDomManager = SWAKInjector.getInstance(BizDomManager.class);
        bizDomManager.delete(bizDomManager.getAllSyouhnZokusei());
        bizDomManager.delete(bizDomManager.getAllDairiten());
        bizDomManager.delete(bizDomManager.getAllTantouCd());
    }


    @Test
    @TestOrder(10)
    public void testEditTBL_A1() {

        IT_KykKihon kykKihon = new IT_KykKihon();


        List<IT_KykSyouhn> syuKykSyouhnLst = null;

        IT_KykSonotaTkyk kykSonotaTkyk = new IT_KykSonotaTkyk();


        List<IT_KykSyouhn> tkKykSyouhnLst = new ArrayList<>();


        IT_SyouhnTokujou syouhnTokujou = new IT_SyouhnTokujou();

        IT_KykSya kykSya = new IT_KykSya();

        IT_HhknSya hhknSya = new IT_HhknSya();


        IT_KykUkt sibouHenkan = new IT_KykUkt();



        IT_KykUkt siteiDairi = new IT_KykUkt();



        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = new IT_KhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = new ArrayList<>();



        List<IT_NyknJissekiRireki> nyknJissekiRireki = new ArrayList<>();

        BizDate syoriYMD = BizDate.valueOf(20150717);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();

        exNumericEquals(hokenSyoukenLst.size(), 0, "保険証券テーブルエンティティリストの件数");
    }

    @Test
    @TestOrder(20)
    public void testEditTBL_A2() {

        IT_KykKihon kykKihon = new IT_KykKihon();



        List<IT_KykSyouhn> syuKykSyouhnLst = new ArrayList<>();

        IT_KykSonotaTkyk kykSonotaTkyk = new IT_KykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = new ArrayList<>();



        IT_SyouhnTokujou syouhnTokujou = new IT_SyouhnTokujou();

        IT_KykSya kykSya = new IT_KykSya();

        IT_HhknSya hhknSya = new IT_HhknSya();



        IT_KykUkt sibouHenkan = new IT_KykUkt();



        IT_KykUkt siteiDairi = new IT_KykUkt();



        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = new IT_KhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = new ArrayList<>();



        List<IT_NyknJissekiRireki> nyknJissekiRireki = new ArrayList<>();

        BizDate syoriYMD = BizDate.valueOf(20150717);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();

        exNumericEquals(hokenSyoukenLst.size(), 0, "保険証券テーブルエンティティリストの件数");

    }

    @Test
    @TestOrder(30)
    public void testEditTBL_B1() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo1);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo1, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000010", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.NONE, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.ARI, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.NONE, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字１", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 30, "被保険者年齢");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13171", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSyoukenTblSyuusinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSuiihyouTblMockForHozen.class, "editTBL");

    }

    @Test
    @TestOrder(40)
    public void testEditTBL_B2() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000020");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20200401), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000020", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20200403), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SAI, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.ARI, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.NONE, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名１", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字２", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字２", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 30, "被保険者年齢");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");

        exClassificationEquals(hokenSyoukenLst.get(0).getPyentuuktype(), C_Tuukasyu.JPY, "保険料円換算額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getPyen(), BizCurrency.valueOf(11000), "保険料円換算額");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "ユ契名　二こ", "契約者代理人名（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.ARI, "保険契約者代理人チラシ同封区分");

        IT_HokenSyouken pIT_HokenSyouken = (IT_HokenSyouken)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 0);
        exStringEquals(pIT_HokenSyouken.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_HokenSyouken.getSyono(), "20806000020", "証券番号");
        exDateEquals(pIT_HokenSyouken.getTyouhyouymd(), BizDate.valueOf(20200401), "帳票作成日");

        IT_KykKihon pIT_KykKihon = (IT_KykKihon)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 1);
        exStringEquals(pIT_KykKihon.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykKihon.getSyono(), "20806000020", "証券番号");

        EditHokenSyoukenParam pEditHokenSyoukenParam = (EditHokenSyoukenParam)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 2);
        exClassificationEquals(pEditHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");

        List<IT_NyknJissekiRireki> pIT_NyknJissekiRireki = (List<IT_NyknJissekiRireki>)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 3);
        exStringEquals(pIT_NyknJissekiRireki.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_NyknJissekiRireki.get(0).getSyono(), "20806000020", "証券番号");

        IT_KykSya pIT_KykSya = (IT_KykSya)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 4);
        exStringEquals(pIT_KykSya.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykSya.getSyono(), "20806000020", "証券番号");

        List<IT_KykSyouhn> pIT_KykSyouhn = (List<IT_KykSyouhn>)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 5);
        exStringEquals(pIT_KykSyouhn.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykSyouhn.get(0).getSyono(), "20806000020", "証券番号");
        exClassificationEquals(pIT_KykSyouhn.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");

        IT_KykSonotaTkyk pIT_KykSonotaTkyk = (IT_KykSonotaTkyk)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 6);
        exStringEquals(pIT_KykSonotaTkyk.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykSonotaTkyk.getSyono(), "20806000020", "証券番号");

        exStringEquals((String)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 7), null, "契約受取人テーブルリスト（死亡保険金受取人）");

        IT_KykUkt pIT_KykUkt = (IT_KykUkt)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 8);
        exStringEquals(pIT_KykUkt.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykUkt.getSyono(), "20806000020", "証券番号");
        exClassificationEquals(pIT_KykUkt.getUktsyukbn(), C_UktsyuKbn.STDRSK, "受取人種類区分");
        exBooleanEquals(pIT_KykUkt.getUktsyurenno() == 1, true, "受取人種類別連番");

        exBooleanEquals(MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 9).equals(1), true, "証券作成区分");
        exNumericEquals((int)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 10), 2, "新契約保険証券状態");
        exClassificationEquals((C_UmuKbn)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 11), C_UmuKbn.NONE, "減額存在チェック");
        exClassificationEquals((C_KjkhukaKbn)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 12), C_KjkhukaKbn.BLNK, "死亡受取人名漢字化不可区分");
        exClassificationEquals((C_SyoriKbn)MockObjectManager.getArgument(EditSyoukenTblNenkinMockForHozen.class, "editTBL", 0, 13), C_SyoriKbn.BLNK, "処理区分");

        KhozenCommonParam khozenCommonParam =  (KhozenCommonParam) MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 0);

        exStringEquals(khozenCommonParam.getSikibetuKey("20806000020"), "10000000000000020", "識別キー");

        kykKihon =  (IT_KykKihon) MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 1);
        exStringEquals(kykKihon.getSyono(), "20806000020", "証券番号");

        List<IT_KykSyouhn> kykSyouhnList =  (List<IT_KykSyouhn>) MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 2);
        exStringEquals(kykSyouhnList.get(0).getSyono(), "20806000020", "証券番号");
        exClassificationEquals(kykSyouhnList.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");

        exStringEquals((String)MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 3), null, "契約商品テーブルエンティティリスト（特約）");

        hhknSya =  (IT_HhknSya) MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 4);
        exStringEquals(hhknSya.getSyono(), "20806000020", "証券番号");
        exDateEquals((BizDate) MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 5), BizDate.valueOf(20200401), "処理日");

        editHokenSyoukenParam =  (EditHokenSyoukenParam) MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 6);
        exClassificationEquals(editHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");

        exClassificationEquals((C_SinsaihkKbn) MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 7), C_SinsaihkKbn.SAI, "新規再発行区分");

        BM_SyouhnZokusei syouhnZokusei = (BM_SyouhnZokusei) MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 8);
        exStringEquals(syouhnZokusei.getSyouhncd(), "ﾕｺ", "商品コード");

        kykSonotaTkyk =  (IT_KykSonotaTkyk) MockObjectManager.getArgument(EditSuiihyouTblNenkinMockForHozen.class, "editTBL", 0, 9);
        exStringEquals(kykSonotaTkyk.getSyono(), "20806000020", "証券番号");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSyoukenTblSyuusinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSuiihyouTblMockForHozen.class, "editTBL");

    }

    @Test(expected = CommonBizAppException.class)
    @TestOrder(50)
    public void testEditTBL_B3() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN1;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000030");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        try {


            editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
                tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
                sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        } catch (CommonBizAppException e) {
            exStringEquals(e.getMessage(), "システム整合性エラーです。基準金額が取得できませんでした。", "エラーメッセージ");
            throw e;
        }
    }

    @Test
    @TestOrder(60)
    public void testEditTBL_B4() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.BLNK;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20200401), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000040", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20200401), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.BLNK, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.NONE, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名２", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字４", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 103, "被保険者年齢");

        exClassificationEquals(hokenSyoukenLst.get(0).getPyentuuktype(), C_Tuukasyu.BLNK, "保険料円換算額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getPyen(), BizCurrency.valueOf(0), "保険料円換算額");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "ユケイメイ　ニア", "契約者代理人名（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.ARI, "保険契約者代理人チラシ同封区分");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSyoukenTblSyuusinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSuiihyouTblMockForHozen.class, "editTBL");

    }

    @Test
    @TestOrder(70)
    public void testEditTBL_B5() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo5);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo5, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000050", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170815), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SAI, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.NONE, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名２", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字４", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 102, "被保険者年齢");

        exClassificationEquals(hokenSyoukenLst.get(0).getPyentuuktype(), C_Tuukasyu.BLNK, "保険料円換算額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getPyen(), BizCurrency.valueOf(0), "保険料円換算額");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSyoukenTblSyuusinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSuiihyouTblMockForHozen.class, "editTBL");


    }

    @Test
    @TestOrder(80)
    public void testEditTBL_B6() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo6);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo6, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000060", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170815), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SAI, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.NONE, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名２", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字４", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 103, "被保険者年齢");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSyoukenTblSyuusinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSuiihyouTblMockForHozen.class, "editTBL");

    }

    @Test
    @TestOrder(90)
    public void testEditTBL_B7() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo7);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.KAIYAKU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo7, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000070", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170815), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SAI, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.NONE, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.NONE, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名２", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字４", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 104, "被保険者年齢");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSyoukenTblSyuusinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSuiihyouTblMockForHozen.class, "editTBL");
    }

    @Test
    @TestOrder(100)
    public void testEditTBL_B8() {

        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000080");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo8);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey8, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo8, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000080", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170815), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SAI, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.NONE, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名２", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字４", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 62, "被保険者年齢");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSyoukenTblSyuusinMockForHozen.class, "editTBL");
        MockObjectManager.assertNotCalled(EditSuiihyouTblMockForHozen.class, "editTBL");

    }

    @Test
    @TestOrder(110)
    public void testEditTBL_B9() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo9);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey9, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo9, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000090", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170815), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SAI, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.NONE, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名３", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 104, "被保険者年齢");

        IT_HokenSyouken hokenSyouken =  (IT_HokenSyouken) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 0);
        exStringEquals(hokenSyouken.getSyono(), "20806000097", "証券番号");

        kykKihon =  (IT_KykKihon) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 1);
        exStringEquals(kykKihon.getSyono(), "20806000097", "証券番号");

        kykSya =  (IT_KykSya) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 2);

        hhknSya =  (IT_HhknSya) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 3);
        exStringEquals(hhknSya.getSyono(), "20806000097", "証券番号");

        List<IT_KykSyouhn> kykSyouhnList =  (List<IT_KykSyouhn>) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 4);
        exStringEquals(kykSyouhnList.get(0).getSyono(), "20806000097", "証券番号");
        exClassificationEquals(kykSyouhnList.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(kykSyouhnList.get(0).getSyouhncd(), "ﾕｱ", "商品コード");

        List<IT_NyknJissekiRireki> nyknJissekiRirekiList =  (List<IT_NyknJissekiRireki>) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 5);
        exStringEquals(nyknJissekiRirekiList.get(0).getSyono(), "20806000097", "証券番号");

        IT_KykSonotaTkyk kykSonotaTkyk1 =  (IT_KykSonotaTkyk) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 6);
        exStringEquals(kykSonotaTkyk1.getSyono(), "20806000097", "証券番号");

        exStringEquals((String)MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 7), null, "契約受取人テーブルリスト（被保険者代理人）");

        List<IT_KykUkt> kykUktSibouList =  (List<IT_KykUkt>) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 8);
        exStringEquals(kykUktSibouList.get(0).getSyono(), "20806000097", "証券番号");
        exClassificationEquals(kykUktSibouList.get(0).getUktsyukbn(), C_UktsyuKbn.SBUKT, "受取人種類区分");

        EditHokenSyoukenParam editHokenSyoukenParam =  (EditHokenSyoukenParam) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 9);
        exClassificationEquals(editHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");

        exDateEquals((BizDate) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 10), BizDate.valueOf(20170815), "処理年月日");

        exClassificationEquals((C_KjkhukaKbn) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 11), C_KjkhukaKbn.KJKHUKA, "死亡受取人名漢字化不可区分");
        exClassificationEquals((C_UmuKbn) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 12), C_UmuKbn.NONE, "減額存在チェック");
        exNumericEquals((int) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 13), 2, "証券作成区分");
        exNumericEquals((int) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 14), 0, "新契約保険証券状態");

        BM_SyouhnZokusei syouhnZokusei =  (BM_SyouhnZokusei) MockObjectManager.getArgument(EditSyoukenTblSyuusinMockForHozen.class, "editTBL", 0, 15);
        exStringEquals(syouhnZokusei.getSyouhncd(), "ﾕｱ", "商品コード");


        KhozenCommonParam khozenCommonParam =  (KhozenCommonParam) MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 0);

        exStringEquals(khozenCommonParam.getSikibetuKey("20806000097"), "10000000000000090", "識別キー");

        kykKihon =  (IT_KykKihon) MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 1);
        exStringEquals(kykKihon.getSyono(), "20806000097", "証券番号");

        kykSyouhnList =  (List<IT_KykSyouhn>) MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 2);
        exStringEquals(kykSyouhnList.get(0).getSyono(), "20806000097", "証券番号");
        exClassificationEquals(kykSyouhnList.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");

        exStringEquals((String)MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 3), null, "契約商品テーブルエンティティリスト（特約）");

        hhknSya =  (IT_HhknSya) MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 4);
        exStringEquals(hhknSya.getSyono(), "20806000097", "証券番号");
        exDateEquals((BizDate) MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 5), BizDate.valueOf(20170815), "処理日");

        editHokenSyoukenParam =  (EditHokenSyoukenParam) MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 6);
        exClassificationEquals(editHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");

        exClassificationEquals((C_SinsaihkKbn) MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 7), C_SinsaihkKbn.SAI, "新規再発行区分");

        syouhnZokusei = (BM_SyouhnZokusei) MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 8);
        exStringEquals(syouhnZokusei.getSyouhncd(), "ﾕｱ", "商品コード");

        kykSonotaTkyk =  (IT_KykSonotaTkyk) MockObjectManager.getArgument(EditSuiihyouTblMockForHozen.class, "editTBL", 0, 9);
        exStringEquals(kykSonotaTkyk.getSyono(), "20806000097", "証券番号");


        MockObjectManager.assertNotCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertCalled(EditSyoukenTblSyuusinMockForHozen.class, "editTBL");
        MockObjectManager.assertCalled(EditSuiihyouTblMockForHozen.class, "editTBL");

    }

    @Test
    @TestOrder(120)
    public void testEditTBL_B10() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000100");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo10);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey10, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo10, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000100", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170815), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SAI, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.NONE, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名４", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字４", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 60, "被保険者年齢");

        MockObjectManager.assertNotCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
    }

    @Test
    @TestOrder(130)
    public void testEditTBL_B11() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000110");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo11);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo11, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000110", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.NONE, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.NONE, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名２", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字４", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 61, "被保険者年齢");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");

    }

    @Test
    @TestOrder(140)
    public void testEditTBL_B12() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000120");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo12);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo12, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000120", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.NONE, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名２", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字４", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 64, "被保険者年齢");

    }


    @Test
    @TestOrder(150)
    public void testEditTBL_B13() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000130");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo13);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo13, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000130", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.NONE, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名３", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "契約者名漢字４", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 65, "被保険者年齢");

        MockObjectManager.assertNotCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertCalled(EditSyoukenTblSyuusinMockForHozen.class, "editTBL");
        MockObjectManager.assertCalled(EditSuiihyouTblMockForHozen.class, "editTBL");
    }

    @Test
    @TestOrder(160)
    public void testEditTBL_B14() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000140");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo14);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo14, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000140", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(170)
    public void testEditTBL_B15() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000150");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo15);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo15, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000150", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(180)
    public void testEditTBL_B16() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000160");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo16);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo16, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000160", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(190)
    public void testEditTBL_B17() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000170");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo17);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo17, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000170", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(200)
    public void testEditTBL_B18() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000180");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo18);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey8, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo18, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000180", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(210)
    public void testEditTBL_B19() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000190");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo19);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey9, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo19, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000190", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(220)
    public void testEditTBL_B20() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000200");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo20);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey10, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo20, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000200", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(230)
    public void testEditTBL_B21() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000210");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo21);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo21, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000210", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(240)
    public void testEditTBL_B22() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000220");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo22);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo22, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000220", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(250)
    public void testEditTBL_B23() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000230");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo23);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo23, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000230", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(260)
    public void testEditTBL_B24() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000240");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo24);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo24, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000240", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(270)
    public void testEditTBL_B25() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000250");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo25);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo25, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000250", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(280)
    public void testEditTBL_B26() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000260");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo26);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo26, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000260", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(290)
    public void testEditTBL_B27() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN2;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000270");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo27);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo27, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000270", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170817), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.NONE, "転送不要郵便有無");
    }

    @Test
    @TestOrder(300)
    public void testEditTBL_B28() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSuiihyouTblNenkin2MockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        List<IT_Zennou> pZennou = new ArrayList<>();
        IT_Zennou zennou = SWAKInjector.getInstance(IT_Zennou.class);
        zennou.setSyono("20806000042");
        zennou.setKbnkey("04");
        zennou.setZennoukaisiymd(BizDate.valueOf(20180910));
        zennou.setRenno(1);
        pZennou.add(zennou);

        IT_AnsyuKihon pIT_AnsyuKihon = SWAKInjector.getInstance(IT_AnsyuKihon.class);
        pIT_AnsyuKihon.setSyono("20806000042");
        pIT_AnsyuKihon.setKbnkey("04");
        pIT_AnsyuKihon.setZennous(pZennou);

        khozenCommonParam.setSikibetuKey("10000000000000010");
        khozenCommonParam.setBatchAnsyuKihon(pIT_AnsyuKihon);


        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo5_1);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.NONE, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "", "年間控除証明補足メッセージコード");

        IT_HokenSyouken pIT_HokenSyouken = (IT_HokenSyouken)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 0);
        exStringEquals(pIT_HokenSyouken.getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_HokenSyouken.getSyono(), "12806000018", "証券番号");
        exDateEquals(pIT_HokenSyouken.getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");

        IT_KykKihon pIT_KykKihon = (IT_KykKihon)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(pIT_KykKihon.getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_KykKihon.getSyono(), "12806000018", "証券番号");

        EditHokenSyoukenParam pEditHokenSyoukenParam = (EditHokenSyoukenParam)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 2);

        exClassificationEquals(pEditHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");
        exDateEquals(pEditHokenSyoukenParam.getCalckijyunYMD(), BizDate.valueOf(20170901), "計算基準日");
        exClassificationEquals(pEditHokenSyoukenParam.getKariukeUmu(), C_UmuKbn.ARI, "仮受計上有無");


        List<IT_NyknJissekiRireki> pIT_NyknJissekiRireki = (List<IT_NyknJissekiRireki>)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 3);
        exStringEquals(pIT_NyknJissekiRireki.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_NyknJissekiRireki.get(0).getSyono(), "12806000018", "証券番号");

        IT_KykSya pIT_KykSya = (IT_KykSya)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(pIT_KykSya.getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_KykSya.getSyono(), "12806000018", "証券番号");


        List<IT_KykSyouhn> pIT_KykSyouhn = (List<IT_KykSyouhn>)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 5);
        exStringEquals(pIT_KykSyouhn.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_KykSyouhn.get(0).getSyono(), "12806000018", "証券番号");

        exClassificationEquals(pIT_KykSyouhn.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");

        IT_KykSonotaTkyk pIT_KykSonotaTkyk = (IT_KykSonotaTkyk)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 6);
        exStringEquals(pIT_KykSonotaTkyk.getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_KykSonotaTkyk.getSyono(), "12806000018", "証券番号");


        exStringEquals((String)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 7), null, "契約受取人テーブルリスト（死亡保険金受取人）");


        IT_KykUkt pIT_KykUkt = (IT_KykUkt)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 8);
        exStringEquals(pIT_KykUkt.getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_KykUkt.getSyono(), "12806000018", "証券番号");

        exClassificationEquals(pIT_KykUkt.getUktsyukbn(), C_UktsyuKbn.STDRSK, "受取人種類区分");
        exBooleanEquals(pIT_KykUkt.getUktsyurenno() == 1, true, "受取人種類別連番");


        exBooleanEquals(MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 9).equals(1), true, "証券作成区分");
        exNumericEquals((int)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 10), 1, "新契約保険証券状態");
        exClassificationEquals((C_UmuKbn)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 11), C_UmuKbn.NONE, "減額存在チェック");

        exClassificationEquals((C_KjkhukaKbn)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 12), C_KjkhukaKbn.BLNK, "死亡受取人名漢字化不可区分");

        IT_Zennou pIT_Zennou = (IT_Zennou)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 13);
        exStringEquals(pIT_Zennou.getKbnkey(), "04", "区分キー");
        exStringEquals(pIT_Zennou.getSyono(), "20806000042", "証券番号");

        KhozenCommonParam pKhozenCommonParam = (KhozenCommonParam)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 0);
        exStringEquals(pKhozenCommonParam.getSikibetuKey("20806000042"), "10000000000000010", "識別キー");

        IT_KykKihon pIT_KykKihon2 = (IT_KykKihon)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(pIT_KykKihon2.getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_KykKihon2.getSyono(), "12806000018", "証券番号");


        List<IT_KykSyouhn> pIT_KykSyouhn2 = (List<IT_KykSyouhn>)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 2);
        exStringEquals(pIT_KykSyouhn2.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_KykSyouhn2.get(0).getSyono(), "12806000018", "証券番号");

        exClassificationEquals(pIT_KykSyouhn2.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");


        exStringEquals((String)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 3), null, "契約商品リスト（特約）");

        IT_HhknSya pIT_HhknSya = (IT_HhknSya)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(pIT_HhknSya.getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_HhknSya.getSyono(), "12806000018", "証券番号");

        exDateEquals((BizDate)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 5), BizDate.valueOf(20170815), "処理日");

        EditHokenSyoukenParam pEditHokenSyoukenParam2 = (EditHokenSyoukenParam)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 6);

        exClassificationEquals(pEditHokenSyoukenParam2.getSyoukenSaihk(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");
        exDateEquals(pEditHokenSyoukenParam2.getCalckijyunYMD(), BizDate.valueOf(20170901), "計算基準日");
        exClassificationEquals(pEditHokenSyoukenParam2.getKariukeUmu(), C_UmuKbn.ARI, "仮受計上有無");


        exClassificationEquals((Classification)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 7), C_SinsaihkKbn.SIN, "新規再発行区分");

        BM_SyouhnZokusei pBM_SyouhnZokusei = (BM_SyouhnZokusei)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 8);

        exStringEquals(pBM_SyouhnZokusei.getSyouhncd(), "ﾕﾁ", "商品コード");
        exBooleanEquals(pBM_SyouhnZokusei.getSyouhnsdno().equals(1), true, "商品世代番号");

        IT_KykSonotaTkyk pIT_KykSonotaTkyk2 = (IT_KykSonotaTkyk)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 9);
        exStringEquals(pIT_KykSonotaTkyk2.getKbnkey(), "01", "区分キー");
        exStringEquals(pIT_KykSonotaTkyk2.getSyono(), "12806000018", "証券番号");

        IT_Zennou pIT_Zennou2 = (IT_Zennou)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 10);
        exStringEquals(pIT_Zennou2.getKbnkey(), "04", "区分キー");
        exStringEquals(pIT_Zennou2.getSyono(), "20806000042", "証券番号");

    }

    @Test
    @TestOrder(310)
    public void testEditTBL_B29() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo5_2);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.NONE, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");

        IT_HokenSyouken pIT_HokenSyouken = (IT_HokenSyouken)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 0);
        exStringEquals(pIT_HokenSyouken.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_HokenSyouken.getSyono(), "12806000029", "証券番号");
        exDateEquals(pIT_HokenSyouken.getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");

        IT_KykKihon pIT_KykKihon = (IT_KykKihon)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(pIT_KykKihon.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykKihon.getSyono(), "12806000029", "証券番号");

        EditHokenSyoukenParam pEditHokenSyoukenParam = (EditHokenSyoukenParam)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 2);

        exClassificationEquals(pEditHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");
        exDateEquals(pEditHokenSyoukenParam.getCalckijyunYMD(), BizDate.valueOf(20170901), "計算基準日");
        exClassificationEquals(pEditHokenSyoukenParam.getKariukeUmu(), C_UmuKbn.ARI, "仮受計上有無");


        List<IT_NyknJissekiRireki> pIT_NyknJissekiRireki = (List<IT_NyknJissekiRireki>)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 3);
        exStringEquals(pIT_NyknJissekiRireki.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_NyknJissekiRireki.get(0).getSyono(), "12806000029", "証券番号");

        IT_KykSya pIT_KykSya = (IT_KykSya)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(pIT_KykSya.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykSya.getSyono(), "12806000029", "証券番号");


        List<IT_KykSyouhn> pIT_KykSyouhn = (List<IT_KykSyouhn>)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 5);
        exStringEquals(pIT_KykSyouhn.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykSyouhn.get(0).getSyono(), "12806000029", "証券番号");

        exClassificationEquals(pIT_KykSyouhn.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");

        IT_KykSonotaTkyk pIT_KykSonotaTkyk = (IT_KykSonotaTkyk)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 6);
        exStringEquals(pIT_KykSonotaTkyk.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykSonotaTkyk.getSyono(), "12806000029", "証券番号");


        exStringEquals((String)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 7), null, "契約受取人テーブルリスト（死亡保険金受取人）");


        IT_KykUkt pIT_KykUkt = (IT_KykUkt)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 8);
        exStringEquals(pIT_KykUkt.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykUkt.getSyono(), "12806000029", "証券番号");

        exClassificationEquals(pIT_KykUkt.getUktsyukbn(), C_UktsyuKbn.STDRSK, "受取人種類区分");
        exBooleanEquals(pIT_KykUkt.getUktsyurenno() == 1, true, "受取人種類別連番");


        exBooleanEquals(MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 9).equals(1), true, "証券作成区分");
        exNumericEquals((int)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 10), 1, "新契約保険証券状態");
        exClassificationEquals((C_UmuKbn)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 11), C_UmuKbn.NONE, "減額存在チェック");

        exClassificationEquals((C_KjkhukaKbn)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 12), C_KjkhukaKbn.BLNK, "死亡受取人名漢字化不可区分");

        IT_Zennou pIT_Zennou = (IT_Zennou)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 13);
        exStringEquals(pIT_Zennou.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_Zennou.getSyono(), "12806000029", "証券番号");

        KhozenCommonParam pKhozenCommonParam = (KhozenCommonParam)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 0);
        exStringEquals(pKhozenCommonParam.getSikibetuKey("12806000029"), "10000000000000010", "識別キー");

        IT_KykKihon pIT_KykKihon2 = (IT_KykKihon)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(pIT_KykKihon2.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykKihon2.getSyono(), "12806000029", "証券番号");


        List<IT_KykSyouhn> pIT_KykSyouhn2 = (List<IT_KykSyouhn>)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 2);
        exStringEquals(pIT_KykSyouhn2.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykSyouhn2.get(0).getSyono(), "12806000029", "証券番号");

        exClassificationEquals(pIT_KykSyouhn2.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");


        exStringEquals((String)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 3), null, "契約商品リスト（特約）");

        IT_HhknSya pIT_HhknSya = (IT_HhknSya)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(pIT_HhknSya.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_HhknSya.getSyono(), "12806000029", "証券番号");

        exDateEquals((BizDate)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 5), BizDate.valueOf(20170815), "処理日");

        EditHokenSyoukenParam pEditHokenSyoukenParam2 = (EditHokenSyoukenParam)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 6);

        exClassificationEquals(pEditHokenSyoukenParam2.getSyoukenSaihk(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");
        exDateEquals(pEditHokenSyoukenParam2.getCalckijyunYMD(), BizDate.valueOf(20170901), "計算基準日");
        exClassificationEquals(pEditHokenSyoukenParam2.getKariukeUmu(), C_UmuKbn.ARI, "仮受計上有無");


        exClassificationEquals((Classification)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 7), C_SinsaihkKbn.SIN, "新規再発行区分");

        BM_SyouhnZokusei pBM_SyouhnZokusei = (BM_SyouhnZokusei)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 8);

        exStringEquals(pBM_SyouhnZokusei.getSyouhncd(), "ﾕﾁ", "商品コード");
        exBooleanEquals(pBM_SyouhnZokusei.getSyouhnsdno().equals(1), true, "商品世代番号");

        IT_KykSonotaTkyk pIT_KykSonotaTkyk2 = (IT_KykSonotaTkyk)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 9);
        exStringEquals(pIT_KykSonotaTkyk2.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_KykSonotaTkyk2.getSyono(), "12806000029", "証券番号");

        IT_Zennou pIT_Zennou2 = (IT_Zennou)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 10);
        exStringEquals(pIT_Zennou2.getKbnkey(), "02", "区分キー");
        exStringEquals(pIT_Zennou2.getSyono(), "12806000029", "証券番号");

    }

    @Test
    @TestOrder(320)
    public void testEditTBL_B30() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo5_3);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");

        IT_HokenSyouken pIT_HokenSyouken = (IT_HokenSyouken)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 0);
        exStringEquals(pIT_HokenSyouken.getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_HokenSyouken.getSyono(), "12806000030", "証券番号");
        exDateEquals(pIT_HokenSyouken.getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");

        IT_KykKihon pIT_KykKihon = (IT_KykKihon)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(pIT_KykKihon.getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_KykKihon.getSyono(), "12806000030", "証券番号");

        EditHokenSyoukenParam pEditHokenSyoukenParam = (EditHokenSyoukenParam)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 2);

        exClassificationEquals(pEditHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");
        exDateEquals(pEditHokenSyoukenParam.getCalckijyunYMD(), BizDate.valueOf(20170901), "計算基準日");
        exClassificationEquals(pEditHokenSyoukenParam.getKariukeUmu(), C_UmuKbn.ARI, "仮受計上有無");


        List<IT_NyknJissekiRireki> pIT_NyknJissekiRireki = (List<IT_NyknJissekiRireki>)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 3);
        exStringEquals(pIT_NyknJissekiRireki.get(0).getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_NyknJissekiRireki.get(0).getSyono(), "12806000030", "証券番号");

        IT_KykSya pIT_KykSya = (IT_KykSya)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(pIT_KykSya.getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_KykSya.getSyono(), "12806000030", "証券番号");


        List<IT_KykSyouhn> pIT_KykSyouhn = (List<IT_KykSyouhn>)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 5);
        exStringEquals(pIT_KykSyouhn.get(0).getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_KykSyouhn.get(0).getSyono(), "12806000030", "証券番号");

        exClassificationEquals(pIT_KykSyouhn.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");

        IT_KykSonotaTkyk pIT_KykSonotaTkyk = (IT_KykSonotaTkyk)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 6);
        exStringEquals(pIT_KykSonotaTkyk.getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_KykSonotaTkyk.getSyono(), "12806000030", "証券番号");


        exStringEquals((String)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 7), null, "契約受取人テーブルリスト（死亡保険金受取人）");


        IT_KykUkt pIT_KykUkt = (IT_KykUkt)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 8);
        exStringEquals(pIT_KykUkt.getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_KykUkt.getSyono(), "12806000030", "証券番号");

        exClassificationEquals(pIT_KykUkt.getUktsyukbn(), C_UktsyuKbn.STDRSK, "受取人種類区分");
        exBooleanEquals(pIT_KykUkt.getUktsyurenno() == 1, true, "受取人種類別連番");

        exBooleanEquals(MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 9).equals(1), true, "証券作成区分");
        exNumericEquals((int)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 10), 1, "新契約保険証券状態");
        exClassificationEquals((C_UmuKbn)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 11), C_UmuKbn.NONE, "減額存在チェック");
        exClassificationEquals((C_KjkhukaKbn)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 12), C_KjkhukaKbn.BLNK, "死亡受取人名漢字化不可区分");

        exStringEquals((String)MockObjectManager.getArgument(EditSyoukenTblNenkin2MockForHozen.class, "editTBL", 0, 13), null, "前納テーブル");

        KhozenCommonParam pKhozenCommonParam = (KhozenCommonParam)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 0);
        exStringEquals(pKhozenCommonParam.getSikibetuKey("12806000030"), "10000000000000010", "識別キー");

        IT_KykKihon pIT_KykKihon2 = (IT_KykKihon)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(pIT_KykKihon2.getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_KykKihon2.getSyono(), "12806000030", "証券番号");


        List<IT_KykSyouhn> pIT_KykSyouhn2 = (List<IT_KykSyouhn>)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 2);
        exStringEquals(pIT_KykSyouhn2.get(0).getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_KykSyouhn2.get(0).getSyono(), "12806000030", "証券番号");

        exClassificationEquals(pIT_KykSyouhn2.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");


        exStringEquals((String)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 3), null, "契約商品リスト（特約）");
        IT_HhknSya pIT_HhknSya = (IT_HhknSya)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(pIT_HhknSya.getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_HhknSya.getSyono(), "12806000030", "証券番号");

        exDateEquals((BizDate)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 5), BizDate.valueOf(20170815), "処理日");

        EditHokenSyoukenParam pEditHokenSyoukenParam2 = (EditHokenSyoukenParam)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 6);

        exClassificationEquals(pEditHokenSyoukenParam2.getSyoukenSaihk(), C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI, "証券再発行区分");
        exDateEquals(pEditHokenSyoukenParam2.getCalckijyunYMD(), BizDate.valueOf(20170901), "計算基準日");
        exClassificationEquals(pEditHokenSyoukenParam2.getKariukeUmu(), C_UmuKbn.ARI, "仮受計上有無");


        exClassificationEquals((Classification)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 7), C_SinsaihkKbn.SIN, "新規再発行区分");

        BM_SyouhnZokusei pBM_SyouhnZokusei = (BM_SyouhnZokusei)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 8);

        exStringEquals(pBM_SyouhnZokusei.getSyouhncd(), "ﾕﾁ", "商品コード");
        exBooleanEquals(pBM_SyouhnZokusei.getSyouhnsdno().equals(1), true, "商品世代番号");

        IT_KykSonotaTkyk pIT_KykSonotaTkyk2 = (IT_KykSonotaTkyk)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 9);
        exStringEquals(pIT_KykSonotaTkyk2.getKbnkey(), "03", "区分キー");
        exStringEquals(pIT_KykSonotaTkyk2.getSyono(), "12806000030", "証券番号");

        exStringEquals((String)MockObjectManager.getArgument(EditSuiihyouTblNenkin2MockForHozen.class, "editTBL", 0, 10), null, "前納テーブル");
    }

    @Test
    @TestOrder(330)
    public void testEditTBL_B31() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSuiihyouTblSyuusin2MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo28);


        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();


        List<IT_KykSyouhn> tkKykSyouhnLst = null;


        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();


        IT_KykUkt sibouHenkan = null;


        IT_KykUkt siteiDairi = null;


        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);


        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);


        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;


        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;


        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;


        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo28, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getTyouhyouymd(), BizDate.valueOf(20170815), "帳票作成日");
        exStringEquals(hokenSyoukenLst.get(0).getHenkousikibetukey(), "10000000000000090", "変更識別キー");
        exDateEquals(hokenSyoukenLst.get(0).getSyohakkouymd(), BizDate.valueOf(20170815), "証券発行年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SAI, "新規再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getDstirasidouhuukbn(), C_UmuKbn.NONE, "ＤＳチラシ同封区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.NONE, "転送不要郵便有無");
        exClassificationEquals(hokenSyoukenLst.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.YOU, "印紙税支払要否区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");

        exStringEquals(hokenSyoukenLst.get(0).getHanbainm(), "", "販売名称");
        exClassificationEquals(hokenSyoukenLst.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exStringEquals(hokenSyoukenLst.get(0).getSeisikihknnm(), "商品名３", "正式保険名称");
        exDateEquals(hokenSyoukenLst.get(0).getKouryokukaisiymd(), null, "効力開始年月日");
        exStringEquals(hokenSyoukenLst.get(0).getKyknmkj(), "", "契約者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkj(), "被保険者名漢字４", "被保険者名（漢字）");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(hokenSyoukenLst.get(0).getHhknseiymd(), BizDate.valueOf(19870601), "被保険者生年月日");
        exClassificationEquals(hokenSyoukenLst.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(hokenSyoukenLst.get(0).getHhknnen(), 104, "被保険者年齢");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSisuuupkaisuu(), BizNumber.valueOf(0), "指数上昇回数");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSisuudownkaisuu(), BizNumber.valueOf(0), "指数下落回数");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getRendouritu(), BizNumber.valueOf(0.1234), "連動率");

        IT_HokenSyouken hokenSyouken =  (IT_HokenSyouken) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 0);
        exStringEquals(hokenSyouken.getSyono(), "99806019860", "証券番号");

        kykKihon =  (IT_KykKihon) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(kykKihon.getSyono(), "99806019860", "証券番号");

        kykSya =  (IT_KykSya) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 2);
        exStringEquals(kykSya.getSyono(), "99806019860", "証券番号");

        hhknSya =  (IT_HhknSya) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 3);
        exStringEquals(hhknSya.getSyono(), "99806019860", "証券番号");

        List<IT_KykSyouhn> kykSyouhnList =  (List<IT_KykSyouhn>) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(kykSyouhnList.get(0).getSyono(), "99806019860", "証券番号");
        exClassificationEquals(kykSyouhnList.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(kykSyouhnList.get(0).getSyouhncd(), "ﾕﾌ", "商品コード");

        List<IT_NyknJissekiRireki> nyknJissekiRirekiList =  (List<IT_NyknJissekiRireki>) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 5);
        exStringEquals(nyknJissekiRirekiList.get(0).getSyono(), "99806019860", "証券番号");

        IT_KykSonotaTkyk kykSonotaTkyk1 =  (IT_KykSonotaTkyk) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 6);
        exStringEquals(kykSonotaTkyk1.getSyono(), "99806019860", "証券番号");

        exStringEquals((String)MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 7), null, "契約受取人テーブルリスト（被保険者代理人）");

        List<IT_KykUkt> kykUktSibouList =  (List<IT_KykUkt>) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 8);
        exStringEquals(kykUktSibouList.get(0).getSyono(), "99806019860", "証券番号");
        exClassificationEquals(kykUktSibouList.get(0).getUktsyukbn(), C_UktsyuKbn.SBUKT, "受取人種類区分");

        EditHokenSyoukenParam editHokenSyoukenParam =  (EditHokenSyoukenParam) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 9);
        exClassificationEquals(editHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");

        exDateEquals((BizDate) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 10), BizDate.valueOf(20170815), "処理年月日");

        exClassificationEquals((C_KjkhukaKbn) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 11), C_KjkhukaKbn.KJKHUKA, "死亡受取人名漢字化不可区分");
        exClassificationEquals((C_UmuKbn) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 12), C_UmuKbn.NONE, "減額存在チェック");
        exNumericEquals((int) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 13), 2, "証券作成区分");
        exNumericEquals((int) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 14), 0, "新契約保険証券状態");

        BM_SyouhnZokusei syouhnZokusei =  (BM_SyouhnZokusei) MockObjectManager.getArgument(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL", 0, 15);
        exStringEquals(syouhnZokusei.getSyouhncd(), "ﾕﾌ", "商品コード");


        KhozenCommonParam khozenCommonParam =  (KhozenCommonParam) MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 0);

        exStringEquals(khozenCommonParam.getSikibetuKey("99806019860"), "10000000000000090", "識別キー");

        kykKihon =  (IT_KykKihon) MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(kykKihon.getSyono(), "99806019860", "証券番号");

        kykSyouhnList =  (List<IT_KykSyouhn>) MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 2);
        exStringEquals(kykSyouhnList.get(0).getSyono(), "99806019860", "証券番号");
        exClassificationEquals(kykSyouhnList.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");

        exStringEquals((String)MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 3), null, "契約商品テーブルエンティティリスト（特約）");

        hhknSya =  (IT_HhknSya) MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(hhknSya.getSyono(), "99806019860", "証券番号");
        exDateEquals((BizDate) MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 5), BizDate.valueOf(20170815), "処理日");

        editHokenSyoukenParam =  (EditHokenSyoukenParam) MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 6);
        exClassificationEquals(editHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");

        exClassificationEquals((C_SinsaihkKbn) MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 7), C_SinsaihkKbn.SAI, "新規再発行区分");

        syouhnZokusei = (BM_SyouhnZokusei) MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 8);
        exStringEquals(syouhnZokusei.getSyouhncd(), "ﾕﾌ", "商品コード");

        kykSonotaTkyk =  (IT_KykSonotaTkyk) MockObjectManager.getArgument(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL", 0, 9);
        exStringEquals(kykSonotaTkyk.getSyono(), "99806019860", "証券番号");

        MockObjectManager.assertNotCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertCalled(EditSyoukenTblSyuusin2MockForHozen.class, "editTBL");
        MockObjectManager.assertCalled(EditSuiihyouTblSyuusin2MockForHozen.class, "editTBL");
    }

    @Test
    @TestOrder(330)
    public void testEditTBL_B32() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000127");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000127", "証券番号");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSisuuupkaisuu(), BizNumber.valueOf(3), "指数上昇回数");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSisuudownkaisuu(), BizNumber.valueOf(4), "指数下落回数");
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getRendouritu(), BizNumber.valueOf(0.1235), "連動率");

        IT_HokenSyouken hokenSyouken =  (IT_HokenSyouken) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 0);
        exStringEquals(hokenSyouken.getSyono(), "17806000127", "証券番号");

        IT_KykKihon kykKihon1 =  (IT_KykKihon) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(kykKihon1.getSyono(), "17806000127", "証券番号");

        EditHokenSyoukenParam editHokenSyoukenParam =  (EditHokenSyoukenParam) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 2);
        exClassificationEquals(editHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");

        List<IT_NyknJissekiRireki> nyknJissekiRirekiList =  (List<IT_NyknJissekiRireki>) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 3);
        exStringEquals(nyknJissekiRirekiList.get(0).getSyono(), "17806000127", "証券番号");

        IT_KykSya kykSya1 =  (IT_KykSya) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(kykSya1.getSyono(), "17806000127", "証券番号");

        List<IT_KykSyouhn> kykSyouhnList =  (List<IT_KykSyouhn>) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 5);
        exStringEquals(kykSyouhnList.get(0).getSyono(), "17806000127", "証券番号");
        exClassificationEquals(kykSyouhnList.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(kykSyouhnList.get(0).getSyouhncd(), "ﾕﾍ", "商品コード");

        IT_KykSonotaTkyk kykSonotaTkyk1 =  (IT_KykSonotaTkyk) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 6);
        exStringEquals(kykSonotaTkyk1.getSyono(), "17806000127", "証券番号");

        List<IT_KykUkt> kykUktSibouList =  (List<IT_KykUkt>) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 7);
        exStringEquals(kykUktSibouList.get(0).getSyono(), "17806000127", "証券番号");
        exClassificationEquals(kykUktSibouList.get(0).getUktsyukbn(), C_UktsyuKbn.SBUKT, "受取人種類区分");

        IT_KykUkt kykUktSiteList =  (IT_KykUkt) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 8);
        exStringEquals(kykUktSiteList.getSyono(), "17806000127", "証券番号");
        exClassificationEquals(kykUktSiteList.getUktsyukbn(), C_UktsyuKbn.STDRSK, "受取人種類区分");

        exNumericEquals((int) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 9), 2, "証券作成区分");
        exClassificationEquals((C_UmuKbn) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 10), C_UmuKbn.NONE, "減額存在チェック");
        exClassificationEquals((C_KjkhukaKbn) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 11), C_KjkhukaKbn.KJKHUKA, "死亡受取人名漢字化不可区分");
        exClassificationEquals((C_SyoriKbn) MockObjectManager.getArgument(EditSyoukenTblNenkin3MockForHozen.class, "editTBL", 0, 12), C_SyoriKbn.BLNK, "円建変更処理区分");

        KhozenCommonParam khozenCommonParam =  (KhozenCommonParam) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 0);

        exStringEquals(khozenCommonParam.getSikibetuKey("17806000127"), "10000000000000090", "識別キー");

        kykKihon1 =  (IT_KykKihon) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 1);
        exStringEquals(kykKihon1.getSyono(), "17806000127", "証券番号");

        kykSyouhnList =  (List<IT_KykSyouhn>) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 2);
        exStringEquals(kykSyouhnList.get(0).getSyono(), "17806000127", "証券番号");
        exClassificationEquals(kykSyouhnList.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");

        List<IT_KykSyouhn> kykSyouhnTKList =  (List<IT_KykSyouhn>) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 3);
        exStringEquals(kykSyouhnTKList.get(0).getSyono(), "17806000127", "証券番号");
        exClassificationEquals(kykSyouhnTKList.get(0).getSyutkkbn(), C_SyutkKbn.TK, "主契約特約区分");
        exStringEquals(kykSyouhnTKList.get(0).getSyouhncd(), "ﾕﾍ", "商品コード");

        hhknSya =  (IT_HhknSya) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 4);
        exStringEquals(hhknSya.getSyono(), "17806000127", "証券番号");
        exDateEquals((BizDate) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 5), BizDate.valueOf(20170815), "処理日");

        editHokenSyoukenParam =  (EditHokenSyoukenParam) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 6);
        exClassificationEquals(editHokenSyoukenParam.getSyoukenSaihk(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");

        exClassificationEquals((C_SinsaihkKbn) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 7), C_SinsaihkKbn.SAI, "新規再発行区分");

        BM_SyouhnZokusei syouhnZokusei = (BM_SyouhnZokusei) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 8);
        exStringEquals(syouhnZokusei.getSyouhncd(), "ﾕﾍ", "商品コード");

        kykSonotaTkyk1 =  (IT_KykSonotaTkyk) MockObjectManager.getArgument(EditSuiihyouTblNenkin3MockForHozen.class, "editTBL", 0, 9);
        exStringEquals(kykSonotaTkyk1.getSyono(), "17806000127", "証券番号");
    }

    @Test
    @TestOrder(331)
    public void testEditTBL_B33() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000219");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000219", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.NONE, "控除証明書有無区分");
    }

    @Test
    @TestOrder(332)
    public void testEditTBL_B34() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000220");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000220", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.NONE, "控除証明書有無区分");
    }

    @Test
    @TestOrder(333)
    public void testEditTBL_B35() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000231");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "03", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000231", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
    }

    @Test
    @TestOrder(334)
    public void testEditTBL_B36() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000242");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "04", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000242", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
    }

    @Test
    @TestOrder(335)
    public void testEditTBL_B37() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000253");



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(336)
    public void testEditTBL_B38() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000264");



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(337)
    public void testEditTBL_B39() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000275");



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(338)
    public void testEditTBL_B40() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000286");



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(339)
    public void testEditTBL_B41() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000390");



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(340)
    public void testEditTBL_B42() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000404");



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(340)
    public void testEditTBL_B43() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000312");



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(340)
    public void testEditTBL_B44() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSyoukenTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin2MockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000323");



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exClassificationEquals(hokenSyoukenLst.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyotnshuyoupostumukbn(), C_UmuKbn.ARI, "転送不要郵便有無");
    }

    @Test
    @TestOrder(340)
    public void testEditTBL_C1() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_1);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_1, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "0", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(350)
    public void testEditTBL_C2() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000020");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_2);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = new ArrayList<>();

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_2, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.NKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.HKKYKSDR, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.STDR, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.KYK, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "ユ契名　二い", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "契約者名漢字２", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.ARI, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.ARI, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "2", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "ユ契名　二こ", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.MALE, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), BizDate.valueOf(20170101), "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "1001000", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "通信先住所１２", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "通信先住所２２", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "通信先住所３２", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "022-2222-2222", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "ユ契名　二こ", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "ユ契名　二い", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "契約者名漢字２", "被保険者代理人氏名");

    }


    @Test
    @TestOrder(360)
    public void testEditTBL_C3() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_3);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_3, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.NKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.HKKYKSDR, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.STDR, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.HHKN, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.HYOUJIRANNOTOORI, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.ARI, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.ARI, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.ARI, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "2", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "ユケイメイ　ニア", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.FEMALE, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), BizDate.valueOf(20170101), "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "1001000", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "通信先住所１２", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "通信先住所２２", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "通信先住所３２", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "022-2222-2222", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "ユケイメイ　ニア", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(370)
    public void testEditTBL_C4() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_4);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_4, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.NKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.SBKFKUKT, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.HKKYKSDR, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.HHKSDR, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.HYOUJIRANNOTOORI, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "ユ契名　二い", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.ARI, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.ARI, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "ユ契名　二い", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.MALE, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), BizDate.valueOf(20170101), "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "1001000", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "通信先住所１２１", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "通信先住所２２１", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "通信先住所３２１", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "011-1111-1111", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "ユケイメイ　ニエ", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.FEMALE, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), BizDate.valueOf(20180101), "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "2002000", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "通信先住所１２２", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "通信先住所２２２", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "通信先住所３２２", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "022-2222-2222", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "ユ契名　二い", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(380)
    public void testEditTBL_C5() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_5);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_5, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.NONE, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.HKKYKSDR, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.HHKSDROLD, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.valueOf(5), "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.valueOf(6), "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.ARI, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "0", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(),null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "ユケイメイ　ニエ", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.FEMALE, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), BizDate.valueOf(20170101), "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "1001000", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "通信先住所１２", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "通信先住所２２", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "通信先住所３２", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "022-2222-2222", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "ユケイメイ　ニエ", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(390)
    public void testEditTBL_C6() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_6);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_6, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBKFKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.STDR, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.NASI, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.ARI, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "2", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(400)
    public void testEditTBL_C7() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_7);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_7, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.HHKSDR, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.HYOUJIRANNOTOORI, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "ケイヤクシヤメイカナ４", "被保険者代理人氏名");

    }

    @Test
    @TestOrder(410)
    public void testEditTBL_C8() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_8);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey8, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_8, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.HHKSDR, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "ユ契名　二あ", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "ユ契名　二あ", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(420)
    public void testEditTBL_C9() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_9);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey9, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_9, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBKFKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.HHKSDR, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.valueOf(5), "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "2", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "ユケイメイ　ニサ", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(430)
    public void testEditTBL_C10() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_10);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200402);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey10, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_10, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBKFKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.HHKSDR, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.HHKN, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "2", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(440)
    public void testEditTBL_C11() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_11);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_11, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.KYK, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(450)
    public void testEditTBL_C12() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_12);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_12, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.SOUZOKU, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(460)
    public void testEditTBL_C13() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_13);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_13, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");

    }

    @Test
    @TestOrder(470)
    public void testEditTBL_C14() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_14);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_14, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(480)
    public void testEditTBL_C15() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_15);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_15, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBKFKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.HYOUJIRANNOTOORI, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.ARI, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "2", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(490)
    public void testEditTBL_C16() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_16);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_16, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.HHKN, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(500)
    public void testEditTBL_C17() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_17);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_17, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.KYK, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "0", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(510)
    public void testEditTBL_C18() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_18);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey8, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_18, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.SOUZOKU, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "0", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(520)
    public void testEditTBL_C19() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo2_19);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey9, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo2_19, "証券番号");

        exStringEquals(hokenSyoukenLst.get(0).getPmsgcd3(), "", "保険料メッセージコード３");

        exDateEquals(hokenSyoukenLst.get(0).getKykymd(), BizDate.valueOf(20170701), "契約日");
        exStringEquals(hokenSyoukenLst.get(0).getPhrkkknmidasikbn(), "01", "保険料払込期間見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkknmsgkbn(), "", "払込期間メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkaisuumsgkbn(), "", "払込回数メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkkitukimsgkbn(), "", "払込期月メッセージ区分");
        exStringEquals(hokenSyoukenLst.get(0).getHrkhouhoumsgkbn(), "", "込方法メッセージ区分");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban1(), 1, "主契約特約連番１");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban2(), 0, "主契約特約連番２");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban3(), 0, "主契約特約連番３");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban4(), 0, "主契約特約連番４");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban5(), 0, "主契約特約連番５");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban6(), 0, "主契約特約連番６");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban7(), 0, "主契約特約連番７");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban8(), 0, "主契約特約連番８");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban9(), 0, "主契約特約連番９");
        exNumericEquals(hokenSyoukenLst.get(0).getSyukyktkykrenban10(), 0, "主契約特約連番１０");

        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn1(), C_SyoukenUktMidasiKbn.SBHKKUKT, "（証券）受取人見出し区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn2(), C_SyoukenUktMidasiKbn.HHKSDR, "（証券）受取人見出し区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn3(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn4(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn5(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn6(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn7(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn8(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn9(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktmidasikbn10(), C_SyoukenUktMidasiKbn.BLNK, "（証券）受取人見出し区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn1(), C_SyoukenUktKbn.TOKUTEIMEIGI, "（証券）受取人区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn2(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn3(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn4(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn5(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn6(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn7(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn8(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn9(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getSyoukenuktkbn10(), C_SyoukenUktKbn.BLNK, "（証券）受取人区分１０");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm1(), "", "（証券）受取人名１");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm2(), "", "（証券）受取人名２");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm3(), "", "（証券）受取人名３");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm4(), "", "（証券）受取人名４");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm5(), "", "（証券）受取人名５");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm6(), "", "（証券）受取人名６");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm7(), "", "（証券）受取人名７");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm8(), "", "（証券）受取人名８");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm9(), "", "（証券）受取人名９");
        exStringEquals(hokenSyoukenLst.get(0).getSyoukenuktnm10(), "", "（証券）受取人名１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari1(), BizNumber.ZERO, "（証券）受取人分割割合１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari2(), BizNumber.ZERO, "（証券）受取人分割割合２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari3(), BizNumber.ZERO, "（証券）受取人分割割合３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari4(), BizNumber.ZERO, "（証券）受取人分割割合４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari5(), BizNumber.ZERO, "（証券）受取人分割割合５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari6(), BizNumber.ZERO, "（証券）受取人分割割合６");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari7(), BizNumber.ZERO, "（証券）受取人分割割合７");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari8(), BizNumber.ZERO, "（証券）受取人分割割合８");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari9(), BizNumber.ZERO, "（証券）受取人分割割合９");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSyoukenuktbnwari10(), BizNumber.ZERO, "（証券）受取人分割割合１０");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getSkhtirasidouhuukbn(), C_UmuKbn.NONE, "債権法チラシ同封区分");
        exStringEquals(hokenSyoukenHukaInfo.getYakkannewoldkbn(), "0", "約款新旧区分");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj118(), "", "登録家族名１（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei1(), C_Seibetu.BLNK, "登録家族性別１");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd1(), null, "登録家族生年月日１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno1(), "", "登録家族郵便番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj1(), "", "登録家族住所１（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj1(), "", "登録家族住所２（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj1(), "", "登録家族住所３（漢字）１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno1(), "", "登録家族電話番号１");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzknmkj218(), "", "登録家族名２（１８桁）");
        exClassificationEquals(hokenSyoukenHukaInfo.getTrkkzksei2(), C_Seibetu.BLNK, "登録家族性別２");
        exDateEquals(hokenSyoukenHukaInfo.getTrkkzkseiymd2(), null, "登録家族生年月日２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkyno2(), "", "登録家族郵便番号２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr1kj2(), "", "登録家族住所１（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr2kj2(), "", "登録家族住所２（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzkadr3kj2(), "", "登録家族住所３（漢字）２");
        exStringEquals(hokenSyoukenHukaInfo.getTrkkzktelno2(), "", "登録家族電話番号２");
        exStringEquals(hokenSyoukenHukaInfo.getKykdairinm18(), "", "契約者代理人名（１８桁）");
        exStringEquals(hokenSyoukenHukaInfo.getHhkndairinm(), "ユケイメイ　ニサ", "被保険者代理人氏名");
    }

    @Test
    @TestOrder(530)
    public void testEditTBL_D1() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_1);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_1, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "【１２３】", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000012", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10021", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13360", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(540)
    public void testEditTBL_D2() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000020");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_2);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = new ArrayList<>();



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_2, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字２", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000023", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.TIGIN, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字２", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ２", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ２", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13381", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

    }

    @Test
    @TestOrder(550)
    public void testEditTBL_D3() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000030");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_3);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_3, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(12.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字３", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000034", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.SONOTAMADOHAN, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "漢字法人商号テスト用１２３４５６７８９０", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10041", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字３", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ３", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ３", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13392", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

    }

    @Test
    @TestOrder(560)
    public void testEditTBL_D4() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_4);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_4, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000045", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.TIGIN, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "漢字法人商号テスト用５４３２１６７８９", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13392", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(570)
    public void testEditTBL_D5() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_5);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_5, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000056", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13360", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(580)
    public void testEditTBL_D6() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_6);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200402);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_6, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000067", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13340", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13351", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13400", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(590)
    public void testEditTBL_D7() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_7);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_7, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000078", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(600)
    public void testEditTBL_D8() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_8);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey8, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_8, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000089", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13400", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(610)
    public void testEditTBL_D9() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_9);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey9, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_9, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000090", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13400", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(620)
    public void testEditTBL_D10() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_10);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey10, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_10, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000104", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13400", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(630)
    public void testEditTBL_D11() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_11);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_11, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000115", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13400", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(640)
    public void testEditTBL_D12() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_12);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_12, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000126", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13400", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(650)
    public void testEditTBL_D13() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_13);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_13, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000137", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13147", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(660)
    public void testEditTBL_D14() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_14);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_14, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.2), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000148", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13142", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(670)
    public void testEditTBL_D15() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_15);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_15, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "【１２３】", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000159", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13373", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(680)
    public void testEditTBL_D16() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_16);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_16, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字２", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000160", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字２", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ２", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ２", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13383", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(690)
    public void testEditTBL_D17() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_17);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_17, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(12.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字３", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000171", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字３", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ３", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ３", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13393", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(700)
    public void testEditTBL_D18() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_18);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey8, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_18, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000182", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13393", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(710)
    public void testEditTBL_D19() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_19);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey9, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_19, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000193", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13361", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(720)
    public void testEditTBL_D20() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_20);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey10, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_20, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000207", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13331", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13351", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13400", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(730)
    public void testEditTBL_D21() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_21);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_21, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000218", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13372", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(740)
    public void testEditTBL_D22() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_22);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_22, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000229", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13382", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(750)
    public void testEditTBL_D23() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_23);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_23, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000230", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13392", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(760)
    public void testEditTBL_D24() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_24);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_24, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000241", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13392", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(770)
    public void testEditTBL_D25() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_25);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_25, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000252", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13360", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(780)
    public void testEditTBL_D26() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_26);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_26, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000263", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13400", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(790)
    public void testEditTBL_D27() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_27);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_27, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000274", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13151", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(800)
    public void testEditTBL_D28() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_28);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200330);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey8, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_28, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000285", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13144", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(810)
    public void testEditTBL_D29() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        baseUserInfo.getUser().setUserId("Junit");

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_29);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey9, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_29, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000296", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13145", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(820)
    public void testEditTBL_D30() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_30);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200330);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey10, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_30, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000300", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13145", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(830)
    public void testEditTBL_D31() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_31);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200330);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_31, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000311", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13140", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(840)
    public void testEditTBL_D32() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_32);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_32, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000322", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13146", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(850)
    public void testEditTBL_D33() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_33);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_33, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000333", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13149", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(860)
    public void testEditTBL_D34() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_34);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_34, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000344", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13149", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(865)
    public void testEditTBL_D35() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo3_35);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo3_35, "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "23806000355", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13321", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13351", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13400", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(866)
    public void testEditTBL_D36() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000769");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000769", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000769", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13342", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13371", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(867)
    public void testEditTBL_D37() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000770");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000770", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000770", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13344", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13371", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(868)
    public void testEditTBL_D38() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000781");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "08", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000781", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000781", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13371", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(869)
    public void testEditTBL_D39() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000792");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000792", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000792", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13343", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13371", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(870)
    public void testEditTBL_D40() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000806");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.BLNK);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "00", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000806", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000806", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13371", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(871)
    public void testEditTBL_D41() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000817");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000817", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000817", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13371", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(872)
    public void testEditTBL_D42() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000828");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000828", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000828", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13371", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(873)
    public void testEditTBL_D43() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000839");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "03", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000839", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000839", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13340", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13351", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13371", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(874)
    public void testEditTBL_D44() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000840");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.BLNK);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "04", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000840", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000840", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13342", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13351", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13371", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(875)
    public void testEditTBL_D45() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000851");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "05", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000851", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000851", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13342", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13351", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13371", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(876)
    public void testEditTBL_D46() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000862");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000862", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000862", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13340", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13351", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13371", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(877)
    public void testEditTBL_D47() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000873");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = new ArrayList<>();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSY);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000873", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000873", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13142", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(878)
    public void testEditTBL_D48() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000020");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111565");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = new ArrayList<>();

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111565", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字２", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111565", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.TIGIN, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10042", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字２", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "13180", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ２", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ２", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13360", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");

    }

    @Test
    @TestOrder(879)
    public void testEditTBL_D49() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111576");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111576", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "円", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(1), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "1234567", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字１", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "【１２３】", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111576", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13363", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(880)
    public void testEditTBL_D50() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111587");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "08", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111587", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.USD, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "米ドル", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字２", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111587", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字２", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ２", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ２", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13363", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(881)
    public void testEditTBL_D51() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111598");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111598", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111598", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13363", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(882)
    public void testEditTBL_D52() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111602");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "00", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111602", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111602", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13362", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(883)
    public void testEditTBL_D53() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111613");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111613", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111613", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13362", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(884)
    public void testEditTBL_D54() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111624");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111624", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111624", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13362", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(885)
    public void testEditTBL_D55() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111635");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "03", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111635", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "10010", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111635", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "10020", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "10030", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "10040", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "13150", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "13170", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "13240", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "13250", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13148", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(886)
    public void testEditTBL_D56() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111646");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "04", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111646", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111646", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13146", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(887)
    public void testEditTBL_D57() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111657");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "05", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111657", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111657", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13150", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(888)
    public void testEditTBL_D58() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111668");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111668", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111668", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13146", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(889)
    public void testEditTBL_D59() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111679");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111679", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111679", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13146", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(890)
    public void testEditTBL_D60() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111680");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "08", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111680", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "11807111680", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "15049", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13152", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(891)
    public void testEditTBL_D61() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000183");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "08", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000183", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000183", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13311", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13320", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13330", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "13340", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "13350", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "13365", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(892)
    public void testEditTBL_D62() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000194");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();


        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000194", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000194", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "13310", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "13341", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "13350", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "13364", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(893)
    public void testEditTBL_D63() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        baseUserInfo.getUser().setUserId("Junit");

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000208");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "00", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000208", "証券番号");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.EUR, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(20000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "ユーロ", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getTsinyno(), "2345678", "通信先郵便番号");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr1kj(), "", "通信先住所１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr2kj(), "通信先住所２漢字２", "通信先住所２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTsinadr3kj(), "通信先住所３漢字２", "通信先住所３（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getShsnmkj(), "契約者名漢字４", "送付先名（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getTnknmissmsg(), "", "転換ミスメッセージ");
        exStringEquals(hokenSyoukenLst.get(0).getErrormsgcd(), "", "エラーメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSisyacd(), "111", "支社コード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrntousaadrmsgcd(), "", "同封通信欄当社住所メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDuhutusnrnsyono(), "17806000208", "同封通信欄証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getChannelcd(), C_Channelcd.BLNK, "チャネルコード");
        exStringEquals(hokenSyoukenLst.get(0).getDairitenmidasikbn(), "01", "代理店見出し区分");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm1kj(), "", "代理店名１（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getDrtennm2kj(), "", "代理店名２（漢字）");
        exStringEquals(hokenSyoukenLst.get(0).getAisatumsgcd(), "", "挨拶メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getCcmsgcd(), "", "コールセンターメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHskmsgcd(), "", "補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounymsgcd(), "11010", "保障内容メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getHosyounyhihknsyameikanji(), "被保険者名漢字４", "保障内容被保険者名（漢字）");

        exStringEquals(hokenSyoukenLst.get(0).getFstpmsgcd(), "", "初回Ｐご確認欄メッセージコード");
        exClassificationEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkeituuktype(), C_Tuukasyu.BLNK, "初回Ｐご確認欄払込保険料合計通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getFstphrkpkngkkei(), BizCurrency.valueOf(0), "初回Ｐご確認欄払込保険料合計");
        exStringEquals(hokenSyoukenLst.get(0).getFstponegaimsgcd(), "", "初回Ｐご確認欄お願いメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getDsmsgcd(), "", "スミセイダイレクトサービスメッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getToiawasesakihanyoumsgcd(), "", "問合せ先汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getAnnaihanyoumsgcd(), "", "案内汎用メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getKoujyosyoumeihskmsgcd(), "", "控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getNenkoujyosyoumeihskmsgcd(), "", "年間控除証明補足メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinKinou(), "EditSyoukenTbltest_editTBL", "業務用更新機能ＩＤ");
        exStringEquals(hokenSyoukenLst.get(0).getGyoumuKousinsyaId(), "Junit", "業務用更新者ＩＤ");

        exStringEquals(hokenSyoukenLst.get(0).getKyknmkn(), "ケイヤクシヤメイカナ４", "契約者名（カナ）");
        exStringEquals(hokenSyoukenLst.get(0).getHhknnmkn(), "ヒホケンシヤメイカナ４", "被保険者名（カナ）");
        exClassificationEquals(hokenSyoukenLst.get(0).getTantocd(), C_TantouCdKbn.DAIRITENJIMUKANRI, "担当コード");

        exStringEquals(hokenSyoukenLst.get(0).getStdstmmsgcd(), "13153", "指定代理請求特約説明欄メッセージコード");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg1(), "", "ご家族登録サービスメッセージコード１");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg2(), "", "ご家族登録サービスメッセージコード２");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg3(), "", "ご家族登録サービスメッセージコード３");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg4(), "", "ご家族登録サービスメッセージコード４");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg5(), "", "ご家族登録サービスメッセージコード５");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg6(), "", "ご家族登録サービスメッセージコード６");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg7(), "", "ご家族登録サービスメッセージコード７");
        exStringEquals(hokenSyoukenHukaInfo.getKzktourokuservicemsg8(), "", "ご家族登録サービスメッセージコード８");
    }

    @Test
    @TestOrder(897)
    public void testEditTBL_E1() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_1);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_1, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.KYKKANJIMEINASI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.KANJIADRNASI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_DNGNMEMOARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.STKNSETARI, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.KARIUKEKEIJOARI, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.DOUJITUSYOUKENFUKUSUUARI, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.DAIRITENMEIMOJISUUTYOUKA, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.YAKKANSASSIYUUSOU, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSiorino(), "123", "しおり番号");


        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(898)
    public void testEditTBL_E2() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000020");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_2);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_2, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.KYKKANJIMEINASI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.SBUKKANJIMEINASI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.KANJIADRNASI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.SBUKFUKUSUU, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_DNGNMEMOARI, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(12.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
        exStringEquals(hokenSyoukenLst.get(0).getSiorino(), "", "しおり番号");

    }

    @Test
    @TestOrder(899)
    public void testEditTBL_E3() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000030");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_3);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_3, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.KYKKANJIMEINASI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.SBUKKANJIMEINASI_FUKUSUU, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.STDRNINKANJIMEINASI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.KYKDRNINKANJIMEINASI, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.KANJIADRNASI, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.SBUKFUKUSUU, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.SBUKBNWARINASI, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.BLNK, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(0), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");


    }

    @Test
    @TestOrder(900)
    public void testEditTBL_E4() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000040");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_4);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_4, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.SBUKKANJIMEINASI_FUKUSUU, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.BLNK, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(0), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(1.1), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");


    }

    @Test
    @TestOrder(910)
    public void testEditTBL_E5() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000050");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_5);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.YENDTHNKHR_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.JIMU_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_5, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.KANJIADRNASI, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(110), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");


    }

    @Test
    @TestOrder(920)
    public void testEditTBL_E6() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_6);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_6, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(930)
    public void testEditTBL_E7() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_7);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.BLNK);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.BLNK);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_7, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(121.43), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");



        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
    }

    @Test
    @TestOrder(940)
    public void testEditTBL_E8() {

        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000080");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_8);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = null;



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey8, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_8, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");

        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "米ドル", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.BLNK, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(0), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(0), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.BLNK, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(0), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(0), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.BLNK, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(0), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(0), "その他内容欄目標到達割合");
        exClassificationEquals(hokenSyoukenLst.get(0).getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");
    }

    @Test
    @TestOrder(950)
    public void testEditTBL_E9() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_9);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey9, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_9, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(960)
    public void testEditTBL_E10() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_10);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey10, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_10, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(970)
    public void testEditTBL_E11() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_11);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey1, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_11, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(980)
    public void testEditTBL_E12() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_12);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_12, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(990)
    public void testEditTBL_E13() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_13);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_13, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(1000)
    public void testEditTBL_E14() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_14);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_14, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(1010)
    public void testEditTBL_E15() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_15);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey5, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_15, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(1020)
    public void testEditTBL_E16() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_16);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey6, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_16, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(1030)
    public void testEditTBL_E17() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_17);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey7, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_17, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(1040)
    public void testEditTBL_E18() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000060");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo4_18);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = null;

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);


        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey8, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo4_18, "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRKAKUNINUKE, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.TTDKTYUUI_ADRHUMEI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyransiteituuka(), "ユーロ", "その他内容欄指定通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuktype(), C_Tuukasyu.JPY, "その他内容欄入金通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukap(), BizCurrency.valueOf(10000), "その他内容欄入金通貨保険料");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrannykntuukasyu(), "円", "その他内容欄入金通貨");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranenkhrikmrate(), BizNumber.valueOf(0), "その他内容欄円貨払込特約レート");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranstigikwsrate(), BizNumber.valueOf(15.5), "その他内容欄指定外通貨払込特約レート");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuktype(), C_Tuukasyu.JPY, "その他内容欄基準金額通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngk(), BizCurrency.valueOf(11000), "その他内容欄基準金額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngkrate(), BizNumber.valueOf(50), "その他内容欄基準金額換算レート");
        exStringEquals(hokenSyoukenLst.get(0).getSonotanyrankjnkngktuuka(), "円", "その他内容欄基準金額通貨");
        exClassificationEquals(hokenSyoukenLst.get(0).getSonotanyranpentuktype(), C_Tuukasyu.JPY, "その他内容欄保険料円換算通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranpenknsngk(), BizCurrency.valueOf(11000), "その他内容欄保険料円換算額");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyranmkhwariai(), BizNumber.valueOf(1), "その他内容欄目標到達割合");

        exBizCalcbleEquals(hokenSyoukenLst.get(0).getSonotanyransjkkktusirrt(), BizNumber.valueOf(0), "その他内容欄市場価格調整用利率");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyourangaimsgcd(), "09200", "その他内容欄外メッセージコード");

    }

    @Test
    @TestOrder(1041)
    public void testEditTBL_E19() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000297");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);


        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000297", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSagyoukbn(), "1", "作業区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
    }

    @Test
    @TestOrder(1042)
    public void testEditTBL_E20() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000301");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.BLNK);


        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "00", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000301", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.YAKKANSASSIYUUSOU, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSagyoukbn(), "2", "作業区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.NONE, "被保険者代理人チラシ同封区分");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(1043)
    public void testEditTBL_E21() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000013");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);


        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.KANJIADRNASI, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSagyoukbn(), "1", "作業区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(1044)
    public void testEditTBL_E22() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000024");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.BLNK);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);
        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);


        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "02", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000024", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.YENDTHNKHRARI, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BETUTTDKUKTKARI, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSagyoukbn(), "1", "作業区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.NONE, "被保険者代理人チラシ同封区分");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.HONSYAKAISOU, "発送区分");
    }

    @Test
    @TestOrder(1044)
    public void testEditTBL_E23() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000035");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.BLNK);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);


        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "03", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000035", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSagyoukbn(), "1", "作業区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.NONE, "被保険者代理人チラシ同封区分");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.ARI, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.ARI, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
    }

    @Test
    @TestOrder(1045)
    public void testEditTBL_E24() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000046");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.BLNK);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);


        BizDate syoriYMD = BizDate.valueOf(20200330);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "04", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000046", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSagyoukbn(), "1", "作業区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.NONE, "被保険者代理人チラシ同封区分");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.NONE, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
    }

    @Test
    @TestOrder(1046)
    public void testEditTBL_E25() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000057");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);


        BizDate syoriYMD = BizDate.valueOf(20200331);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "05", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000057", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSagyoukbn(), "1", "作業区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.NONE, "被保険者代理人チラシ同封区分");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.ARI, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
    }

    @Test
    @TestOrder(1047)
    public void testEditTBL_E26() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000068");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.BLNK);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.JIMU_ARI);
        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);


        BizDate syoriYMD = BizDate.valueOf(20200401);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000068", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSagyoukbn(), "1", "作業区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.NONE, "被保険者代理人チラシ同封区分");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.ARI, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.ARI, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.NONE, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
    }

    @Test
    @TestOrder(1048)
    public void testEditTBL_E27() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = EditSyoukenTblNenkinMockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusinMockForHozen.SYORIPTN = EditSyoukenTblSyuusinMockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000070");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("11807111691");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SINKEIYAKUSAISAKUSEI);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setHnskariyuu1(C_HnskariyuuKbn.BLNK);
        editHokenSyoukenParam.setHnskariyuu2(C_HnskariyuuKbn.YENDTHNKHR_ARI);
        editHokenSyoukenParam.setTrkkzk1thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);
        editHokenSyoukenParam.setTrkkzk2thkk(C_TyokusouhtkekKbn.TYOKUSOUTSYGAI);


        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "11807111691", "証券番号");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分７");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分８");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分９");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１０");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１１");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１２");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１３");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１４");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１５");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１６");
        exClassificationEquals(hokenSyoukenLst.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.BLNK, "特殊処理内容区分１７");
        exStringEquals(hokenSyoukenLst.get(0).getSagyoukbn(), "1", "作業区分");
        exClassificationEquals(hokenSyoukenLst.get(0).getStdrsktirasidouhuukbn(), C_UmuKbn.ARI, "被保険者代理人チラシ同封区分");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn1(), C_UmuKbn.ARI, "ご家族登録チラシ１同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKzktirasidouhuukbn2(), C_UmuKbn.NONE, "ご家族登録チラシ２同封区分");
        exClassificationEquals(hokenSyoukenHukaInfo.getKykdairitirasidouhuukbn(), C_UmuKbn.ARI, "保険契約者代理人チラシ同封区分");

        exClassificationEquals(editSyoukenTbl.getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
    }

    @Test
    @TestOrder(1050)
    public void testEditTBL_F1() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = null;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo6_1);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey2, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo6_1, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getSonotanyranyensysnhkhnkymd(), BizDate.valueOf(20180424), "その他内容欄円建変更日");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyouranmsgcd1(), "09088", "その他内容欄外メッセージコード１");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertCalled(EditSyoukenTblNenkin.class, "editTBL");

    }

    @Test
    @TestOrder(1060)
    public void testEditTBL_F2() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = null;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo6_2);



        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();



        List<IT_KykSyouhn> tkKykSyouhnLst = null;



        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();



        IT_KykUkt sibouHenkan = null;



        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);



        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();



        List<IT_KykUkt> sibouhokenLst = null;



        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);


        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);



        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;



        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;



        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;



        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey3, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo6_2, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getSonotanyranyensysnhkhnkymd(), BizDate.valueOf(20180425), "その他内容欄円建変更日");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyouranmsgcd1(), "09089", "その他内容欄外メッセージコード１");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertCalled(EditSyoukenTblNenkin.class, "editTBL");

    }

    @Test
    @TestOrder(1070)
    public void testEditTBL_F3() {

        MockObjectManager.initialize();

        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        KeisanGaikakanzanMockForHozen.SYORIPTN = KeisanGaikakanzanMockForHozen.TESTPATTERN1;
        CalcJdkghkKngkMockForHozen.SYORIPTN  = CalcJdkghkKngkMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;

        EditSyoukenTblNenkinMockForHozen.SYORIPTN = null;
        EditSuiihyouTblNenkinMockForHozen.SYORIPTN = EditSuiihyouTblNenkinMockForHozen.TESTPATTERN1;
        EditSuiihyouTblMockForHozen.SYORIPTN = EditSuiihyouTblMockForHozen.TESTPATTERN1;


        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000010");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon(syoNo6_3);

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = null;

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();

        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = kykKihon.getKhTtdkTyuui();

        List<IT_KykUkt> sibouhokenLst = null;

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.ARI);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HUKA);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SIN;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.TYOKUSOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), kbnKey4, "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), syoNo6_3, "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getSonotanyranyensysnhkhnkymd(), BizDate.valueOf(20180425), "その他内容欄円建変更日");
        exStringEquals(hokenSyoukenLst.get(0).getStnaiyouranmsgcd1(), "09001", "その他内容欄外メッセージコード１");

        MockObjectManager.assertCalled(EditSyoukenTblNenkinMockForHozen.class, "editTBL");
        MockObjectManager.assertCalled(EditSyoukenTblNenkin.class, "editTBL");

    }

    @Test
    @TestOrder(1080)
    public void testEditTBL_F4() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN3;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        IT_Zennou zennou = new IT_Zennou();
        zennou.setKbnkey("05");
        zennou.setSyono("17806000459");
        zennou.setZennoukaisiymd(BizDate.valueOf(20210101));
        zennou.setRenno(1);

        List<IT_Zennou> zennousList = new ArrayList<IT_Zennou>();
        zennousList.add(zennou);

        IT_AnsyuKihon ansyuKihon = new IT_AnsyuKihon();
        ansyuKihon.setZennous(zennousList);

        khozenCommonParam.setSikibetuKey("10000000000000090");
        khozenCommonParam.setBatchAnsyuKihon(ansyuKihon);

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000459");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "05", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000459", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), null, "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), null, "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), null, "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), null, "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), null, "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), null, "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), null, "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), null, "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), null, "第１死亡保険金額年単位応当年月日１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s01(), BizCurrency.valueOf(11, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s02(), BizCurrency.valueOf(0), "第１死亡保険金額０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s03(), BizCurrency.valueOf(0), "第１死亡保険金額０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s04(), BizCurrency.valueOf(0), "第１死亡保険金額０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s05(), BizCurrency.valueOf(0), "第１死亡保険金額０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype01(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype02(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype03(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype01(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype02(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype03(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka02(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun01(), BizCurrency.valueOf(15), "第１死亡保険金額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun02(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu01(), BizCurrency.valueOf(16), "第１死亡保険金額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu02(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０５");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exStringEquals(hokenSyoukenHukaInfo.getKbnkey(), "05", "区分キー");
        exStringEquals(hokenSyoukenHukaInfo.getSyono(), "17806000459", "証券番号");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyentype(), C_Tuukasyu.JPY, "第１死亡時受取額（円貨）通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk01(), BizCurrency.valueOf(12, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype01(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk01(),BizCurrency.valueOf(13, BizCurrencyTypes.EURO), "第１死亡時受取額０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype01(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun01(), BizCurrency.valueOf(15), "第１死亡時受取額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu01(), BizCurrency.valueOf(16), "第１死亡時受取額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk02(), BizCurrency.valueOf(0), "第１前納残高０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype02(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk02(),BizCurrency.valueOf(0), "第１死亡時受取額０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype02(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka02(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun02(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu02(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk03(), BizCurrency.valueOf(0), "第１前納残高０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype03(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk03(),BizCurrency.valueOf(0), "第１死亡時受取額０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype03(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk04(), BizCurrency.valueOf(0), "第１前納残高０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype04(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk04(),BizCurrency.valueOf(0), "第１死亡時受取額０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype04(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk05(), BizCurrency.valueOf(0), "第１前納残高０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype05(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk05(),BizCurrency.valueOf(0), "第１死亡時受取額０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype05(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０５");


        IT_Zennou pZennou = (IT_Zennou)MockObjectManager.getArgument(EditSyoukenTblSyuusin3MockForHozen.class, "editTBL", 0, 17);
        exStringEquals(pZennou.getKbnkey(), "05", "区分キー");
        exStringEquals(pZennou.getSyono(), "17806000459", "証券番号");
        exDateEquals(pZennou.getZennoukaisiymd(), BizDate.valueOf(20210101), "前納開始年月日");
        exNumericEquals(pZennou.getRenno(), 1, "連番");
    }

    @Test
    @TestOrder(1080)
    public void testEditTBL_F5() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN4;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000460");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000460", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), BizDate.valueOf(20200201), "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), null, "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), null, "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), null, "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), null, "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), null, "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), null, "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), null, "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), null, "第１死亡保険金額年単位応当年月日１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s01(), BizCurrency.valueOf(11, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s02(), BizCurrency.valueOf(21, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s03(), BizCurrency.valueOf(0), "第１死亡保険金額０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s04(), BizCurrency.valueOf(0), "第１死亡保険金額０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s05(), BizCurrency.valueOf(0), "第１死亡保険金額０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype01(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype02(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype03(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype01(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype02(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype03(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka02(), BizCurrency.valueOf(24, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun01(), BizCurrency.valueOf(15), "第１死亡保険金額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun02(), BizCurrency.valueOf(25), "第１死亡保険金額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu01(), BizCurrency.valueOf(16), "第１死亡保険金額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu02(), BizCurrency.valueOf(26), "第１死亡保険金額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０５");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exStringEquals(hokenSyoukenHukaInfo.getKbnkey(), "06", "区分キー");
        exStringEquals(hokenSyoukenHukaInfo.getSyono(), "17806000460", "証券番号");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyentype(), C_Tuukasyu.JPY, "第１死亡時受取額（円貨）通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk01(), BizCurrency.valueOf(12, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype01(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk01(),BizCurrency.valueOf(13, BizCurrencyTypes.EURO), "第１死亡時受取額０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype01(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun01(), BizCurrency.valueOf(15), "第１死亡時受取額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu01(), BizCurrency.valueOf(16), "第１死亡時受取額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk02(), BizCurrency.valueOf(22, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype02(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk02(),BizCurrency.valueOf(23, BizCurrencyTypes.EURO), "第１死亡時受取額０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype02(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka02(), BizCurrency.valueOf(24, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun02(), BizCurrency.valueOf(25), "第１死亡時受取額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu02(), BizCurrency.valueOf(26), "第１死亡時受取額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk03(), BizCurrency.valueOf(0), "第１前納残高０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype03(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk03(),BizCurrency.valueOf(0), "第１死亡時受取額０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype03(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk04(), BizCurrency.valueOf(0), "第１前納残高０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype04(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk04(),BizCurrency.valueOf(0), "第１死亡時受取額０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype04(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk05(), BizCurrency.valueOf(0), "第１前納残高０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype05(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk05(),BizCurrency.valueOf(0), "第１死亡時受取額０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype05(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０５");

        IT_Zennou pZennou = (IT_Zennou)MockObjectManager.getArgument(EditSyoukenTblSyuusin3MockForHozen.class, "editTBL", 0, 17);
        exStringEquals(pZennou.getKbnkey(), "06", "区分キー");
        exStringEquals(pZennou.getSyono(), "17806000460", "証券番号");
        exDateEquals(pZennou.getZennoukaisiymd(), BizDate.valueOf(20180910), "前納開始年月日");
        exNumericEquals(pZennou.getRenno(), 1, "連番");
    }

    @Test
    @TestOrder(1090)
    public void testEditTBL_F6() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN5;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000471");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000471", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), BizDate.valueOf(20200201), "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), BizDate.valueOf(20200301), "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), null, "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), null, "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), null, "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), null, "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), null, "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), null, "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), null, "第１死亡保険金額年単位応当年月日１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s01(), BizCurrency.valueOf(11, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s02(), BizCurrency.valueOf(21, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s03(), BizCurrency.valueOf(31, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s04(), BizCurrency.valueOf(0), "第１死亡保険金額０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s05(), BizCurrency.valueOf(0), "第１死亡保険金額０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype01(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype02(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype03(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype01(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype02(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype03(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka02(), BizCurrency.valueOf(24, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka03(), BizCurrency.valueOf(34, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun01(), BizCurrency.valueOf(15), "第１死亡保険金額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun02(), BizCurrency.valueOf(25), "第１死亡保険金額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun03(), BizCurrency.valueOf(35), "第１死亡保険金額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu01(), BizCurrency.valueOf(16), "第１死亡保険金額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu02(), BizCurrency.valueOf(26), "第１死亡保険金額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu03(), BizCurrency.valueOf(36), "第１死亡保険金額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０５");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exStringEquals(hokenSyoukenHukaInfo.getKbnkey(), "07", "区分キー");
        exStringEquals(hokenSyoukenHukaInfo.getSyono(), "17806000471", "証券番号");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyentype(), C_Tuukasyu.JPY, "第１死亡時受取額（円貨）通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk01(), BizCurrency.valueOf(12, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype01(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk01(),BizCurrency.valueOf(13, BizCurrencyTypes.EURO), "第１死亡時受取額０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype01(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun01(), BizCurrency.valueOf(15), "第１死亡時受取額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu01(), BizCurrency.valueOf(16), "第１死亡時受取額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk02(), BizCurrency.valueOf(22, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype02(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk02(),BizCurrency.valueOf(23, BizCurrencyTypes.EURO), "第１死亡時受取額０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype02(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka02(), BizCurrency.valueOf(24, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun02(), BizCurrency.valueOf(25), "第１死亡時受取額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu02(), BizCurrency.valueOf(26), "第１死亡時受取額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk03(), BizCurrency.valueOf(32, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype03(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk03(),BizCurrency.valueOf(33, BizCurrencyTypes.EURO), "第１死亡時受取額０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype03(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka03(), BizCurrency.valueOf(34, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun03(), BizCurrency.valueOf(35), "第１死亡時受取額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu03(), BizCurrency.valueOf(36), "第１死亡時受取額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk04(), BizCurrency.valueOf(0), "第１前納残高０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype04(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk04(),BizCurrency.valueOf(0), "第１死亡時受取額０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype04(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk05(), BizCurrency.valueOf(0), "第１前納残高０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype05(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk05(),BizCurrency.valueOf(0), "第１死亡時受取額０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype05(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０５");
    }
    @Test
    @TestOrder(1100)
    public void testEditTBL_F7() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN6;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000482");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "08", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000482", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), BizDate.valueOf(20200201), "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), BizDate.valueOf(20200301), "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), BizDate.valueOf(20200401), "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), null, "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), null, "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), null, "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), null, "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), null, "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), null, "第１死亡保険金額年単位応当年月日１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s01(), BizCurrency.valueOf(11, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s02(), BizCurrency.valueOf(21, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s03(), BizCurrency.valueOf(31, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s04(), BizCurrency.valueOf(41, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s05(), BizCurrency.valueOf(0), "第１死亡保険金額０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype01(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype02(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype03(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype04(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype01(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype02(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype03(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype04(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka02(), BizCurrency.valueOf(24, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka03(), BizCurrency.valueOf(34, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka04(), BizCurrency.valueOf(44, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun01(), BizCurrency.valueOf(15), "第１死亡保険金額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun02(), BizCurrency.valueOf(25), "第１死亡保険金額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun03(), BizCurrency.valueOf(35), "第１死亡保険金額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun04(), BizCurrency.valueOf(45), "第１死亡保険金額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu01(), BizCurrency.valueOf(16), "第１死亡保険金額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu02(), BizCurrency.valueOf(26), "第１死亡保険金額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu03(), BizCurrency.valueOf(36), "第１死亡保険金額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu04(), BizCurrency.valueOf(46), "第１死亡保険金額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０５");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exStringEquals(hokenSyoukenHukaInfo.getKbnkey(), "08", "区分キー");
        exStringEquals(hokenSyoukenHukaInfo.getSyono(), "17806000482", "証券番号");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyentype(), C_Tuukasyu.JPY, "第１死亡時受取額（円貨）通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk01(), BizCurrency.valueOf(12, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype01(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk01(),BizCurrency.valueOf(13, BizCurrencyTypes.EURO), "第１死亡時受取額０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype01(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun01(), BizCurrency.valueOf(15), "第１死亡時受取額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu01(), BizCurrency.valueOf(16), "第１死亡時受取額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk02(), BizCurrency.valueOf(22, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype02(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk02(),BizCurrency.valueOf(23, BizCurrencyTypes.EURO), "第１死亡時受取額０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype02(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka02(), BizCurrency.valueOf(24, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun02(), BizCurrency.valueOf(25), "第１死亡時受取額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu02(), BizCurrency.valueOf(26), "第１死亡時受取額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk03(), BizCurrency.valueOf(32, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype03(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk03(),BizCurrency.valueOf(33, BizCurrencyTypes.EURO), "第１死亡時受取額０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype03(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka03(), BizCurrency.valueOf(34, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun03(), BizCurrency.valueOf(35), "第１死亡時受取額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu03(), BizCurrency.valueOf(36), "第１死亡時受取額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk04(), BizCurrency.valueOf(42, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype04(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk04(),BizCurrency.valueOf(43, BizCurrencyTypes.EURO), "第１死亡時受取額０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype04(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka04(), BizCurrency.valueOf(44, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun04(), BizCurrency.valueOf(45), "第１死亡時受取額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu04(), BizCurrency.valueOf(46), "第１死亡時受取額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk05(), BizCurrency.valueOf(0), "第１前納残高０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype05(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk05(),BizCurrency.valueOf(0), "第１死亡時受取額０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype05(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０５");
    }

    @Test
    @TestOrder(1110)
    public void testEditTBL_F8() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN7;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000493");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000493", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), BizDate.valueOf(20200201), "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), BizDate.valueOf(20200301), "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), BizDate.valueOf(20200401), "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), BizDate.valueOf(20200501), "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), null, "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), null, "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), null, "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), null, "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), null, "第１死亡保険金額年単位応当年月日１０");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s01(), BizCurrency.valueOf(11, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s02(), BizCurrency.valueOf(21, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s03(), BizCurrency.valueOf(31, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s04(), BizCurrency.valueOf(41, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s05(), BizCurrency.valueOf(51, BizCurrencyTypes.DOLLAR), "第１死亡保険金額０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype01(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype02(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype03(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype04(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype05(), C_Tuukasyu.USD, "第１死亡保険金額通貨タイプ０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype01(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype02(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype03(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype04(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype05(), C_Tuukasyu.JPY, "第１死亡保険金額（円貨）通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka02(), BizCurrency.valueOf(24, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka03(), BizCurrency.valueOf(34, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka04(), BizCurrency.valueOf(44, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka05(), BizCurrency.valueOf(54, BizCurrencyTypes.MANYEN), "第１死亡保険金額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun01(), BizCurrency.valueOf(15), "第１死亡保険金額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun02(), BizCurrency.valueOf(25), "第１死亡保険金額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun03(), BizCurrency.valueOf(35), "第１死亡保険金額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun04(), BizCurrency.valueOf(45), "第１死亡保険金額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun05(), BizCurrency.valueOf(55), "第１死亡保険金額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu01(), BizCurrency.valueOf(16), "第１死亡保険金額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu02(), BizCurrency.valueOf(26), "第１死亡保険金額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu03(), BizCurrency.valueOf(36), "第１死亡保険金額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu04(), BizCurrency.valueOf(46), "第１死亡保険金額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu05(), BizCurrency.valueOf(56), "第１死亡保険金額（円貨）（円安）０５");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exStringEquals(hokenSyoukenHukaInfo.getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenHukaInfo.getSyono(), "17806000493", "証券番号");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyentype(), C_Tuukasyu.JPY, "第１死亡時受取額（円貨）通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk01(), BizCurrency.valueOf(12, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype01(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk01(),BizCurrency.valueOf(13, BizCurrencyTypes.EURO), "第１死亡時受取額０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype01(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka01(), BizCurrency.valueOf(14, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun01(), BizCurrency.valueOf(15), "第１死亡時受取額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu01(), BizCurrency.valueOf(16), "第１死亡時受取額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk02(), BizCurrency.valueOf(22, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype02(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk02(),BizCurrency.valueOf(23, BizCurrencyTypes.EURO), "第１死亡時受取額０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype02(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka02(), BizCurrency.valueOf(24, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun02(), BizCurrency.valueOf(25), "第１死亡時受取額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu02(), BizCurrency.valueOf(26), "第１死亡時受取額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk03(), BizCurrency.valueOf(32, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype03(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk03(),BizCurrency.valueOf(33, BizCurrencyTypes.EURO), "第１死亡時受取額０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype03(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka03(), BizCurrency.valueOf(34, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun03(), BizCurrency.valueOf(35), "第１死亡時受取額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu03(), BizCurrency.valueOf(36), "第１死亡時受取額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk04(), BizCurrency.valueOf(42, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype04(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk04(),BizCurrency.valueOf(43, BizCurrencyTypes.EURO), "第１死亡時受取額０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype04(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka04(), BizCurrency.valueOf(44, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun04(), BizCurrency.valueOf(45), "第１死亡時受取額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu04(), BizCurrency.valueOf(46), "第１死亡時受取額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk05(), BizCurrency.valueOf(52, BizCurrencyTypes.AU_DOLLAR), "第１前納残高０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype05(), C_Tuukasyu.AUD, "第１前納残高通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk05(),BizCurrency.valueOf(53, BizCurrencyTypes.EURO), "第１死亡時受取額０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype05(), C_Tuukasyu.EUR, "第１死亡時受取額通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka05(), BizCurrency.valueOf(54, BizCurrencyTypes.MANYEN), "第１死亡時受取額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun05(), BizCurrency.valueOf(55), "第１死亡時受取額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu05(), BizCurrency.valueOf(56), "第１死亡時受取額（円貨）（円安）０５");
    }

    @Test
    @TestOrder(1120)
    public void testEditTBL_F9() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN1;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000507");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "00", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000507", "証券番号");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s01(), BizCurrency.valueOf(0), "第１死亡保険金額０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s02(), BizCurrency.valueOf(0), "第１死亡保険金額０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s03(), BizCurrency.valueOf(0), "第１死亡保険金額０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s04(), BizCurrency.valueOf(0), "第１死亡保険金額０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s05(), BizCurrency.valueOf(0), "第１死亡保険金額０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype01(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype02(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype03(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype01(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype02(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype03(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka01(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka02(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun01(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun02(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu01(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu02(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０５");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exStringEquals(hokenSyoukenHukaInfo.getKbnkey(), "00", "区分キー");
        exStringEquals(hokenSyoukenHukaInfo.getSyono(), "17806000507", "証券番号");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyentype(), C_Tuukasyu.BLNK, "第１死亡時受取額（円貨）通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk01(), BizCurrency.valueOf(0), "第１前納残高０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype01(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk01(),BizCurrency.valueOf(0), "第１死亡時受取額０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype01(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka01(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun01(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu01(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk02(), BizCurrency.valueOf(0), "第１前納残高０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype02(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk02(),BizCurrency.valueOf(0), "第１死亡時受取額０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype02(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka02(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun02(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu02(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk03(), BizCurrency.valueOf(0), "第１前納残高０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype03(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk03(),BizCurrency.valueOf(0), "第１死亡時受取額０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype03(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk04(), BizCurrency.valueOf(0), "第１前納残高０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype04(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk04(),BizCurrency.valueOf(0), "第１死亡時受取額０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype04(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk05(), BizCurrency.valueOf(0), "第１前納残高０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype05(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk05(),BizCurrency.valueOf(0), "第１死亡時受取額０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype05(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０５");
    }

    @Test
    @TestOrder(1130)
    public void testEditTBL_F10() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN2;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000518");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000518", "証券番号");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s01(), BizCurrency.valueOf(0), "第１死亡保険金額０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s02(), BizCurrency.valueOf(0), "第１死亡保険金額０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s03(), BizCurrency.valueOf(0), "第１死亡保険金額０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s04(), BizCurrency.valueOf(0), "第１死亡保険金額０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1s05(), BizCurrency.valueOf(0), "第１死亡保険金額０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype01(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype02(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype03(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1stuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額通貨タイプ０５");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype01(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０１");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype02(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０２");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype03(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０３");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype04(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０４");
        exClassificationEquals(hokenSyoukenLst.get(0).getDai1syentuuktype05(), C_Tuukasyu.BLNK, "第１死亡保険金額（円貨）通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka01(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka02(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyendaka05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun01(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun02(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenkijyun05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu01(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu02(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu03(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu04(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenLst.get(0).getDai1syenyenyasu05(), BizCurrency.valueOf(0), "第１死亡保険金額（円貨）（円安）０５");

        IT_HokenSyoukenHukaInfo hokenSyoukenHukaInfo = hokenSyoukenLst.get(0).getHokenSyoukenHukaInfo();

        exStringEquals(hokenSyoukenHukaInfo.getKbnkey(), "01", "区分キー");
        exStringEquals(hokenSyoukenHukaInfo.getSyono(), "17806000518", "証券番号");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyentype(), C_Tuukasyu.BLNK, "第１死亡時受取額（円貨）通貨タイプ");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk01(), BizCurrency.valueOf(0), "第１前納残高０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype01(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk01(),BizCurrency.valueOf(0), "第１死亡時受取額０１");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype01(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka01(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun01(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu01(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０１");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk02(), BizCurrency.valueOf(0), "第１前納残高０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype02(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk02(),BizCurrency.valueOf(0), "第１死亡時受取額０２");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype02(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka02(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun02(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu02(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０２");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk03(), BizCurrency.valueOf(0), "第１前納残高０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype03(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk03(),BizCurrency.valueOf(0), "第１死亡時受取額０３");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype03(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu03(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０３");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk04(), BizCurrency.valueOf(0), "第１前納残高０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype04(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk04(),BizCurrency.valueOf(0), "第１死亡時受取額０４");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype04(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu04(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０４");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1zennouzndk05(), BizCurrency.valueOf(0), "第１前納残高０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1zennouzndktype05(), C_Tuukasyu.BLNK, "第１前納残高通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgk05(),BizCurrency.valueOf(0), "第１死亡時受取額０５");
        exClassificationEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgktype05(), C_Tuukasyu.BLNK, "第１死亡時受取額通貨タイプ０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyendaka05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円高）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenkijyun05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（中央値）０５");
        exBizCalcbleEquals(hokenSyoukenHukaInfo.getDai1sbjiuktgkyenyasu05(), BizCurrency.valueOf(0), "第１死亡時受取額（円貨）（円安）０５");
    }

    @Test
    @TestOrder(1140)
    public void testEditTBL_F11() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN8;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000493");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000493", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), BizDate.valueOf(20200201), "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), BizDate.valueOf(20200301), "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), BizDate.valueOf(20200401), "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), BizDate.valueOf(20200501), "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), BizDate.valueOf(20200601), "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), null, "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), null, "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), null, "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), null, "第１死亡保険金額年単位応当年月日１０");
    }

    @Test
    @TestOrder(1150)
    public void testEditTBL_F12() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN9;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000493");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000493", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), BizDate.valueOf(20200201), "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), BizDate.valueOf(20200301), "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), BizDate.valueOf(20200401), "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), BizDate.valueOf(20200501), "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), BizDate.valueOf(20200601), "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), BizDate.valueOf(20200701), "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), null, "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), null, "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), null, "第１死亡保険金額年単位応当年月日１０");
    }

    @Test
    @TestOrder(1160)
    public void testEditTBL_F13() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN10;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000493");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000493", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), BizDate.valueOf(20200201), "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), BizDate.valueOf(20200301), "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), BizDate.valueOf(20200401), "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), BizDate.valueOf(20200501), "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), BizDate.valueOf(20200601), "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), BizDate.valueOf(20200701), "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), BizDate.valueOf(20200801), "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), null, "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), null, "第１死亡保険金額年単位応当年月日１０");
    }

    @Test
    @TestOrder(1170)
    public void testEditTBL_F14() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN11;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000493");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000493", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), BizDate.valueOf(20200201), "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), BizDate.valueOf(20200301), "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), BizDate.valueOf(20200401), "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), BizDate.valueOf(20200501), "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), BizDate.valueOf(20200601), "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), BizDate.valueOf(20200701), "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), BizDate.valueOf(20200801), "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), BizDate.valueOf(20200901), "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), null, "第１死亡保険金額年単位応当年月日１０");
    }

    @Test
    @TestOrder(1180)
    public void testEditTBL_F15() {
        MockObjectManager.initialize();
        KeisanKijyungkMockForHozen.SYORIPTN = KeisanKijyungkMockForHozen.TESTPATTERN2;
        EditSyoukenTblNenkin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSuiihyouTblNenkin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin2MockForHozen.TESTPATTERN1;
        EditSyoukenTblSyuusin3MockForHozen.SYORIPTN = EditSyoukenTblSyuusin3MockForHozen.TESTPATTERN1;
        EditSuiihyouTblSyuusin3MockForHozen.SYORIPTN = EditSuiihyouTblSyuusin3MockForHozen.TESTPATTERN12;

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        khozenCommonParam.setSikibetuKey("10000000000000090");

        IT_KykKihon kykKihon = hozenDomManager.getKykKihon("17806000493");

        List<IT_KykSyouhn> syuKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.SYU);

        IT_KykSonotaTkyk kykSonotaTkyk = kykKihon.getKykSonotaTkyk();

        List<IT_KykSyouhn> tkKykSyouhnLst = kykKihon.getKykSyouhnsBySyutkkbn(C_SyutkKbn.TK);

        IT_SyouhnTokujou syouhnTokujou = null;

        IT_KykSya kykSya = kykKihon.getKykSya();

        IT_HhknSya hhknSya = kykKihon.getHhknSya();
        IT_KykUkt sibouHenkan = null;

        IT_KykUkt siteiDairi = kykKihon.getKykUktsByUktsyukbnUktsyurenno(C_UktsyuKbn.STDRSK, 1);

        List<IT_KykDairiten> kykDairitenLst = kykKihon.getKykDairitens();

        IT_KhTtdkTyuui khTtdkTyuui = null;

        List<IT_KykUkt> sibouhokenLst = kykKihon.getKykUktsByUktsyukbn(C_UktsyuKbn.SBUKT);

        List<IT_NyknJissekiRireki> nyknJissekiRireki = kykKihon.getNyknJissekiRirekis();

        editHokenSyoukenParam.setSyoukenSaihk(C_SyoukensaihkKbn.SYOUKENSAIHAKKOU);
        editHokenSyoukenParam.setStdrsktkyhnkKbn(C_StdrsktkyhnkKbn.HENKOU);
        editHokenSyoukenParam.setCalckijyunYMD(BizDate.valueOf(20170901));
        editHokenSyoukenParam.setKariukeUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setHukusuuUmu(C_UmuKbn.NONE);
        editHokenSyoukenParam.setInsizeiShryouhi(C_InsizeiShryouhiKbn.YOU);

        BizDate syoriYMD = BizDate.valueOf(20170815);

        C_SinsaihkKbn sinsaihkKbn = C_SinsaihkKbn.SAI;

        C_TetudukisyuKbn tetudukisyuKbn = C_TetudukisyuKbn.KAIYAKU;

        C_HassouKbn hassouKbn = C_HassouKbn.HONSYAKAISOU;

        editSyoukenTbl.editTBL(khozenCommonParam, kykKihon, syuKykSyouhnLst, kykSonotaTkyk,
            tkKykSyouhnLst, syouhnTokujou, kykSya, hhknSya, sibouHenkan, siteiDairi, kykDairitenLst, khTtdkTyuui,
            sibouhokenLst, nyknJissekiRireki, editHokenSyoukenParam, syoriYMD, sinsaihkKbn, tetudukisyuKbn, hassouKbn);

        List<IT_HokenSyouken> hokenSyoukenLst = kykKihon.getHokenSyoukens();
        exStringEquals(hokenSyoukenLst.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(hokenSyoukenLst.get(0).getSyono(), "17806000493", "証券番号");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd01(), BizDate.valueOf(20200101), "第１死亡保険金額年単位応当年月日０１");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd02(), BizDate.valueOf(20200201), "第１死亡保険金額年単位応当年月日０２");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd03(), BizDate.valueOf(20200301), "第１死亡保険金額年単位応当年月日０３");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd04(), BizDate.valueOf(20200401), "第１死亡保険金額年単位応当年月日０４");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd05(), BizDate.valueOf(20200501), "第１死亡保険金額年単位応当年月日０５");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd06(), BizDate.valueOf(20200601), "第１死亡保険金額年単位応当年月日０６");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd07(), BizDate.valueOf(20200701), "第１死亡保険金額年単位応当年月日０７");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd08(), BizDate.valueOf(20200801), "第１死亡保険金額年単位応当年月日０８");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd09(), BizDate.valueOf(20200901), "第１死亡保険金額年単位応当年月日０９");
        exDateEquals(hokenSyoukenLst.get(0).getDai1sibousnenoutouymd10(), BizDate.valueOf(20201001), "第１死亡保険金額年単位応当年月日１０");
    }
}