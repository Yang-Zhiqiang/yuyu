package yuyu.common.hozen.khcommon;

import static org.junit.Assert.*;
import static yuyu.testinfr.YuyuFunctionTestUtil.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.transaction.Transactional;

import jp.co.dgic.testing.common.virtualmock.MockObjectManager;
import jp.co.slcs.swak.core.inject.SWAKInjector;
import jp.co.slcs.swak.date.BizDate;
import jp.co.slcs.swak.date.BizDateY;
import jp.co.slcs.swak.date.BizDateYM;
import jp.co.slcs.swak.number.BizCurrency;
import jp.co.slcs.swak.number.BizNumber;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import yuyu.app.base.ref.TestDataMaker;
import yuyu.def.classification.*;
import yuyu.def.db.entity.AS_Kinou;
import yuyu.def.db.entity.HT_BAK_SmbcStyKanri;
import yuyu.def.db.entity.IT_BAK_AnsyuCreditCard;
import yuyu.def.db.entity.IT_BAK_AnsyuKihon;
import yuyu.def.db.entity.IT_BAK_AnsyuRireki;
import yuyu.def.db.entity.IT_BAK_CreditCard;
import yuyu.def.db.entity.IT_BAK_CreditCardInfo;
import yuyu.def.db.entity.IT_BAK_DattaiUktk;
import yuyu.def.db.entity.IT_BAK_FatcaInfo;
import yuyu.def.db.entity.IT_BAK_HengakuCf;
import yuyu.def.db.entity.IT_BAK_HengakuUnit;
import yuyu.def.db.entity.IT_BAK_HengakuUnitRireki;
import yuyu.def.db.entity.IT_BAK_HhknSya;
import yuyu.def.db.entity.IT_BAK_HokenSyouken;
import yuyu.def.db.entity.IT_BAK_Kariukekin;
import yuyu.def.db.entity.IT_BAK_KhDenpyoData;
import yuyu.def.db.entity.IT_BAK_KhDshrTuki;
import yuyu.def.db.entity.IT_BAK_KhFBSoukinData;
import yuyu.def.db.entity.IT_BAK_KhGaikaFBSoukinData;
import yuyu.def.db.entity.IT_BAK_KhHaitouKanri;
import yuyu.def.db.entity.IT_BAK_KhHenkouRireki;
import yuyu.def.db.entity.IT_BAK_KhHenkouUktk;
import yuyu.def.db.entity.IT_BAK_KhHenkouUktkKaiyaku;
import yuyu.def.db.entity.IT_BAK_KhHenkouUktkYendtHnk;
import yuyu.def.db.entity.IT_BAK_KhLincSousinInfo;
import yuyu.def.db.entity.IT_BAK_KhShrRireki;
import yuyu.def.db.entity.IT_BAK_KhShrRirekiDetail;
import yuyu.def.db.entity.IT_BAK_KhSntkInfoTouroku;
import yuyu.def.db.entity.IT_BAK_KhTtdkRireki;
import yuyu.def.db.entity.IT_BAK_KhTtdkTyuui;
import yuyu.def.db.entity.IT_BAK_KhTumitateDKanri;
import yuyu.def.db.entity.IT_BAK_KihrkmpSeisanRireki;
import yuyu.def.db.entity.IT_BAK_KoujyoSym;
import yuyu.def.db.entity.IT_BAK_KoujyoSymKanri;
import yuyu.def.db.entity.IT_BAK_KoujyoSymNaiyou;
import yuyu.def.db.entity.IT_BAK_KoujyoSymNaiyouD;
import yuyu.def.db.entity.IT_BAK_Kouza;
import yuyu.def.db.entity.IT_BAK_KykDairiten;
import yuyu.def.db.entity.IT_BAK_KykKihon;
import yuyu.def.db.entity.IT_BAK_KykSonotaTkyk;
import yuyu.def.db.entity.IT_BAK_KykSya;
import yuyu.def.db.entity.IT_BAK_KykSyouhn;
import yuyu.def.db.entity.IT_BAK_KykSyouhnRireki;
import yuyu.def.db.entity.IT_BAK_KykUkt;
import yuyu.def.db.entity.IT_BAK_NyknJissekiRireki;
import yuyu.def.db.entity.IT_BAK_NyuukinKakusyouData;
import yuyu.def.db.entity.IT_BAK_Suiihyou;
import yuyu.def.db.entity.IT_BAK_SyouhnTokujou;
import yuyu.def.db.entity.IT_BAK_SyouhnTokujouRireki;
import yuyu.def.db.entity.IT_BAK_SyuunouHenknRireki;
import yuyu.def.db.entity.IT_BAK_TeikikinKouza;
import yuyu.def.db.entity.IT_BAK_Tesuuryou;
import yuyu.def.db.entity.IT_BAK_TesuuryouSyouhn;
import yuyu.def.db.entity.IT_BAK_TesuuryouSyouhnRireki;
import yuyu.def.db.entity.IT_BAK_Tokusin;
import yuyu.def.db.entity.IT_BAK_TrkKzk;
import yuyu.def.db.entity.IT_BAK_TtdkKan;
import yuyu.def.db.entity.IT_BAK_YykIdouAnsyuCreditCard;
import yuyu.def.db.entity.IT_BAK_YykIdouNaiyoHrhnk;
import yuyu.def.db.entity.IT_BAK_YykIdouUktk;
import yuyu.def.hozen.manager.HozenDomManager;
import yuyu.def.sinkeiyaku.manager.SinkeiyakuDomManager;
import yuyu.testinfr.OrderedRunner;
import yuyu.testinfr.TestOrder;

/**
 * {@link TableMaintenanceUtil#}クラスに含まれる全メソッドの、テストケースをまとめて実施するクラスです。<br />
 */
@RunWith(OrderedRunner.class)
public class TableMaintenanceUtilTest_backUp {

    private IT_BAK_KykKihon bAK_KykKihon;

    private IT_BAK_AnsyuKihon bAK_AnsyuKihon;

    private List<IT_BAK_KhDenpyoData> bAK_KhDenpyoData;

    private List<IT_BAK_KhFBSoukinData> bAK_KhFBSoukinData;

    private List<IT_BAK_KhGaikaFBSoukinData> bAK_KhGaikaFBSoukinData;

    private List<IT_BAK_KhSntkInfoTouroku> bAK_KhSntkInfoTouroku;

    private List<HT_BAK_SmbcStyKanri> bAK_SmbcStyKanri;

    private List<IT_BAK_KhHenkouUktk> bAK_KhHenkouUktk;

    private List<IT_BAK_KhHaitouKanri> bAK_KhHaitouKanri;

    private List<IT_BAK_KhTumitateDKanri> bAK_KhTumitateDKanri;

    private List<IT_BAK_NyuukinKakusyouData> bAK_NyuukinKakusyouData;

    private List<IT_BAK_KhDshrTuki> bAK_KhDshrTuki;

    @Inject
    private TableMaintenanceUtil tableMaintenanceUtil;

    @Inject
    private AS_Kinou kinou;


    private final static String fileName = "UT-SP_単体テスト仕様書（共通）_テーブルメンテナンスユーティリティ";

    private final static String sheetName = "INデータ";

    @BeforeClass
    @Transactional
    public static void insertTestData() {
        try {
            TestDataMaker testDataMaker = new TestDataMaker();
            HashMap<String, Map<String, List<Map<String, String>>>> testDataAndTblMap;
            testDataAndTblMap = testDataMaker.getInData(TableMaintenanceUtilTest_backUp.class, fileName, sheetName);
            testDataMaker.insDataByDataId("データ001", testDataAndTblMap);
        } catch (Exception e) {
            e.printStackTrace();
        }}

    @AfterClass
    @Transactional
    public static void deleteTestData() {
        MockObjectManager.initialize();

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);
        SinkeiyakuDomManager sinkeiyakuDomManager = SWAKInjector.getInstance(SinkeiyakuDomManager.class);
        hozenDomManager.delete(hozenDomManager.getAllKykKihon());
        hozenDomManager.delete(hozenDomManager.getAllKhDenpyoData());
        hozenDomManager.delete(hozenDomManager.getAllKhFBSoukinData());
        hozenDomManager.delete(hozenDomManager.getAllKhGaikaFBSoukinData());
        hozenDomManager.delete(hozenDomManager.getAllKhSntkInfoTouroku());
        hozenDomManager.delete(hozenDomManager.getAllAnsyuKihon());
        sinkeiyakuDomManager.delete(sinkeiyakuDomManager.getAllSmbcStyKanri());
        hozenDomManager.delete(hozenDomManager.getAllKhHenkouUktk());
        hozenDomManager.delete(hozenDomManager.getAllKhHaitouKanri());
        hozenDomManager.delete(hozenDomManager.getAllKhTumitateDKanri());
        hozenDomManager.delete(hozenDomManager.getAllNyuukinKakusyouData());
        hozenDomManager.delete(hozenDomManager.getAllKhDshrTuki());

        deleteBackupData();
    }

    private void newData(){

        bAK_KykKihon = null;

        bAK_AnsyuKihon = null;

        bAK_KhDenpyoData = new ArrayList<IT_BAK_KhDenpyoData>();

        bAK_KhFBSoukinData = new ArrayList<IT_BAK_KhFBSoukinData>();

        bAK_KhGaikaFBSoukinData = new ArrayList<IT_BAK_KhGaikaFBSoukinData>();

        bAK_KhSntkInfoTouroku = new ArrayList<IT_BAK_KhSntkInfoTouroku>();

        bAK_SmbcStyKanri = new ArrayList<HT_BAK_SmbcStyKanri>();

        bAK_KhHenkouUktk = new ArrayList<IT_BAK_KhHenkouUktk>();

        bAK_KhHaitouKanri = new ArrayList<IT_BAK_KhHaitouKanri>();

        bAK_KhTumitateDKanri = new ArrayList<IT_BAK_KhTumitateDKanri>();

        bAK_NyuukinKakusyouData = new ArrayList<IT_BAK_NyuukinKakusyouData>();

        bAK_KhDshrTuki = new ArrayList<IT_BAK_KhDshrTuki>();

    }

    private static void deleteBackupData() {

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);
        SinkeiyakuDomManager sinkeiyakuDomManager = SWAKInjector.getInstance(SinkeiyakuDomManager.class);

        hozenDomManager.delete(hozenDomManager.getAllBAKKykKihon());
        hozenDomManager.delete(hozenDomManager.getAllBAKKhDenpyoData());
        hozenDomManager.delete(hozenDomManager.getAllBAKKhFBSoukinData());
        hozenDomManager.delete(hozenDomManager.getAllBAKKhGaikaFBSoukinData());
        hozenDomManager.delete(hozenDomManager.getAllBAKKhSntkInfoTouroku());
        hozenDomManager.delete(hozenDomManager.getAllBAKAnsyuKihon());
        sinkeiyakuDomManager.delete(sinkeiyakuDomManager.getAllBAKSmbcStyKanri());
        hozenDomManager.delete(hozenDomManager.getAllBAKKhHenkouUktk());
        hozenDomManager.delete(hozenDomManager.getAllBAKKhHaitouKanri());
        hozenDomManager.delete(hozenDomManager.getAllBAKKhTumitateDKanri());
        hozenDomManager.delete(hozenDomManager.getAllBAKNyuukinKakusyouData());
        hozenDomManager.delete(hozenDomManager.getAllBAKKhDshrTuki());
    }

    @Test
    @Transactional
    @TestOrder(10)
    public void testTableMaintenanceUtil_backUp_1_1() {

        newData();

        kinou.setKinouKbn(C_KinouKbn.ONLINE);

        tableMaintenanceUtil.backUp("12806345867", "12311");

        bAK_KykKihon = tableMaintenanceUtil.getBakKykKihon();

        bAK_AnsyuKihon = tableMaintenanceUtil.getBakAnsyuKihon();

        bAK_KhDenpyoData = tableMaintenanceUtil.getBakKhDenpyoDataList();

        bAK_KhFBSoukinData = tableMaintenanceUtil.getBakKhFBSoukinDataList();

        bAK_KhGaikaFBSoukinData = tableMaintenanceUtil.getBakKhGaikaFBSoukinDataList();

        bAK_KhSntkInfoTouroku = tableMaintenanceUtil.getBakKhSntkInfoTourokuList();

        bAK_SmbcStyKanri = tableMaintenanceUtil.getBakSmbcStyKanriList();

        bAK_KhHenkouUktk = tableMaintenanceUtil.getBakKhHenkouUktkList();

        bAK_KhHaitouKanri = tableMaintenanceUtil.getBakKhHaitouKanriList();

        bAK_KhTumitateDKanri = tableMaintenanceUtil.getBakKhTumitateDKanriList();

        bAK_NyuukinKakusyouData = tableMaintenanceUtil.getBakNyuukinKakusyouDataList();

        bAK_KhDshrTuki = tableMaintenanceUtil.getBakKhDshrTukiList();

        assertNull(bAK_KykKihon);
        assertNull(bAK_AnsyuKihon);

        exStringEquals(bAK_KhDenpyoData.get(0).getDenrenno(), "12345678901", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(0).getHuridenatesakicd(), "101", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTantocd(), C_TantouCdKbn.IMUSATEI, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(0).getDenymd(), BizDate.valueOf("20150414"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTaisyakukbn(), C_TaisyakuKbn.KASIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKanjyoukmkcd(), C_Kanjyoukmkcd.SONOTAKARIBARAIKIN_GAIHO, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSuitoubumoncd(), "101", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDengaikagk(), BizCurrency.valueOf(20001), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(0).getDenkawaserate(), BizNumber.valueOf(101));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDenyenkagk(), BizCurrency.valueOf(1000000001), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getHuridenskskbn(), C_HuridensksKbn.BLNK, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenhnknhoukbn(), C_DenhnknhouKbn.BLNK, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenshrhoukbn(), C_DenshrhouKbn.BLNK, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(0).getSyoriYmd(), BizDate.valueOf("20150101"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyoricd(), "1001", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyorisosikicd(), "1000001", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg1cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg2cd(), C_Segcd.BLNK, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678900", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getDenrenno(), "12345678901", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyoricd(), "1001", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyorisosikicd(), "1000001", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160101"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150405"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyono(), "12806345867", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getBankcd(), "1212", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKouzano(), "7654321", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getSoukingk(), BizCurrency.valueOf(1000000001), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getGaikataikagk(), BizCurrency.valueOf(1000000001), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(1));
        exStringEquals(bAK_KhFBSoukinData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhFBSoukinData.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678900", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getDenrenno(), "12345678901", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoricd(), "1002", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyorisosikicd(), "1000002", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160202"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150405"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyono(), "12806345867", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBankcd(), "1212", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBanknmej(), "bank2", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitencd(), "123", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitennmej(), "siten2", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKouzano(), "7654321", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getGaikashrgk(), BizCurrency.valueOf(1), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getCrossrateshrgk(), BizCurrency.valueOf(1), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(1));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getIrninnmei(), "irni1", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getRenno(), 1, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getSyoriYmd(), BizDate.valueOf("20150101"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kykno(), "1000000001", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kyknokbn(), C_Huho2kyknoKbn.MOSNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyouhncd(), "1002", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkn(), "タイショウシャシメイ２", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkj(), "タイショウシャシメイ２", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseiymd(), BizDate.valueOf("20160102"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKetymd(), BizDate.valueOf("20150101"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getKetsyacd(), "22", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getPalketsyacd(), "22", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getSintyou(), 110, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getTaijyuu(), 50, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKktymd(), BizDate.valueOf("20150101"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd1(), "11", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym1(), BizDateYM.valueOf("201501"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd2(), "11", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym2(), BizDateYM.valueOf("201501"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        exDateEquals(bAK_SmbcStyKanri.get(0).getDatarenymd(), BizDate.valueOf("20151010"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(0).getDatasakuseirenno(), BizNumber.valueOf(1234567));
        exStringEquals(bAK_SmbcStyKanri.get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(0).getRendouflg(), C_Rendouflg.RENDOUZUMI, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatakbn(), "7", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatasakuseiymd(), "20151011", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbchknkaisyacd(), "55", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcuktkkanriid(), "1234567890", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihouktkzmymd(), "20151012", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbymd(), "20151013", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcbankhnkykflg(), "1", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbksyymd(), "20151014", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohjyttykymd(), "20151015", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihonyknzmymd(), "20151016", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosnszmymd(), "20151017", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyknhkkzmymd(), "20151018", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyumoku(), "15", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyurui(), "16", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyono(), "12806345867", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyonoedaban(), "00001", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcjktkflg(), "0", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihotrksymd(), "20151019", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohktymd(), "20151020", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckykseiymd(), "20151021", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）１", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmosuktymd(), "20151022", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckosyaareastyknr(), "12121212121212", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(0).getUktkymd(), BizDate.valueOf("20180101"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getTourokuroute(), C_TourokuRouteKbn.BLNK, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktksyorikbn(), C_UktkSyoriKbn.BLNK, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20180201"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(0).getSyoriyoteiymd(), BizDate.valueOf("20180301"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.BLNK, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getInputshrhousiteikbn(), C_InputShrhousiteiKbn.BLNK, "入力用支払方法指定区分");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getYenshrtkhkumu(), C_UmuKbn.NONE, "円支払特約付加有無");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getBankcd(), "1001", "銀行コード");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getSitencd(), "101", "支店コード");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getYokinkbn(), C_YokinKbn.BLNK, "預金種目区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKouzano(), "201801250001", "口座番号");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKzdoukbn(), C_Kzdou.BLNK, "口座名義人同一区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKzmeiginmkn(), "テスト名義人１", "口座名義人氏名（カナ）");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkymd(), BizDate.valueOf("20180101"), "円建変更日");
        exDateEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttymd(), BizDate.valueOf("20180201"), "目標額到達日");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttkaiyakuhr(), BizCurrency.valueOf(111000), "目標額到達時解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewkaiyakuhr(), BizCurrency.valueOf(121000), "変更後解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkhr(), BizCurrency.valueOf(131000), "円建変更時返戻金");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNyuuryokuhassoukbn(), C_HassouKbn.BLNK, "入力発送区分");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu1(), C_HnskariyuuKbn.BLNK, "本社回送理由１");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu2(), C_HnskariyuuKbn.YENDTHNKHR_ARI, "本社回送理由２");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhrgaika(), BizCurrency.valueOf(141000), "円建変更時解約返戻金（外貨）");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhryen(), BizCurrency.valueOf(151000), "円建変更時解約返戻金（円貨）");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhncd(), "1001", "変更後商品コード");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhnsdno(), 11, "変更後商品世代番号");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkihons(), BizCurrency.valueOf(161000), "円建変更後基本Ｓ");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewhokenryou(), BizCurrency.valueOf(171000), "変更後保険料");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewkyktuukasyu(), C_Tuukasyu.JPY, "変更後契約通貨種類");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewryouritusdno(), "101", "変更後料率世代番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(0).getRenno(), 1, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.BLNK, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2009"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getTounendod(), BizCurrency.valueOf(10000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrymd(), BizDate.valueOf("20180101"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedruigk(), BizCurrency.valueOf(20000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(1000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(5000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinTime(), "20181018111111111", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20180101"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(0).getRenno(), 1, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.BLNK, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(0).getTumitated(), BizCurrency.valueOf(20000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20180201"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinTime(), "20181018111111111", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKbnkey(), "06", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyouno(), "82354587856133586489", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyksyoriymd(), BizDate.valueOf("20180101"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180201"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNykkeiro(), C_Nykkeiro.BLNK, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkkaisuu(), C_Hrkkaisuu.BLNK, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.BLNK, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getIktnyuukinnumu(), C_UmuKbn.NONE, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(0).getJyuutouym(), BizDateYM.valueOf("201801"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuuy(), 1, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuum(), 10, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(0).getRsgaku(), BizCurrency.valueOf(10000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getRyosyuymd(), BizDate.valueOf("20180301"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getDenrenno(), "10000000000000000001", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNykdenymd(), BizDate.valueOf("20180401"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitoubumoncd(), "101", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaebankcd(), "1001", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaesitencd(), "201", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTabakarikanjyono(), "01", "束仮勘定番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkno(), "10000001", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.TAISYOUGAI, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitososhikicd(), "1000001", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinTime(), "20181018111111111", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(0).getDshrtoukeisikibetukey(), "82354587856133586489", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyono(), "12806345867", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(0).getTrkssikibetukey(), "12311", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(0).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(0).getHenkousikibetukey(), "100", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriYmd(), BizDate.valueOf("20190101"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyorikbn(), C_SyoriKbn.KYKTORIKESI, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHrkkeiro(), C_Hrkkeiro.BLNK, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getKykjyoutai(), C_Kykjyoutai.BLNK, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.KYKTORIKESI, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(0).getKykymd(), BizDate.valueOf("20190401"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(0).getYendthnkymd(), BizDate.valueOf("20190501"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKihons(), BizCurrency.valueOf(999991), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(0).getYoteiriritu(), BizNumber.valueOf(1.21));
        exDateEquals(bAK_KhDshrTuki.get(0).getDenymd(), BizDate.valueOf("20190601"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getSiharaid(), BizCurrency.valueOf(888881), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(0).getCalckijyunymd(), BizDate.valueOf("20190701"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriymd2(), BizDate.valueOf("20190801"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(0).getJkipjytym(), BizDateYM.valueOf("201903"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(0).getKinoubetukijyunymd(), BizDate.valueOf("20190901"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(0).getGengkwari(), BizNumber.valueOf(0.11));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getItibushrgk(), BizCurrency.valueOf(111), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkin(), BizCurrency.valueOf(221), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk(), BizCurrency.valueOf(331), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(441), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(551), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getDkeisanhaitoukin(), BizCurrency.valueOf(661), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkingk(), BizCurrency.valueOf(11), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedganrikindshr(), BizCurrency.valueOf(22), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated(), BizCurrency.valueOf(33), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosimae(), BizCurrency.valueOf(44), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosigo(), BizCurrency.valueOf(55), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTkbthaitou(), BizCurrency.valueOf(66), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.BLNK, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn .BLNK, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTounendod(), BizCurrency.valueOf(441), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn .BLNK, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrymd(), BizDate.valueOf("20201001"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk2(), BizCurrency.valueOf(551), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk2(), BizCurrency.valueOf(661), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk2(), BizCurrency.valueOf(771), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20201101"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.BLNK, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated2(), BizCurrency.valueOf(881), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20191201"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalckari(), BizCurrency.valueOf(991), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(0).getKariwariatedriritu1(), BizNumber.valueOf(0.211));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(0).getKariwariatedriritu2(), BizNumber.valueOf(0.111));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalctumi(), BizCurrency.valueOf(22221), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(0).getTumitatedriritu1(), BizNumber.valueOf(0.131));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(0).getTumitatedriritu2(), BizNumber.valueOf(0.141));
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinTime(), "20181018111111111", "業務用更新時間");

    }

    @Test
    @Transactional
    @TestOrder(20)
    public void testTableMaintenanceUtil_backUp_1_2() {

        newData();

        deleteBackupData();

        kinou.setKinouKbn(C_KinouKbn.ONLINE);

        tableMaintenanceUtil.backUp("12806345672", "12345");

        bAK_KykKihon = tableMaintenanceUtil.getBakKykKihon();

        bAK_AnsyuKihon = tableMaintenanceUtil.getBakAnsyuKihon();

        bAK_KhDenpyoData = tableMaintenanceUtil.getBakKhDenpyoDataList();

        bAK_KhFBSoukinData = tableMaintenanceUtil.getBakKhFBSoukinDataList();

        bAK_KhGaikaFBSoukinData = tableMaintenanceUtil.getBakKhGaikaFBSoukinDataList();

        bAK_KhSntkInfoTouroku = tableMaintenanceUtil.getBakKhSntkInfoTourokuList();

        bAK_SmbcStyKanri = tableMaintenanceUtil.getBakSmbcStyKanriList();

        bAK_KhHenkouUktk = tableMaintenanceUtil.getBakKhHenkouUktkList();

        assertNotNull(bAK_KykKihon.getBAKHokenSyoukens().get(0).getBAKHokenSyoukenHukaInfo());

        bAK_KhHaitouKanri = tableMaintenanceUtil.getBakKhHaitouKanriList();

        bAK_KhTumitateDKanri = tableMaintenanceUtil.getBakKhTumitateDKanriList();

        bAK_NyuukinKakusyouData = tableMaintenanceUtil.getBakNyuukinKakusyouDataList();

        bAK_KhDshrTuki = tableMaintenanceUtil.getBakKhDshrTukiList();

        assertNotNull(bAK_KykKihon);
        assertNotNull(bAK_KykKihon.getBAKCreditCard());
        exNumericEquals(bAK_KykKihon.getBAKFatcaInfos().size(), 1, "件数");
        assertNotNull(bAK_KykKihon.getBAKHhknSya());
        exNumericEquals(bAK_KykKihon.getBAKKariukekins().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKhLincSousinInfos().size(), 1, "件数");
        assertNotNull(bAK_KykKihon.getBAKKhTtdkTyuui());
        exNumericEquals(bAK_KykKihon.getBAKKihrkmpSeisanRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKoujyoSymKanris().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKoujyoSymNaiyous().size(), 1, "件数");
        assertNotNull(bAK_KykKihon.getBAKKouza());
        assertNotNull(bAK_KykKihon.getBAKTeikikinKouza());
        exNumericEquals(bAK_KykKihon.getBAKKykDairitens().size(), 1, "件数");
        assertNotNull(bAK_KykKihon.getBAKKykSonotaTkyk());
        assertNotNull(bAK_KykKihon.getBAKKykSya());
        exNumericEquals(bAK_KykKihon.getBAKKykSyouhns().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKykUkts().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKNyknJissekiRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKSyouhnTokujous().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKYykIdouAnsyuCreditCards().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKYykIdouNaiyoHrhnks().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKYykIdouUktks().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKHengakuUnits().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKhTtdkRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKhTtdkRirekis().get(0).getBAKKhHenkouRirekis().size(), 1, "件数");
        assertNotNull(bAK_KykKihon.getBAKKhTtdkRirekis().get(0).getBAKKhShrRireki());
        exNumericEquals(bAK_KykKihon.getBAKKhTtdkRirekis().get(0).getBAKKhShrRireki().getBAKKhShrRirekiDetails().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKhTtdkRirekis().get(0).getBAKKykSyouhnRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKhTtdkRirekis().get(0).getBAKSyouhnTokujouRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKhTtdkRirekis().get(0).getBAKHengakuUnitRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKhTtdkRirekis().get(0).getBAKHengakuCfs().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKTesuuryous().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKTesuuryous().get(0).getBAKTesuuryouSyouhns().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKTesuuryous().get(0).getBAKTesuuryouSyouhnRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKoujyoSyms().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKSuiihyous().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKTtdkKans().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKHokenSyoukens().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKHokenSyoukens().get(0).getBAKHokenSyoukenHukaInfos().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKTrkKzks().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKCreditCardInfos().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKoujyoSymNaiyouDs().size(), 1, "件数");

        exNumericEquals(bAK_KhDenpyoData.size(), 1, "件数");

        exNumericEquals(bAK_KhFBSoukinData.size(), 1, "件数");

        exNumericEquals(bAK_KhGaikaFBSoukinData.size(), 1, "件数");

        exNumericEquals(bAK_KhSntkInfoTouroku.size(), 1, "件数");

        assertNotNull(bAK_AnsyuKihon);
        assertNotNull(bAK_AnsyuKihon.getBAKAnsyuCreditCard());
        exNumericEquals(bAK_AnsyuKihon.getBAKAnsyuRirekis().size(), 1, "件数");
        assertNotNull(bAK_AnsyuKihon.getBAKDattaiUktk());
        exNumericEquals(bAK_AnsyuKihon.getBAKSyuunouHenknRirekis().size(), 1, "件数");
        assertNotNull(bAK_AnsyuKihon.getBAKTokusin());

        exNumericEquals(bAK_SmbcStyKanri.size(), 1, "件数");

        exNumericEquals(bAK_KhHenkouUktk.size(), 1, "件数");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().size(), 1, "件数");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().size(), 1, "件数");

        exNumericEquals(bAK_KhHaitouKanri.size(), 1, "件数");
        exNumericEquals(bAK_KhTumitateDKanri.size(), 1, "件数");
        exNumericEquals(bAK_NyuukinKakusyouData.size(), 1, "件数");

        exNumericEquals(bAK_KhDshrTuki .size(), 1, "件数");

        exStringEquals(bAK_KykKihon.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykKihon.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykKihon.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KykKihon.getAitesyono(), "12806345672", "相手証券番号");
        exClassificationEquals(bAK_KykKihon.getHaitoukbn(), C_HaitouKbn.NONE, "配当区分");
        exClassificationEquals(bAK_KykKihon.getHrkkaisuu(), C_Hrkkaisuu.ITIJI, "払込回数");
        exClassificationEquals(bAK_KykKihon.getHrkkeiro(), C_Hrkkeiro.CREDIT, "払込経路");
        exClassificationEquals(bAK_KykKihon.getSdpdkbn(), C_Sdpd.PD, "Ｓ建Ｐ建区分");
        exClassificationEquals(bAK_KykKihon.getDntryouritukbn(), C_DntryourituKbn.A, "団体料率区分");
        exStringEquals(bAK_KykKihon.getDntcd(), "001", "団体コード");
        exClassificationEquals(bAK_KykKihon.getSntkhoukbn(), C_SntkhouKbn.BLNK, "選択方法区分");
        exClassificationEquals(bAK_KykKihon.getSinsakbn(), C_SinsaKbn.NINGENDOKKU, "診査区分");
        exDateEquals(bAK_KykKihon.getMosymd(), BizDate.valueOf("20150101"), "申込日");
        exDateEquals(bAK_KykKihon.getKktymd(), BizDate.valueOf("20150102"), "告知日");
        exDateEquals(bAK_KykKihon.getFstpnyknymd(), BizDate.valueOf("20150103"), "初回保険料入金日");
        exDateEquals(bAK_KykKihon.getMosukeymd(), BizDate.valueOf("20150104"), "申込書受付日");
        exDateEquals(bAK_KykKihon.getMosjimosuktymd(), BizDate.valueOf("20150105"), "申込時申込書受付日");
        exDateEquals(bAK_KykKihon.getSeirituymd(), BizDate.valueOf("20150106"), "成立日");
        exDateEquals(bAK_KykKihon.getItiprsymd(), BizDate.valueOf("20150107"), "１Ｐ領収予定日");
        exBizCalcbleEquals(bAK_KykKihon.getHrkp(), BizCurrency.valueOf(10000), "払込保険料");
        exDateYMEquals(bAK_KykKihon.getBosyuuym(), BizDateYM.valueOf("201501"), "募集年月");
        exDateYMEquals(bAK_KykKihon.getSeisekiym(), BizDateYM.valueOf("201502"), "成績計上年月");
        exDateYMEquals(bAK_KykKihon.getSkeikeijyouym(), BizDateYM.valueOf("201503"), "新契約計上年月");
        exStringEquals(bAK_KykKihon.getPlancd(), "002", "プランコード");
        exNumericEquals(bAK_KykKihon.getPlanrenno(), 1, "プラン連番");
        exClassificationEquals(bAK_KykKihon.getAisyoumeikbn(), C_AisyoumeiKbn.BLNK, "愛称名区分");
        exClassificationEquals(bAK_KykKihon.getSyusaiumu(), C_UmuKbn.ARI, "出再有無");
        exClassificationEquals(bAK_KykKihon.getStknsetkbn(), C_StknsetKbn.NONE, "質権設定区分");
        exClassificationEquals(bAK_KykKihon.getKykksykjyumu(), C_UmuKbn.NONE, "契約者貸付約定有無");
        exClassificationEquals(bAK_KykKihon.getKykksumu(), C_UmuKbn.ARI, "契約者貸付有無");
        exClassificationEquals(bAK_KykKihon.getAplkahikbn(), C_Aplkahi.NONE, "ＡＰＬ可否区分");
        exClassificationEquals(bAK_KykKihon.getAplumu(), C_UmuKbn.NONE, "ＡＰＬ有無");
        exClassificationEquals(bAK_KykKihon.getFstphrkkeirokbn(), C_FstphrkkeiroKbn.CONVENIENCE, "初回保険料払込経路区分");
        exDateYEquals(bAK_KykKihon.getHaitounendo(), BizDateY.valueOf("2015"), "配当年度");
        exClassificationEquals(bAK_KykKihon.getHaitoukinuketorihoukbn(), C_HaitoukinuketorihouKbn.BLNK, "配当金受取方法区分");
        exClassificationEquals(bAK_KykKihon.getTratkityuiumu(), C_UmuKbn.ARI, "取扱注意有無");
        exStringEquals(bAK_KykKihon.getTratkityuiuny(), "取扱注意内容１", "取扱注意内容");
        exNumericEquals(bAK_KykKihon.getSbuktnin(), 2, "死亡受取人人数");
        exStringEquals(bAK_KykKihon.getGansindankakuteiymd(), "20150108", "がん診断確定日");
        exClassificationEquals(bAK_KykKihon.getMosuketukekbn(), C_MosUketukeKbn.SIRYOUSEIKYUU, "申込受付区分");
        exClassificationEquals(bAK_KykKihon.getKijikbn(), C_KijiKbn.NONE, "記事区分");
        exStringEquals(bAK_KykKihon.getHhknsykgycd(), "101", "被保険者職業コード");
        exClassificationEquals(bAK_KykKihon.getHhknnensyuukbn(), C_NensyuuKbn.MORETHAN1000, "被保険者年収区分");
        exStringEquals(bAK_KykKihon.getDrtenkanritodoufukencd(), "47", "代理店管理都道府県コード");
        exStringEquals(bAK_KykKihon.getCifcd(), "003", "ＣＩＦコード");
        exStringEquals(bAK_KykKihon.getSmbckanriid(), "004", "ＳＭＢＣ受付管理ＩＤ");
        exClassificationEquals(bAK_KykKihon.getTsryhshrkykumukbn(), C_UmuKbn.ARI, "手数料不支払契約有無区分");
        exClassificationEquals(bAK_KykKihon.getKykhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.UNTEN, "契約者本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getSkskknhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.UNTEN, "親権者後見人本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getBoskykjyoutai(), C_Boskykjyoutai.HEIGAIBOUSISOTIKYK, "募集契約状態");
        exNumericEquals(bAK_KykKihon.getKanyuusyano(), 5, "加入者番号");
        exClassificationEquals(bAK_KykKihon.getDrctservicemoskbn(), C_DirectServiceMosKbn.ENTRY, "ダイレクトサービス申込区分");
        exClassificationEquals(bAK_KykKihon.getSksyoukenskskbn(), C_SkSyoukenSksKbn.SINKISAKUSEI, "新契約証券作成区分");
        exDateEquals(bAK_KykKihon.getSinkyksyokensakuseiymd(), BizDate.valueOf("20100101"), "新契約証券作成日");
        exDateEquals(bAK_KykKihon.getSyoyousinkyksyohakkouymd(), BizDate.valueOf("20110101"), "証券用新契約証券発行日");
        exClassificationEquals(bAK_KykKihon.getNkuikosumikbn(), C_NkIkouzumiKbn.BLNK, "年金移行済区分");
        exDateEquals(bAK_KykKihon.getSyhenkouymd(), BizDate.valueOf("20150109"), "最終変更日");
        exDateEquals(bAK_KykKihon.getLastsyosaihkymd(), BizDate.valueOf("20150110"), "最終証券再発行日");
        exDateEquals(bAK_KykKihon.getLastmeihenymd(), BizDate.valueOf("20150111"), "最終名義変更日");
        exDateEquals(bAK_KykKihon.getLastkykmeighnkymd(), BizDate.valueOf("20150111"), "最終契約者名義変更日");
        exDateEquals(bAK_KykKihon.getLastsbukthenymd(), BizDate.valueOf("20150111"), "最終死亡受取人変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmseiymdhenkouymd(), BizDate.valueOf("20150111"), "最終契約者名生年月日変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmkanakjteiymd(), BizDate.valueOf("20150113"), "最終契約者名仮名漢字訂正日");
        exDateEquals(bAK_KykKihon.getLasttsinynohenkouymd(), BizDate.valueOf("20150114"), "最終通信先郵便番号変更日");
        exDateEquals(bAK_KykKihon.getLastjyuuhenymd(), BizDate.valueOf("20150115"), "最終住所変更日");
        exStringEquals(bAK_KykKihon.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_CreditCard bAK_CreditCard = bAK_KykKihon.getBAKCreditCard();
        exStringEquals(bAK_CreditCard.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_CreditCard.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_CreditCard.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_CreditCard.getKokno(), "1000001", "顧客番号");
        exStringEquals(bAK_CreditCard.getCardkaisyacd(), "01", "カード会社コード");
        exStringEquals(bAK_CreditCard.getCreditcardno1(), "10000011", "クレジットカード番号１");
        exStringEquals(bAK_CreditCard.getCreditcardno2(), "10000012", "クレジットカード番号２");
        exStringEquals(bAK_CreditCard.getCreditcardno3(), "10000013", "クレジットカード番号３");
        exStringEquals(bAK_CreditCard.getCreditcardno4(), "10000014", "クレジットカード番号４");
        exStringEquals(bAK_CreditCard.getCreditcardykkigen(), "20151101", "クレジットカード有効期限");
        exStringEquals(bAK_CreditCard.getCreditmeiginmkn(), "クレジットカード名義人氏名（カナ）１", "クレジットカード名義人氏名（カナ）");
        exStringEquals(bAK_CreditCard.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_CreditCard.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_CreditCard.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_FatcaInfo> bAK_FatcaInfo = bAK_KykKihon.getBAKFatcaInfos();
        exStringEquals(bAK_FatcaInfo.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_FatcaInfo.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_FatcaInfo.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_FatcaInfo.get(0).getRenno(), 1, "連番");
        exDateEquals(bAK_FatcaInfo.get(0).getSyoriYmd(), BizDate.valueOf("20100101"), "処理年月日");
        exStringEquals(bAK_FatcaInfo.get(0).getSyorisosikicd(), "1000001", "処理組織コード");
        exClassificationEquals(bAK_FatcaInfo.get(0).getFatcasnsikbn(), C_FatcasnsiKbn.BLNK, "ＦＡＴＣＡ宣誓区分");
        exClassificationEquals(bAK_FatcaInfo.get(0).getBikkjnssinfokbn(), C_BikkjnssinfoKbn.ARI, "米国人示唆情報区分");
        exClassificationEquals(bAK_FatcaInfo.get(0).getFatcakekkbn(), C_FatcakekKbn.TAISYOUGAIYOU, "ＦＡＴＣＡ結果区分");
        exClassificationEquals(bAK_FatcaInfo.get(0).getFatcahankeiikbn(), C_FatcahankeiiKbn.SONOTA, "ＦＡＴＣＡ判明経緯区分");
        exStringEquals(bAK_FatcaInfo.get(0).getBikknzsyno(), "100001", "米国納税者番号");
        exDateEquals(bAK_FatcaInfo.get(0).getSyomeiymd(), BizDate.valueOf("20150901"), "署名日");
        exStringEquals(bAK_FatcaInfo.get(0).getKokno(), "100002", "顧客番号");
        exClassificationEquals(bAK_FatcaInfo.get(0).getFatcatgkbn(), C_FatcatgKbn.KYKSZK, "ＦＡＴＣＡ対象者区分");
        exStringEquals(bAK_FatcaInfo.get(0).getSeionnmkn(), "清音氏名（カナ）１", "清音氏名（カナ）");
        exStringEquals(bAK_FatcaInfo.get(0).getNmkn(), "氏名（カナ）１", "氏名（カナ）");
        exStringEquals(bAK_FatcaInfo.get(0).getNmkj(), "氏名（漢字）１", "氏名（漢字）");
        exDateEquals(bAK_FatcaInfo.get(0).getSeiymd(), BizDate.valueOf("20150902"), "生年月日");
        exClassificationEquals(bAK_FatcaInfo.get(0).getSeibetu(), C_Seibetu.MALE, "性別");
        exDateEquals(bAK_FatcaInfo.get(0).getKouryokuendymd(), BizDate.valueOf("20150903"), "効力終了日");
        exDateEquals(bAK_FatcaInfo.get(0).getTrkymd(), BizDate.valueOf("20150903"), "登録日");
        exStringEquals(bAK_FatcaInfo.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_FatcaInfo.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_FatcaInfo.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_HhknSya bAK_HhknSya = bAK_KykKihon.getBAKHhknSya();
        exStringEquals(bAK_HhknSya.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HhknSya.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HhknSya.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_HhknSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_HhknSya.getHhknsakuinmeino(), "1000000001", "被保険者索引名番号");
        exStringEquals(bAK_HhknSya.getHhknnmkn(), "被保険者名（本ＴＢＬ）", "被保険者名（カナ）");
        exStringEquals(bAK_HhknSya.getHhknnmkj(), "被保険者名漢字１", "被保険者名（漢字）");
        exClassificationEquals(bAK_HhknSya.getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(bAK_HhknSya.getHhknseiymd(), BizDate.valueOf("20150301"), "被保険者生年月日");
        exClassificationEquals(bAK_HhknSya.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exStringEquals(bAK_HhknSya.getHhknyno(), "3334444", "被保険者郵便番号");
        exStringEquals(bAK_HhknSya.getHhknadr1kn(), "被保険者住所１カナ１", "被保険者住所１（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr1kj(), "被保険者住所１漢字１", "被保険者住所１（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr2kn(), "被保険者住所２カナ１", "被保険者住所２（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr2kj(), "被保険者住所２漢字１", "被保険者住所２（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr3kn(), "被保険者住所３カナ１", "被保険者住所３（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr3kj(), "被保険者住所３漢字１", "被保険者住所３（漢字）");
        exStringEquals(bAK_HhknSya.getHhkntelno(), null, "被保険者電話番号");
        exStringEquals(bAK_HhknSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_Kariukekin> bAK_Kariukekin = bAK_KykKihon.getBAKKariukekins();
        exStringEquals(bAK_Kariukekin.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Kariukekin.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Kariukekin.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_Kariukekin.get(0).getKrkno(), 666, "仮受番号");
        exDateEquals(bAK_Kariukekin.get(0).getKrkkeijyoymd(), BizDate.valueOf("20150701"), "仮受計上処理日");
        exBizCalcbleEquals(bAK_Kariukekin.get(0).getKrkgk(), BizCurrency.valueOf(100000), "仮受金額");
        exDateEquals(bAK_Kariukekin.get(0).getHasseidenymd(), BizDate.valueOf("20150702"), "発生伝票日付");
        exDateEquals(bAK_Kariukekin.get(0).getSeisandenymd(), BizDate.valueOf("20150703"), "精算伝票日付");
        exClassificationEquals(bAK_Kariukekin.get(0).getKrkseisanzumiflg(), C_Krkseisanzumiflg.SUMI, "仮受精算済フラグ");
        exClassificationEquals(bAK_Kariukekin.get(0).getKrkriyuukbn(), C_KrkriyuuKbn.PMENGONYKN, "仮受理由区分");
        exClassificationEquals(bAK_Kariukekin.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.PMENYOUP, "入金内容区分");
        exClassificationEquals(bAK_Kariukekin.get(0).getNykkeiro(), C_Nykkeiro.HKNKIN, "入金経路");
        exDateYMEquals(bAK_Kariukekin.get(0).getJyuutouym(), BizDateYM.valueOf("201507"), "充当年月");
        exNumericEquals(bAK_Kariukekin.get(0).getJyutoukaisuuy(), 5, "充当回数（年）");
        exNumericEquals(bAK_Kariukekin.get(0).getJyutoukaisuum(), 6, "充当回数（月）");
        exDateEquals(bAK_Kariukekin.get(0).getRyosyuymd(), BizDate.valueOf("20150704"), "領収日");
        exStringEquals(bAK_Kariukekin.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Kariukekin.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Kariukekin.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KhLincSousinInfo> bAK_KhLincSousinInfo = bAK_KykKihon.getBAKKhLincSousinInfos();
        exStringEquals(bAK_KhLincSousinInfo.get(0).getKbnkey(), "07", "区分キー");
        exClassificationEquals(bAK_KhLincSousinInfo.get(0).getLincsoujyusinsyskbn(), C_LincsoujyusinsysKbn.HOZEN, "ＬＩＮＣ送受信用システム区分");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getSyono(), "12806345672", "証券番号");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getRenno(), 1, "連番");
        exClassificationEquals(bAK_KhLincSousinInfo.get(0).getLincsousinkbn(), C_SousinKbn.SOUSINZUMI, "ＬＩＮＣ送信区分");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLincrecordsyubetu(), 11, "ＬＩＮＣ＿レコード種別");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getLinchenkoutype(), "9", "ＬＩＮＣ＿変更タイプ");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinckanyuusyano(), 1234567890, "ＬＩＮＣ＿加入者番号");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getLinchhknnmkn(), "ＬＩＮＣ＿被保険者名（カナ）１", "ＬＩＮＣ＿被保険者名（カナ）");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getLinchhknnmkj(), "ＬＩＮＣ＿被保険者名（漢字）１", "ＬＩＮＣ＿被保険者名（漢字）");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinchhknsei(), 3, "ＬＩＮＣ＿被保険者性別");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinchhknseiymd(), 20150101, "ＬＩＮＣ＿被保険者生年月日");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getLinchhknadrkn(), "ＬＩＮＣ＿被保険者住所（カナ）１", "ＬＩＮＣ＿被保険者住所（カナ）");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinckeihidjnhyouji(), 8, "ＬＩＮＣ＿契被同人表示");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getLinckyknmkn(), "ＬＩＮＣ＿契約者名（カナ）１", "ＬＩＮＣ＿契約者名（カナ）");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getLinckyknmkj(), "ＬＩＮＣ＿契約者名（漢字）１", "ＬＩＮＣ＿契約者名（漢字）");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinckyksei(), 1, "ＬＩＮＣ＿契約者性別");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinckykseiymd(), 20150102, "ＬＩＮＣ＿契約者生年月日");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getLinckykadrkn(), "ＬＩＮＣ＿契約者住所（カナ）１", "ＬＩＮＣ＿契約者住所（カナ）");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinctrkmousideymd(), 20150103, "ＬＩＮＣ＿登録申出年月日");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinckykytymd(), 20150104, "ＬＩＮＣ＿契約予定年月日");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinckykymd(), 20150105, "ＬＩＮＣ＿契約年月日");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinchozenytymd(), 20150106, "ＬＩＮＣ＿保全予定年月日");
        exBizCalcbleEquals(bAK_KhLincSousinInfo.get(0).getLincsgnyukyhng(), BizCurrency.valueOf(1001), "ＬＩＮＣ＿災害入院給付金日額");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinchozenymd(), 20150106, "ＬＩＮＣ＿保全年月日");
        exBizCalcbleEquals(bAK_KhLincSousinInfo.get(0).getLincsipnyukyhng(), BizCurrency.valueOf(1002), "ＬＩＮＣ＿疾病入院給付金日額");
        exBizCalcbleEquals(bAK_KhLincSousinInfo.get(0).getLincsjnyukyhng(), BizCurrency.valueOf(1003), "ＬＩＮＣ＿成人病入院給付金日額");
        exBizCalcbleEquals(bAK_KhLincSousinInfo.get(0).getLincsonotanyukyhng(), BizCurrency.valueOf(1004), "ＬＩＮＣ＿その他入院給付金日額");
        exBizCalcbleEquals(bAK_KhLincSousinInfo.get(0).getLinchutuusbs(), BizCurrency.valueOf(1005), "ＬＩＮＣ＿普通死亡保険金額");
        exBizCalcbleEquals(bAK_KhLincSousinInfo.get(0).getLincsgsbksns(), BizCurrency.valueOf(1006), "ＬＩＮＣ＿災害死亡時加算保険金額");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getLinckakusyasiyouran(), "ＬＩＮＣ＿各社使用欄１", "ＬＩＮＣ＿各社使用欄");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLincmousideflg(), 5, "ＬＩＮＣ＿申出フラグ");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLincmousideflgsetymd(), 20150108, "ＬＩＮＣ＿申出フラグ設定年月日");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLincmousideflgkaijyoymd(), 20150109, "ＬＩＮＣ＿申出フラグ解除年月日");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLincjgyhknflg(), 6, "ＬＩＮＣ＿事業保険フラグ");
        exNumericEquals(bAK_KhLincSousinInfo.get(0).getLinctenkanflg(), 7, "ＬＩＮＣ＿転換フラグ");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhLincSousinInfo.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_KhTtdkTyuui bAK_KhTtdkTyuui = bAK_KykKihon.getBAKKhTtdkTyuui();
        exStringEquals(bAK_KhTtdkTyuui.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhTtdkTyuui.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhTtdkTyuui.getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_KhTtdkTyuui.getTtdktyuuisetymd(), BizDate.valueOf("20151001"), "手続注意設定日");
        exStringEquals(bAK_KhTtdkTyuui.getTtdktyuuisetnm(), "手続注意設定者名１", "手続注意設定者名");
        exClassificationEquals(bAK_KhTtdkTyuui.getKktyuitakbn(), C_KktyuitaKbn.DNGNMEMONASI, "契約管理注意取扱区分");
        exStringEquals(bAK_KhTtdkTyuui.getTtdktyuuinaiyou1(), "手続注意内容１＿１", "手続注意内容１");
        exStringEquals(bAK_KhTtdkTyuui.getTtdktyuuinaiyou2(), "手続注意内容２＿１", "手続注意内容２");
        exStringEquals(bAK_KhTtdkTyuui.getTtdktyuuinaiyou3(), "手続注意内容３＿１", "手続注意内容３");
        exClassificationEquals(bAK_KhTtdkTyuui.getTtdktyuuikbn1(), C_TtdktyuuiKbn.TTDKTYUUOUTAITYUUI, "手続注意区分１");
        exClassificationEquals(bAK_KhTtdkTyuui.getTtdktyuuikbn2(), C_TtdktyuuiKbn.KYKSYASOUSASYOUKAI, "手続注意区分２");
        exClassificationEquals(bAK_KhTtdkTyuui.getTtdktyuuikbn3(), C_TtdktyuuiKbn.HASANOYOBITOUSAN, "手続注意区分３");
        exClassificationEquals(bAK_KhTtdkTyuui.getTtdktyuuikbn4(), C_TtdktyuuiKbn.HOKENKEIYAKUSASIOSAE, "手続注意区分４");
        exClassificationEquals(bAK_KhTtdkTyuui.getTtdktyuuikbn5(), C_TtdktyuuiKbn.KYKSYAYUKUEHUMEI, "手続注意区分５");
        exStringEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnhsknaiyou1(), "手続注意区分補足内容１＿１", "手続注意区分補足内容１");
        exStringEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnhsknaiyou2(), "手続注意区分補足内容２＿１", "手続注意区分補足内容２");
        exStringEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnhsknaiyou3(), "手続注意区分補足内容３＿１", "手続注意区分補足内容３");
        exStringEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnhsknaiyou4(), "手続注意区分補足内容４＿１", "手続注意区分補足内容４");
        exStringEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnhsknaiyou5(), "手続注意区分補足内容５＿１", "手続注意区分補足内容５");
        exDateEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnsetymd1(), BizDate.valueOf("20151002"), "手続注意区分設定日１");
        exDateEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnsetymd2(), BizDate.valueOf("20151003"), "手続注意区分設定日２");
        exDateEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnsetymd3(), BizDate.valueOf("20151004"), "手続注意区分設定日３");
        exDateEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnsetymd4(), BizDate.valueOf("20151005"), "手続注意区分設定日４");
        exDateEquals(bAK_KhTtdkTyuui.getTtdktyuuikbnsetymd5(), BizDate.valueOf("20151006"), "手続注意区分設定日５");
        exStringEquals(bAK_KhTtdkTyuui.getSetsosikicd1(), "1000001", "設定組織コード１");
        exStringEquals(bAK_KhTtdkTyuui.getSetsosikicd2(), "2000001", "設定組織コード２");
        exStringEquals(bAK_KhTtdkTyuui.getSetsosikicd3(), "3000001", "設定組織コード３");
        exStringEquals(bAK_KhTtdkTyuui.getSetsosikicd4(), "4000001", "設定組織コード４");
        exStringEquals(bAK_KhTtdkTyuui.getSetsosikicd5(), "5000001", "設定組織コード５");
        exStringEquals(bAK_KhTtdkTyuui.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTtdkTyuui.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTtdkTyuui.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KihrkmpSeisanRireki> bAK_KihrkmpSeisanRireki = bAK_KykKihon.getBAKKihrkmpSeisanRirekis();
        exStringEquals(bAK_KihrkmpSeisanRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KihrkmpSeisanRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KihrkmpSeisanRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KihrkmpSeisanRireki.get(0).getRenno(), 1, "連番");
        exStringEquals(bAK_KihrkmpSeisanRireki.get(0).getHenkousikibetukey(), "100", "変更識別キー");
        exDateEquals(bAK_KihrkmpSeisanRireki.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150101"), "効力発生日");
        exClassificationEquals(bAK_KihrkmpSeisanRireki.get(0).getKihrkpssnaiyoukbn(), C_KiharaiPseisanNaiyouKbn.SEISANP, "既払込Ｐ精算内容区分");
        exDateYMEquals(bAK_KihrkmpSeisanRireki.get(0).getJyuutouym(), BizDateYM.valueOf("201501"), "充当年月");
        exNumericEquals(bAK_KihrkmpSeisanRireki.get(0).getSeijyutoukaisuum(), 10, "精算充当回数（月）");
        exNumericEquals(bAK_KihrkmpSeisanRireki.get(0).getSeijyutoukaisuuy(), 20, "精算充当回数（年）");
        exClassificationEquals(bAK_KihrkmpSeisanRireki.get(0).getMisyuumikeikakbn(), C_MisyuumikeikaKbn.MIKEIKAP, "未収未経過区分");
        exClassificationEquals(bAK_KihrkmpSeisanRireki.get(0).getRstuukasyu(), C_Tuukasyu.JPY, "領収通貨種類");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki.get(0).getSeisanpgoukei(), BizCurrency.valueOf(10001), "精算保険料合計");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki.get(0).getYenkansansspgoukei(), BizCurrency.valueOf(1000000001), "円換算精算保険料合計");
        exDateEquals(bAK_KihrkmpSeisanRireki.get(0).getYenkansantkykwsrateymd(), BizDate.valueOf("20100101"), "円換算適用為替レート基準日");
        assertEquals("円換算適用為替レート", bAK_KihrkmpSeisanRireki.get(0).getYenkansantkykwsrate(), BizNumber.valueOf(101));
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki.get(0).getHenkank(), BizCurrency.valueOf(10002), "返還金");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki.get(0).getYenkansanhenkankin(), BizCurrency.valueOf(1000000001), "円換算返還金");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki.get(0).getTuityouk(), BizCurrency.valueOf(10003), "追徴金");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki.get(0).getYenkansantuityoukin(), BizCurrency.valueOf(1000000001), "円換算追徴金");
        exDateEquals(bAK_KihrkmpSeisanRireki.get(0).getZeimukwsratekjnymd(), BizDate.valueOf("20100101"), "税務用為替レート基準日");
        assertEquals("税務用為替レート", bAK_KihrkmpSeisanRireki.get(0).getZeimukwsrate(), BizNumber.valueOf(101));
        exStringEquals(bAK_KihrkmpSeisanRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KihrkmpSeisanRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KihrkmpSeisanRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KoujyoSymKanri> bAK_KoujyoSymKanri = bAK_KykKihon.getBAKKoujyoSymKanris();
        exStringEquals(bAK_KoujyoSymKanri.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KoujyoSymKanri.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KoujyoSymKanri.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KoujyoSymKanri.get(0).getNendo(), "2015", "年度");
        exDateYMEquals(bAK_KoujyoSymKanri.get(0).getLastsyoumeiendym(), BizDateYM.valueOf("201501"), "最終証明終了年月");
        exStringEquals(bAK_KoujyoSymKanri.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KoujyoSymKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KoujyoSymKanri.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KoujyoSymNaiyou> bAK_KoujyoSymNaiyou = bAK_KykKihon.getBAKKoujyoSymNaiyous();
        exStringEquals(bAK_KoujyoSymNaiyou.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KoujyoSymNaiyou.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KoujyoSymNaiyou.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KoujyoSymNaiyou.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_KoujyoSymNaiyou.get(0).getRenno3keta(), 123, "連番（３桁）");
        exStringEquals(bAK_KoujyoSymNaiyou.get(0).getKoujyosyoumeinnd(), "2015", "控除証明年度");
        exDateYMEquals(bAK_KoujyoSymNaiyou.get(0).getSyoumeistartym(), BizDateYM.valueOf("201501"), "証明開始年月");
        exDateYMEquals(bAK_KoujyoSymNaiyou.get(0).getSyoumeiendym(), BizDateYM.valueOf("201502"), "証明終了年月");
        exClassificationEquals(bAK_KoujyoSymNaiyou.get(0).getKoujyosyoumeipkbn(), C_KoujyosyoumeipKbn.NENKIN, "控除証明保険料区分");
        exClassificationEquals(bAK_KoujyoSymNaiyou.get(0).getTekiyouseidokbn(), C_TekiyouseidoKbn.NEWSD, "適用制度区分");
        exClassificationEquals(bAK_KoujyoSymNaiyou.get(0).getKoujyosymnaiyoureckbn(), C_KoujyosymnaiyourecKbn.TUITYOUKIN, "控除証明内容レコード区分");
        exBizCalcbleEquals(bAK_KoujyoSymNaiyou.get(0).getKoujyosyoumeigk(), BizCurrency.valueOf(1001), "控除証明額");
        exDateYMEquals(bAK_KoujyoSymNaiyou.get(0).getJyutoustartym(), BizDateYM.valueOf("201503"), "充当開始年月");
        exNumericEquals(bAK_KoujyoSymNaiyou.get(0).getNyknjskrrkrenno(), 11, "入金実績履歴連番");
        exNumericEquals(bAK_KoujyoSymNaiyou.get(0).getKihrkpssrrkrenno(), 12, "既払込Ｐ精算履歴連番");
        exClassificationEquals(bAK_KoujyoSymNaiyou.get(0).getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.SUMI, "控除証明書発行済フラグ");
        exStringEquals(bAK_KoujyoSymNaiyou.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KoujyoSymNaiyou.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KoujyoSymNaiyou.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_Kouza bAK_Kouza = bAK_KykKihon.getBAKKouza();
        exStringEquals(bAK_Kouza.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Kouza.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Kouza.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_Kouza.getKokno(), "1000001", "顧客番号");
        exStringEquals(bAK_Kouza.getBankcd(), "0001", "銀行コード");
        exStringEquals(bAK_Kouza.getSitencd(), "001", "支店コード");
        exClassificationEquals(bAK_Kouza.getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_Kouza.getKouzano(), "1234567", "口座番号");
        exStringEquals(bAK_Kouza.getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exClassificationEquals(bAK_Kouza.getSinkeizkkbn(), C_SinkeizkKbn.HENKOU, "新規継続区分");
        exClassificationEquals(bAK_Kouza.getSyuudaikocd(), C_Syuudaikocd.ZENSINKYOU, "収納代行社コード");
        exStringEquals(bAK_Kouza.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Kouza.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Kouza.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_TeikikinKouza bAK_TeikikinKouza = bAK_KykKihon.getBAKTeikikinKouza();
        exStringEquals(bAK_TeikikinKouza.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TeikikinKouza.getSyono(), "12806345672", "証券番号");
        exClassificationEquals(bAK_TeikikinKouza.getKzsyuruikbn(), C_KouzasyuruiKbn.YENKOUZA, "口座種類区分");
        exStringEquals(bAK_TeikikinKouza.getBankcd(), "0001", "銀行コード");
        exStringEquals(bAK_TeikikinKouza.getSitencd(), "001", "支店コード");
        exClassificationEquals(bAK_TeikikinKouza.getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_TeikikinKouza.getKouzano(), "1234567", "口座番号");
        exStringEquals(bAK_TeikikinKouza.getKzmeiginmkn(), "口座名義人氏名（カナ）", "口座名義人氏名（カナ）");
        exStringEquals(bAK_TeikikinKouza.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TeikikinKouza.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TeikikinKouza.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KykDairiten> bAK_KykDairiten = bAK_KykKihon.getBAKKykDairitens();
        exStringEquals(bAK_KykDairiten.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykDairiten.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykDairiten.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KykDairiten.get(0).getDrtenrenno(), 3, "代理店連番");
        exStringEquals(bAK_KykDairiten.get(0).getDrtencd(), "10001", "代理店コード");
        exStringEquals(bAK_KykDairiten.get(0).getDrtenkanrisosikicd(), "1000001", "代理店管理組織コード");
        exStringEquals(bAK_KykDairiten.get(0).getGyousekikeijyousakisosikicd(), "1000001", "業績計上先組織コード");
        exStringEquals(bAK_KykDairiten.get(0).getOyadrtencd(), "10003", "親代理店コード");
        exStringEquals(bAK_KykDairiten.get(0).getBosyuucd(), "100001", "募集人コード");
        exStringEquals(bAK_KykDairiten.get(0).getDaibosyuucd(), "100001", "代表募集人コード");
        exClassificationEquals(bAK_KykDairiten.get(0).getDrtenbunumu(), C_UmuKbn.NONE, "代理店分担有無");
        exClassificationEquals(bAK_KykDairiten.get(0).getKanjidrtflg(), C_Kanjidrtflg.KANJI, "幹事代理店フラグ");
        assertEquals("分担割合", bAK_KykDairiten.get(0).getBunwari(), BizNumber.valueOf(100));
        exDateEquals(bAK_KykDairiten.get(0).getIkanymd(), BizDate.valueOf("20150801"), "移管日");
        exStringEquals(bAK_KykDairiten.get(0).getBsyujoyadrtencd(), "10004", "募集時親代理店コード");
        exStringEquals(bAK_KykDairiten.get(0).getBsyujdrtencd(), "10005", "募集時代理店コード");
        exStringEquals(bAK_KykDairiten.get(0).getBsyujbosyuutrkno(), "10006", "募集時募集人登録番号");
        exStringEquals(bAK_KykDairiten.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykDairiten.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykDairiten.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_KykSonotaTkyk bAK_KykSonotaTkyk = bAK_KykKihon.getBAKKykSonotaTkyk();
        exStringEquals(bAK_KykSonotaTkyk.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykSonotaTkyk.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykSonotaTkyk.getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_KykSonotaTkyk.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getStdrsktkyhkumu(), C_UmuKbn.NONE, "指定代理請求特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getStdrsktkyhkymd(), BizDate.valueOf("20150101"), "指定代理請求特約付加日");
        exClassificationEquals(bAK_KykSonotaTkyk.getYennykntkhkumu(), C_UmuKbn.ARI, "円入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getGaikanykntkhkumu(), C_UmuKbn.ARI, "外貨入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getYenshrkykkykhenkoymd(), BizDate.valueOf("20100101"), "円支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkgkkateitkumu(), C_UmuKbn.NONE, "年金額確定特約有無");
        assertEquals("年金総額保証割合", bAK_KykSonotaTkyk.getNksgkhosyuwari(), BizNumber.valueOf(25));
        exClassificationEquals(bAK_KykSonotaTkyk.getSkjbrnktsumu(), C_UmuKbn.NONE, "即時払年金特則有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku8waritkumu(), C_UmuKbn.ARI, "年金額８割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku9waritkumu(), C_UmuKbn.NONE, "年金額９割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkyentkhukaumu(), C_UmuKbn.ARI, "年金円支払特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getKwsttkhukaumu(), C_UmuKbn.NONE, "為替ターゲット特約付加有無");
        exNumericEquals(bAK_KykSonotaTkyk.getKwstargetrate(), 19, "為替ターゲットレート");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkhkumu(), C_UmuKbn.ARI, "ターゲット特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getTargettkykkykhenkoymd(), BizDate.valueOf("20100101"), "ターゲット特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkkbn(), C_TargetTkKbn.SYUUSIN, "ターゲット特約区分");
        exNumericEquals(bAK_KykSonotaTkyk.getTargettkmokuhyouti(), 123, "ターゲット特約目標値");
        exClassificationEquals(bAK_KykSonotaTkyk.getYsknkshtkumu(), C_UmuKbn.ARI, "新遺族年金支払特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkkykymd(), BizDate.valueOf("20150104"), "保険料免除特約契約日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtksknnkaisiymd(), BizDate.valueOf("20150105"), "保険料免除特約責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkgansknnkaisiymd(), BizDate.valueOf("20150106"), "保険料免除特約がん責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmhktsknnkaisiymd(), BizDate.valueOf("20150107"), "保険料免除特約復活責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjhktgansknnkaisiymd(), BizDate.valueOf("20150108"), "保険料免除特約復活がん責任開始日");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd1(), "111", "保険料免除特約不担保部位コード１");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn1(), C_Htnpkkn.ONE, "保険料免除特約不担保期間１");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd2(), "222", "保険料免除特約不担保部位コード２");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn2(), C_Htnpkkn.TOW, "保険料免除特約不担保期間２");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd3(), "333", "保険料免除特約不担保部位コード３");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn3(), C_Htnpkkn.THREE, "保険料免除特約不担保期間３");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd4(), "444", "保険料免除特約不担保部位コード４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn4(), C_Htnpkkn.FOUR, "保険料免除特約不担保期間４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "保険料免除特約特定高度障害不担保区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getSknnkaisikitkkbn(), C_SknnkaisikitkKbn.SKNNKAISIKITK, "責任開始期特約区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getNkshrtkykhenkoymd(), BizDate.valueOf("20100101"), "年金支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukkn(), 10, "年金支払特約年金期間");

        exClassificationEquals(bAK_KykSonotaTkyk.getInitsbjiyensitihsytkhukaumu(), C_UmuKbn.NONE, "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(bAK_KykSonotaTkyk.getInitsbjiyenkasaiteihsygk(), BizCurrency.valueOf(101), "初期死亡時円換算最低保証額");
        exClassificationEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaumu(), C_UmuKbn.NONE, "重度介護前払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaymd(),  BizDate.valueOf("20100101"), "重度介護前払特約付加日");

        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_KykSya bAK_KykSya = bAK_KykKihon.getBAKKykSya();
        exStringEquals(bAK_KykSya.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykSya.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykSya.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KykSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_KykSya.getKyksakuinmeino(), "1000000001", "契約者索引名番号");
        exStringEquals(bAK_KykSya.getKyknmkn(), "契約名カナ（本ＴＢＬ）", "契約者名（カナ）");
        exStringEquals(bAK_KykSya.getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exClassificationEquals(bAK_KykSya.getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exDateEquals(bAK_KykSya.getKykseiymd(), BizDate.valueOf("20150201"), "契約者生年月日");
        exClassificationEquals(bAK_KykSya.getKyksei(), C_Kyksei.FEMALE, "契約者性別");
        exClassificationEquals(bAK_KykSya.getKkkyktdk(), C_Tdk.SONOTA, "契約管理契約者続柄");
        exStringEquals(bAK_KykSya.getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_KykSya.getTsinadr1kn(), "通信先住所１カナ１", "通信先住所１（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr1kj(), "通信先住所１漢字１", "通信先住所１（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr2kn(), "通信先住所２カナ１", "通信先住所２（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr2kj(), "通信先住所２漢字１", "通信先住所２（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr3kn(), "通信先住所３カナ１", "通信先住所３（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr3kj(), "通信先住所３漢字１", "通信先住所３（漢字）");
        exStringEquals(bAK_KykSya.getTsintelno(),null, "通信先電話番号");
        exStringEquals(bAK_KykSya.getDai2tsintelno(), null, "第２通信先電話番号");
        exStringEquals(bAK_KykSya.getTsinmailaddress(), "test1@test.com", "通信先メールアドレス");
        exStringEquals(bAK_KykSya.getKinmusakinm(), "勤務先名１", "勤務先名");
        exClassificationEquals(bAK_KykSya.getHjndaiykkbn(), C_HjndaiykKbn.SYOTYOU, "法人代表者役職区分");
        exStringEquals(bAK_KykSya.getHjndaiyknm(), "法人代表者役職名１", "法人代表者役職名");
        exStringEquals(bAK_KykSya.getHjndainmkn(), "法人代表者名カナ１", "法人代表者名（カナ）");
        exStringEquals(bAK_KykSya.getHjndainmkj(), "法人代表者名漢字１", "法人代表者名（漢字）");
        exStringEquals(bAK_KykSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KykSyouhn> bAK_KykSyouhn = bAK_KykKihon.getBAKKykSyouhns();
        exStringEquals(bAK_KykSyouhn.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykSyouhn.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykSyouhn.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_KykSyouhn.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_KykSyouhn.get(0).getSyouhncd(), "0001", "商品コード");
        exNumericEquals(bAK_KykSyouhn.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_KykSyouhn.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_KykSyouhn.get(0).getHenkousikibetukey(), "456", "変更識別キー");
        exClassificationEquals(bAK_KykSyouhn.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(bAK_KykSyouhn.get(0).getKykjyoutai(), C_Kykjyoutai.IKKATUNK, "契約状態");
        exClassificationEquals(bAK_KykSyouhn.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.MNRY, "消滅事由");
        exDateEquals(bAK_KykSyouhn.get(0).getSyoumetuymd(), BizDate.valueOf("20150501"), "消滅日");
        exDateEquals(bAK_KykSyouhn.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150502"), "効力発生日");
        exDateEquals(bAK_KykSyouhn.get(0).getKykymd(), BizDate.valueOf("20150503"), "契約日");
        exClassificationEquals(bAK_KykSyouhn.get(0).getKykymdsiteiumukbn(), C_UmuKbn.ARI, "契約日指定有無区分");
        exDateEquals(bAK_KykSyouhn.get(0).getSknnkaisiymd(), BizDate.valueOf("20150504"), "責任開始日");
        exDateEquals(bAK_KykSyouhn.get(0).getGansknnkaisiymd(), BizDate.valueOf("20150505"), "がん責任開始日");
        exDateEquals(bAK_KykSyouhn.get(0).getHksknnkaisiymd(), BizDate.valueOf("20150506"), "復活責任開始日");
        exDateEquals(bAK_KykSyouhn.get(0).getHkgansknnkaisiymd(), BizDate.valueOf("20150507"), "復活がん責任開始日");
        exClassificationEquals(bAK_KykSyouhn.get(0).getHknkknsmnkbn(), C_HknkknsmnKbn.SAIMANKI, "保険期間歳満期区分");
        exNumericEquals(bAK_KykSyouhn.get(0).getHknkkn(), 50, "保険期間");
        exClassificationEquals(bAK_KykSyouhn.get(0).getHrkkknsmnkbn(), C_HrkkknsmnKbn.NENMANKI, "払込期間歳満期区分");
        exNumericEquals(bAK_KykSyouhn.get(0).getHrkkkn(), 55, "払込期間");
        exNumericEquals(bAK_KykSyouhn.get(0).getKyknen(), 45, "契約者年齢");
        exNumericEquals(bAK_KykSyouhn.get(0).getHhknnen(), 46, "被保険者年齢");
        exDateEquals(bAK_KykSyouhn.get(0).getHhknseiymd(), BizDate.valueOf("20100101"), "被保険者生年月日");
        exClassificationEquals(bAK_KykSyouhn.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(bAK_KykSyouhn.get(0).getHaraimanymd(), BizDate.valueOf("20150508"), "払満日");
        exDateEquals(bAK_KykSyouhn.get(0).getHknkknmanryouymd(), BizDate.valueOf("20150509"), "保険期間満了日");
        exClassificationEquals(bAK_KykSyouhn.get(0).getKatakbn(), C_KataKbn.GKYUFGK_20, "型区分");
        exClassificationEquals(bAK_KykSyouhn.get(0).getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exClassificationEquals(bAK_KykSyouhn.get(0).getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(bAK_KykSyouhn.get(0).getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(bAK_KykSyouhn.get(0).getRokudaildkbn(), C_6daiLdKbn.BLNK, "６大生活習慣病追加給付型区分");
        exClassificationEquals(bAK_KykSyouhn.get(0).getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exBizCalcbleEquals(bAK_KykSyouhn.get(0).getKihons(), BizCurrency.valueOf(1000), "基本Ｓ");
        exBizCalcbleEquals(bAK_KykSyouhn.get(0).getHokenryou(), BizCurrency.valueOf(1001), "保険料");
        exClassificationEquals(bAK_KykSyouhn.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exStringEquals(bAK_KykSyouhn.get(0).getRyouritusdno(), "3", "料率世代番号");
        assertEquals("予定利率", bAK_KykSyouhn.get(0).getYoteiriritu(), BizNumber.valueOf(1));
        assertEquals("予定利率変動時保証利率", bAK_KykSyouhn.get(0).getYoteirrthendohosyurrt(), BizNumber.valueOf(1));
        exNumericEquals(bAK_KykSyouhn.get(0).getYtirrthndmnskaisuu(), 10, "予定利率変動見直回数");
        exClassificationEquals(bAK_KykSyouhn.get(0).getNksyukbn(), C_Nenkinsyu.KAKUTEINENKIN, "年金種類区分");
        exNumericEquals(bAK_KykSyouhn.get(0).getNenkinkkn(), 10, "年金期間");
        exNumericEquals(bAK_KykSyouhn.get(0).getNkgnshosyouritu(), 1, "年金原資最低保証率");
        exBizCalcbleEquals(bAK_KykSyouhn.get(0).getNkgnshosyougk(), BizCurrency.valueOf(1000000001), "年金原資最低保証額");
        exStringEquals(bAK_KykSyouhn.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSyouhn.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSyouhn.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KykUkt> bAK_KykUkt = bAK_KykKihon.getBAKKykUkts();
        exStringEquals(bAK_KykUkt.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykUkt.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykUkt.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_KykUkt.get(0).getUktsyukbn(), C_UktsyuKbn.SONOTA, "受取人種類区分");
        exNumericEquals(bAK_KykUkt.get(0).getUktsyurenno(), 1, "受取人種類別連番");
        exStringEquals(bAK_KykUkt.get(0).getKokno(), "11111111", "顧客番号");
        exClassificationEquals(bAK_KykUkt.get(0).getUktkbn(), C_UktKbn.KYK, "受取人区分");
        exStringEquals(bAK_KykUkt.get(0).getUktnmkn(), "受取人名（カナ）１", "受取人名（カナ）");
        exStringEquals(bAK_KykUkt.get(0).getUktnmkj(), "受取人名（漢字）１", "受取人名（漢字）");
        exClassificationEquals(bAK_KykUkt.get(0).getUktnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "受取人名漢字化不可区分");
        exDateEquals(bAK_KykUkt.get(0).getUktseiymd(), BizDate.valueOf("20150601"), "受取人生年月日");
        exClassificationEquals(bAK_KykUkt.get(0).getUkttdk(), C_Tdk.HONNIN, "受取人続柄");
        assertEquals("受取人分割割合", bAK_KykUkt.get(0).getUktbnwari(), BizNumber.valueOf(100));
        exStringEquals(bAK_KykUkt.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykUkt.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykUkt.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_NyknJissekiRireki> bAK_NyknJissekiRireki = bAK_KykKihon.getBAKNyknJissekiRirekis();
        exStringEquals(bAK_NyknJissekiRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_NyknJissekiRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_NyknJissekiRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateYMEquals(bAK_NyknJissekiRireki.get(0).getJyutoustartym(), BizDateYM.valueOf("201501"), "充当開始年月");
        exNumericEquals(bAK_NyknJissekiRireki.get(0).getRenno(), 5, "連番");
        exDateYMEquals(bAK_NyknJissekiRireki.get(0).getJyutouendym(), BizDateYM.valueOf("201502"), "充当終了年月");
        exBizCalcbleEquals(bAK_NyknJissekiRireki.get(0).getRsgaku(), BizCurrency.valueOf(1000000001), "領収金額");
        exClassificationEquals(bAK_NyknJissekiRireki.get(0).getRstuukasyu(), C_Tuukasyu.JPY, "領収通貨種類");
        exDateEquals(bAK_NyknJissekiRireki.get(0).getRyosyukwsratekjymd(), BizDate.valueOf("20100101"), "領収為替レート基準日");
        assertEquals("領収為替レート", bAK_NyknJissekiRireki.get(0).getRyosyukwsrate(), BizNumber.valueOf(101));
        exBizCalcbleEquals(bAK_NyknJissekiRireki.get(0).getHrkp(), BizCurrency.valueOf(100002), "払込保険料");
        exBizCalcbleEquals(bAK_NyknJissekiRireki.get(0).getIktwaribikikgk(), BizCurrency.valueOf(100003), "一括割引料");
        exDateEquals(bAK_NyknJissekiRireki.get(0).getNyksyoriymd(), BizDate.valueOf("20150101"), "入金処理日");
        exDateEquals(bAK_NyknJissekiRireki.get(0).getRyosyuymd(), BizDate.valueOf("20150102"), "領収日");
        exStringEquals(bAK_NyknJissekiRireki.get(0).getNykdenno(), "1234567890", "入金伝票番号");
        exDateEquals(bAK_NyknJissekiRireki.get(0).getNykdenymd(), BizDate.valueOf("20150103"), "入金伝票日付");
        exClassificationEquals(bAK_NyknJissekiRireki.get(0).getNykkeiro(), C_Nykkeiro.SKEI, "入金経路");
        exClassificationEquals(bAK_NyknJissekiRireki.get(0).getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exNumericEquals(bAK_NyknJissekiRireki.get(0).getJyutoukaisuuy(), 15, "充当回数（年）");
        exNumericEquals(bAK_NyknJissekiRireki.get(0).getJyutoukaisuum(), 6, "充当回数（月）");
        exClassificationEquals(bAK_NyknJissekiRireki.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.SYOKAIP, "入金内容区分");
        exClassificationEquals(bAK_NyknJissekiRireki.get(0).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exClassificationEquals(bAK_NyknJissekiRireki.get(0).getNyktrksflg(), C_Nyktrksflg.BLNK, "入金取消フラグ");
        exDateEquals(bAK_NyknJissekiRireki.get(0).getNyktrksymd(), BizDate.valueOf("20150201"), "入金取消処理日");
        exStringEquals(bAK_NyknJissekiRireki.get(0).getNyktrksdenno(), "9999999999", "入金取消伝票番号");
        exDateEquals(bAK_NyknJissekiRireki.get(0).getNyktrksdenymd(), BizDate.valueOf("20150202"), "入金取消伝票日付");
        exBizCalcbleEquals(bAK_NyknJissekiRireki.get(0).getYenkansannyknkingk(), BizCurrency.valueOf(1000000001), "円換算入金額");
        exDateEquals(bAK_NyknJissekiRireki.get(0).getYenkansantkykwsrateymd(), BizDate.valueOf("20100101"), "円換算適用為替レート基準日");
        assertEquals("円換算適用為替レート", bAK_NyknJissekiRireki.get(0).getYenkansantkykwsrate(), BizNumber.valueOf(101));
        exStringEquals(bAK_NyknJissekiRireki.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exStringEquals(bAK_NyknJissekiRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyknJissekiRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyknJissekiRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_SyouhnTokujou> bAK_SyouhnTokujou = bAK_KykKihon.getBAKSyouhnTokujous();
        exStringEquals(bAK_SyouhnTokujou.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_SyouhnTokujou.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_SyouhnTokujou.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_SyouhnTokujou.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_SyouhnTokujou.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_SyouhnTokujou.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_SyouhnTokujou.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_SyouhnTokujou.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_SyouhnTokujou.get(0).getTkjyhyouten(), C_Tkjyhyouten.HYOUTEN225, "特条標点");
        exBizCalcbleEquals(bAK_SyouhnTokujou.get(0).getTkjyp(), BizCurrency.valueOf(100001), "特条保険料");
        exClassificationEquals(bAK_SyouhnTokujou.get(0).getTkjyskgnkkn(), C_Tkjyskgnkkn.Y5, "特条削減期間");
        exStringEquals(bAK_SyouhnTokujou.get(0).getHtnpbuicd1(), "111", "不担保部位コード１");
        exClassificationEquals(bAK_SyouhnTokujou.get(0).getHtnpkkn1(), C_Htnpkkn.ONE, "不担保期間１");
        exStringEquals(bAK_SyouhnTokujou.get(0).getHtnpbuicd2(), "222", "不担保部位コード２");
        exClassificationEquals(bAK_SyouhnTokujou.get(0).getHtnpkkn2(), C_Htnpkkn.TOW, "不担保期間２");
        exStringEquals(bAK_SyouhnTokujou.get(0).getHtnpbuicd3(), "333", "不担保部位コード３");
        exClassificationEquals(bAK_SyouhnTokujou.get(0).getHtnpkkn3(), C_Htnpkkn.THREE, "不担保期間３");
        exStringEquals(bAK_SyouhnTokujou.get(0).getHtnpbuicd4(), "444", "不担保部位コード４");
        exClassificationEquals(bAK_SyouhnTokujou.get(0).getHtnpkkn4(), C_Htnpkkn.FOUR, "不担保期間４");
        exClassificationEquals(bAK_SyouhnTokujou.get(0).getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "特定高度障害不担保区分");
        exStringEquals(bAK_SyouhnTokujou.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SyouhnTokujou.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_SyouhnTokujou.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_YykIdouAnsyuCreditCard> bAK_YykIdouAnsyuCreditCard = bAK_KykKihon.getBAKYykIdouAnsyuCreditCards();
        exStringEquals(bAK_YykIdouAnsyuCreditCard.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_YykIdouAnsyuCreditCard.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_YykIdouAnsyuCreditCard.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_YykIdouAnsyuCreditCard.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_YykIdouAnsyuCreditCard.get(0).getYukoukachkymd(), BizDate.valueOf("20150101"), "有効性確認日");
        exClassificationEquals(bAK_YykIdouAnsyuCreditCard.get(0).getYuukoukakujkkbn(), C_YuukoukakujkKbn.SUMI, "有効性確認状況区分");
        exClassificationEquals(bAK_YykIdouAnsyuCreditCard.get(0).getAuthorijkkbn(), C_AuthorijkKbn.NG, "オーソリ状況区分");
        exClassificationEquals(bAK_YykIdouAnsyuCreditCard.get(0).getAuthoritrkkbn(), C_AuthoritrkKbn.JITUGAKU, "オーソリ登録区分");
        exBizCalcbleEquals(bAK_YykIdouAnsyuCreditCard.get(0).getAuthorigk(), BizCurrency.valueOf(100001), "オーソリ金額");
        exDateEquals(bAK_YykIdouAnsyuCreditCard.get(0).getAuthorikanryoymd(), BizDate.valueOf("20150102"), "オーソリ完了日");
        exDateYMEquals(bAK_YykIdouAnsyuCreditCard.get(0).getJkipjytym(), BizDateYM.valueOf("201501"), "次回Ｐ充当年月");
        exStringEquals(bAK_YykIdouAnsyuCreditCard.get(0).getSyouninno(), "123456", "承認番号");
        exStringEquals(bAK_YykIdouAnsyuCreditCard.get(0).getTanmatusyorino(), "1234567", "端末処理通番");
        exStringEquals(bAK_YykIdouAnsyuCreditCard.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_YykIdouAnsyuCreditCard.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_YykIdouAnsyuCreditCard.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_YykIdouNaiyoHrhnk> bAK_YykIdouNaiyoHrhnk = bAK_KykKihon.getBAKYykIdouNaiyoHrhnks();
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_YykIdouNaiyoHrhnk.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150101"), "効力発生日");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk.get(0).getNewhrkkeiro(), C_Hrkkeiro.CREDIT, "（変更後）払込経路");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk.get(0).getNewhrkkaisuu(), C_Hrkkaisuu.NEN, "（変更後）払込回数");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk.get(0).getHrkkeirohnkumu(), C_UmuKbn.ARI, "払込経路変更有無区分");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk.get(0).getHrkkaisuuhnkumu(), C_UmuKbn.NONE, "払込回数変更有無区分");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk.get(0).getHaraikatahnkumu(), C_UmuKbn.ARI, "払方変更有無");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk.get(0).getHaraikatahnkuktknaiyoukbn(), C_HaraikatahnkuktknaiyouKbn.KAISUUKOUZAHENKOU, "払方変更受付内容区分");
        exBizCalcbleEquals(bAK_YykIdouNaiyoHrhnk.get(0).getHrkp(), BizCurrency.valueOf(1000001), "払込保険料");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk.get(0).getYokinkbn(), C_YokinKbn.BETUDAN, "預金種目区分");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getKouzano(), "1234567", "口座番号");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk.get(0).getSinkeizkkbn(), C_SinkeizkKbn.HENKOU, "新規継続区分");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk.get(0).getSyuudaikocd(), C_Syuudaikocd.ZENSINKYOU, "収納代行社コード");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getCardkaisyacd(), "15", "カード会社コード");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getCreditcardno1(), "999999999999991", "クレジットカード番号１");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getCreditcardno2(), "999999999999992", "クレジットカード番号２");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getCreditcardno3(), "999999999999993", "クレジットカード番号３");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getCreditcardno4(), "999999999999994", "クレジットカード番号４");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getCreditcardykkigen(), "999999999999995", "クレジットカード有効期限");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getCreditmeiginmkn(), "クレジットカード名義人氏名（カナ）１", "クレジットカード名義人氏名（カナ）");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_YykIdouNaiyoHrhnk.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_YykIdouUktk> bAK_YykIdouUktk = bAK_KykKihon.getBAKYykIdouUktks();
        exStringEquals(bAK_YykIdouUktk.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_YykIdouUktk.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_YykIdouUktk.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_YykIdouUktk.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exStringEquals(bAK_YykIdouUktk.get(0).getKinouId(), "testKinouId", "機能ＩＤ");
        exClassificationEquals(bAK_YykIdouUktk.get(0).getYykidousyorikbn(), C_YykidousyoriKbn.TORIKESI, "予約異動処理区分");
        exDateEquals(bAK_YykIdouUktk.get(0).getUktkymd(), BizDate.valueOf("20150101"), "受付日");
        exDateYMEquals(bAK_YykIdouUktk.get(0).getSyoriym(), BizDateYM.valueOf("201501"), "処理年月");
        exStringEquals(bAK_YykIdouUktk.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_YykIdouUktk.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_YykIdouUktk.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_HengakuUnit> bAK_HengakuUnit = bAK_KykKihon.getBAKHengakuUnits();
        exStringEquals(bAK_HengakuUnit.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HengakuUnit.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HengakuUnit.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_HengakuUnit.get(0).getUnitfundkbn(), C_UnitFundKbn.USDFUND, "ユニットファンド区分");
        exStringEquals(bAK_HengakuUnit.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_HengakuUnit.get(0).getUnitkouryokuhasseiymd(), BizDate.valueOf("20150101"), "ユニット効力発生日");
        exDateEquals(bAK_HengakuUnit.get(0).getUnitkouryokuendymd(), BizDate.valueOf("20150101"), "ユニット効力終了日");
        assertEquals("ユニット数", bAK_HengakuUnit.get(0).getUnitsuu(), BizNumber.valueOf(1));
        exNumericEquals(bAK_HengakuUnit.get(0).getFundhaibunwariai(), 1, "ファンド配分割合");
        exStringEquals(bAK_HengakuUnit.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HengakuUnit.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HengakuUnit.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KhTtdkRireki> bAK_KhTtdkRireki = bAK_KykKihon.getBAKKhTtdkRirekis();
        exStringEquals(bAK_KhTtdkRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhTtdkRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhTtdkRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhTtdkRireki.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_KhTtdkRireki.get(0).getSyoriYmd(), BizDate.valueOf("20150101"), "処理年月日");
        exStringEquals(bAK_KhTtdkRireki.get(0).getSyorisosikicd(), "1000001", "処理組織コード");
        exClassificationEquals(bAK_KhTtdkRireki.get(0).getShrsyousaiumu(), C_UmuKbn.ARI, "支払詳細有無区分");
        exClassificationEquals(bAK_KhTtdkRireki.get(0).getSyorikbn(), C_SyoriKbn.MUKOU, "処理区分");
        exClassificationEquals(bAK_KhTtdkRireki.get(0).getHonninkakninkekkakbn(), C_HonninKakninKekkaKbn.SUMI_SONOTA, "本人確認結果区分");
        exClassificationEquals(bAK_KhTtdkRireki.get(0).getHenkourrkumu(), C_UmuKbn.ARI, "変更履歴有無");
        exStringEquals(bAK_KhTtdkRireki.get(0).getSmbckanriid(), "12345678901", "ＳＭＢＣ受付管理ＩＤ");
        exStringEquals(bAK_KhTtdkRireki.get(0).getNayosekihontblskbtkey(), "12345678901234567890", "名寄せ基本テーブル識別キー");
        exStringEquals(bAK_KhTtdkRireki.get(0).getKouteikanriid(), "12345678901234567890", "工程管理ＩＤ");
        exStringEquals(bAK_KhTtdkRireki.get(0).getYoukyuuno(), "123456789012345678", "要求通番");
        exStringEquals(bAK_KhTtdkRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTtdkRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTtdkRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KhHenkouRireki> bAK_KhHenkouRireki = bAK_KhTtdkRireki.get(0).getBAKKhHenkouRirekis();
        exStringEquals(bAK_KhHenkouRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHenkouRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHenkouRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhHenkouRireki.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exNumericEquals(bAK_KhHenkouRireki.get(0).getRenno3keta(), 123, "連番");
        exStringEquals(bAK_KhHenkouRireki.get(0).getTablenm(), "テーブル名称１", "テーブル名称");
        exStringEquals(bAK_KhHenkouRireki.get(0).getTableid(), "テーブルＩＤ１", "テーブルＩＤ");
        exClassificationEquals(bAK_KhHenkouRireki.get(0).getHnksyuruikbn(), C_HnkSyuruiKbn.HENKOU, "変更種類区分");
        exStringEquals(bAK_KhHenkouRireki.get(0).getHanbetukoumokunm(), "判別項目名１", "判別項目名");
        exStringEquals(bAK_KhHenkouRireki.get(0).getHenkoukoumokuid(), "変更項目ID１", "変更項目ID");
        exStringEquals(bAK_KhHenkouRireki.get(0).getHenkoukoumokunm(), "変更項目名１", "変更項目名");
        exStringEquals(bAK_KhHenkouRireki.get(0).getBfrnaiyouoriginal(), "変更前内容原本１", "変更前内容原本");
        exStringEquals(bAK_KhHenkouRireki.get(0).getBfrnaiyou(), "変更前内容１", "変更前内容");
        exStringEquals(bAK_KhHenkouRireki.get(0).getNewnaiyouoriginal(), "変更後内容原本１", "変更後内容原本");
        exStringEquals(bAK_KhHenkouRireki.get(0).getNewnaiyou(), "変更後内容１", "変更後内容");
        exStringEquals(bAK_KhHenkouRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_KhShrRireki bAK_KhShrRireki = bAK_KhTtdkRireki.get(0).getBAKKhShrRireki();
        exStringEquals(bAK_KhShrRireki.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhShrRireki.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhShrRireki.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhShrRireki.getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_KhShrRireki.getShrymd(), BizDate.valueOf("20150101"), "支払日");
        exDateEquals(bAK_KhShrRireki.getShrsyoriymd(), BizDate.valueOf("20150102"), "支払処理日");
        exClassificationEquals(bAK_KhShrRireki.getShrsyorikbn(), C_ShrsyoriKbn.KYKTORIKESI, "支払処理区分");
        exClassificationEquals(bAK_KhShrRireki.getTorikesiflg(), C_UmuKbn.ARI, "取消フラグ");
        exDateEquals(bAK_KhShrRireki.getTorikesiymd(), BizDate.valueOf("20150103"), "取消日");
        exDateEquals(bAK_KhShrRireki.getSyoruiukeymd(), BizDate.valueOf("20150104"), "書類受付日");
        exDateEquals(bAK_KhShrRireki.getKouryokuhasseiymd(), BizDate.valueOf("20150105"), "効力発生日");
        exDateEquals(bAK_KhShrRireki.getShrtienrskkisanymd(), BizDate.valueOf("20150105"), "支払遅延利息起算日");
        exNumericEquals(bAK_KhShrRireki.getTienrsknissuu(), 100, "遅延利息日数");
        exClassificationEquals(bAK_KhShrRireki.getSinsagendokknkbn(),null, "審査限度期間区分");
        exNumericEquals(bAK_KhShrRireki.getRikoukityuutuudannissuu(), 3, "履行期中断日数");
        exClassificationEquals(bAK_KhShrRireki.getZeitratkikbn(),null, "税取扱区分");
        exClassificationEquals(bAK_KhShrRireki.getGsbunritaisyou(), C_UmuKbn.ARI, "源泉分離課税対象");
        exClassificationEquals(bAK_KhShrRireki.getYenshrtkumu(), C_UmuKbn.ARI, "円支払特約有無");
        exClassificationEquals(bAK_KhShrRireki.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhShrRireki.getShrgkkei(), BizCurrency.valueOf(1000000001), "支払額合計");
        exClassificationEquals(bAK_KhShrRireki.getSyushrgkkeisyukbn(), C_SyuShrgkSyoukeiKbn.W, "主たる支払額小計種類区分");
        exBizCalcbleEquals(bAK_KhShrRireki.getSyushrgkkei(), BizCurrency.valueOf(100001), "主たる支払額小計");
        exBizCalcbleEquals(bAK_KhShrRireki.getMikeikap(), BizCurrency.valueOf(100004), "未経過保険料");
        exBizCalcbleEquals(bAK_KhShrRireki.getHaitoukin(), BizCurrency.valueOf(1000000001), "配当金");
        exBizCalcbleEquals(bAK_KhShrRireki.getSonotaseisangk(), BizCurrency.valueOf(100005), "その他精算額");
        exBizCalcbleEquals(bAK_KhShrRireki.getGstszeigk(), BizCurrency.valueOf(100006), "源泉徴収税額");
        exBizCalcbleEquals(bAK_KhShrRireki.getShrtienrsk(), BizCurrency.valueOf(100007), "支払遅延利息");
        exClassificationEquals(bAK_KhShrRireki.getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhShrRireki.getShrtuukashrgkgoukei(), BizCurrency.valueOf(1000000001), "支払通貨支払額合計");
        exBizCalcbleEquals(bAK_KhShrRireki.getShrtuukasyushrgkkei(), BizCurrency.valueOf(1000000001), "支払通貨主たる支払額小計");
        exBizCalcbleEquals(bAK_KhShrRireki.getShrtuukahaitoukin(), BizCurrency.valueOf(1000000001), "支払通貨配当金");
        exBizCalcbleEquals(bAK_KhShrRireki.getShrtuukasonotaseisangk(), BizCurrency.valueOf(1000000001), "支払通貨その他精算額");
        exBizCalcbleEquals(bAK_KhShrRireki.getShrtuukagstszeigk(), BizCurrency.valueOf(1000000001), "支払通貨源泉徴収税額");
        exBizCalcbleEquals(bAK_KhShrRireki.getShrtuukashrtienrsk(), BizCurrency.valueOf(1000000001), "支払通貨支払遅延利息");
        exBizCalcbleEquals(bAK_KhShrRireki.getYenshrgkgoukei(), BizCurrency.valueOf(1000000001), "円換算支払額合計");
        exBizCalcbleEquals(bAK_KhShrRireki.getYensyushrgkkei(), BizCurrency.valueOf(1000000001), "円換算主たる支払額小計");
        exBizCalcbleEquals(bAK_KhShrRireki.getYenkansanhaitoukin(), BizCurrency.valueOf(1000000001), "円換算配当金");
        exBizCalcbleEquals(bAK_KhShrRireki.getYenkansansonotaseisangk(), BizCurrency.valueOf(1000000001), "円換算その他精算額");
        exBizCalcbleEquals(bAK_KhShrRireki.getYenmikeikap(), BizCurrency.valueOf(1000000001), "円換算未経過保険料");
        exBizCalcbleEquals(bAK_KhShrRireki.getYengstszeigk(), BizCurrency.valueOf(1000000001), "円換算源泉徴収税額");
        exBizCalcbleEquals(bAK_KhShrRireki.getYengstszeigknationaltax(), BizCurrency.valueOf(1000000001), "円換算源泉徴収税額（国税）");
        exBizCalcbleEquals(bAK_KhShrRireki.getYengstszeigklocaltax(), BizCurrency.valueOf(1000000001), "円換算源泉徴収税額（地方税）");
        exStringEquals(bAK_KhShrRireki.getNztodouhukencd(), "10", "納税先都道府県コード");
        exBizCalcbleEquals(bAK_KhShrRireki.getYenshrtienrsk(), BizCurrency.valueOf(1000000001), "円換算支払遅延利息");
        exBizCalcbleEquals(bAK_KhShrRireki.getHtykeihi(), BizCurrency.valueOf(100009), "必要経費");
        exBizCalcbleEquals(bAK_KhShrRireki.getKztgk(), BizCurrency.valueOf(100010), "課税対象額");
        exBizCalcbleEquals(bAK_KhShrRireki.getYenhtykeihi(), BizCurrency.valueOf(100011), "円換算必要経費");
        exBizCalcbleEquals(bAK_KhShrRireki.getYenkztgk(), BizCurrency.valueOf(100012), "円換算課税対象額");
        exDateEquals(bAK_KhShrRireki.getShrkwsratekjnymd(), BizDate.valueOf("20100101"), "支払時為替レート基準日");
        assertEquals("支払時為替レート", bAK_KhShrRireki.getShrkwsrate(), BizNumber.valueOf(101));
        exDateEquals(bAK_KhShrRireki.getZeimukwsratekjnymd(), BizDate.valueOf("20100101"), "税務用為替レート基準日");
        assertEquals("税務用為替レート", bAK_KhShrRireki.getZeimukwsrate(), BizNumber.valueOf(101));
        exClassificationEquals(bAK_KhShrRireki.getSoukinsakisiteikbn(), C_SoukinsakisiteiKbn.KYK, "送金先指定区分");
        exStringEquals(bAK_KhShrRireki.getSoukinsakinmkn(), "送金先氏名（カナ）", "送金先氏名（カナ）");
        exStringEquals(bAK_KhShrRireki.getSoukinsakinmkj(), "送金先氏名（漢字）", "送金先氏名（漢字）");
        exStringEquals(bAK_KhShrRireki.getSoukinsakiyno(), "1000001", "送金先郵便番号");
        exStringEquals(bAK_KhShrRireki.getSoukinsakiadr1kj(), "送金先住所１（漢字）", "送金先住所１（漢字）");
        exStringEquals(bAK_KhShrRireki.getSoukinsakiadr2kj(), "送金先住所２（漢字）", "送金先住所２（漢字）");
        exStringEquals(bAK_KhShrRireki.getSoukinsakiadr3kj(), "送金先住所３（漢字）", "送金先住所３（漢字）");
        exStringEquals(bAK_KhShrRireki.getKyksyaszknmkn(), "契約者相続人氏名（カナ）１", "契約者相続人氏名（カナ）");
        exStringEquals(bAK_KhShrRireki.getKyksyaszknmkj(), "契約者相続人氏名（漢字）１", "契約者相続人氏名（漢字）");
        exStringEquals(bAK_KhShrRireki.getKyksyaszkyno(), "1112222", "契約者相続人郵便番号");
        exStringEquals(bAK_KhShrRireki.getKyksyaszkadr1kj(), "契約者相続人住所１（漢字）１", "契約者相続人住所１（漢字）");
        exStringEquals(bAK_KhShrRireki.getKyksyaszkadr2kj(), "契約者相続人住所２（漢字）１", "契約者相続人住所２（漢字）");
        exStringEquals(bAK_KhShrRireki.getKyksyaszkadr3kj(), "契約者相続人住所３（漢字）１", "契約者相続人住所３（漢字）");
        exStringEquals(bAK_KhShrRireki.getSaikennmkj(), "債権者氏名（漢字）", "債権者氏名（漢字）");
        exStringEquals(bAK_KhShrRireki.getSaikennyno(), "1000001", "債権者郵便番号");
        exStringEquals(bAK_KhShrRireki.getSaikenadr1kj(), "債権者住所１（漢字）", "債権者住所１（漢字）");
        exStringEquals(bAK_KhShrRireki.getSaikenadr2kj(), "債権者住所２（漢字）", "債権者住所２（漢字）");
        exStringEquals(bAK_KhShrRireki.getSaikenadr3kj(), "債権者住所３（漢字）", "債権者住所３（漢字）");
        exClassificationEquals(bAK_KhShrRireki.getInputshrhousiteikbn(), C_InputShrhousiteiKbn.FBSOUKIN, "入力用支払方法指定区分");
        exClassificationEquals(bAK_KhShrRireki.getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exClassificationEquals(bAK_KhShrRireki.getKzsyuruikbn(), C_KouzasyuruiKbn.YENKOUZA, "口座種類区分");
        exStringEquals(bAK_KhShrRireki.getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_KhShrRireki.getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_KhShrRireki.getYokinkbn(), C_YokinKbn.TUMITATE, "預金種目区分");
        exStringEquals(bAK_KhShrRireki.getKouzano(), "1234567", "口座番号");
        exClassificationEquals(bAK_KhShrRireki.getKzdoukbn(), C_Kzdou.DOUITU, "口座名義人同一区分");
        exStringEquals(bAK_KhShrRireki.getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exStringEquals(bAK_KhShrRireki.getKykmnmeigibangou(), "101", "契約者ＭＮ名義番号");
        exStringEquals(bAK_KhShrRireki.getUktmnmeigibangou(), "101", "受取人ＭＮ名義番号");
        exClassificationEquals(bAK_KhShrRireki.getShrtysysyuruikbn(), C_HtsiryosyuKbn.ITJKNSHRTYOUSYO, "支払調書種類区分");
        exStringEquals(bAK_KhShrRireki.getDenrenno(), "1001", "伝票データ連番");
        exStringEquals(bAK_KhShrRireki.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhShrRireki.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhShrRireki.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KhShrRirekiDetail> bAK_KhShrRirekiDetail = bAK_KhShrRireki.getBAKKhShrRirekiDetails();
        exStringEquals(bAK_KhShrRirekiDetail.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhShrRirekiDetail.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhShrRirekiDetail.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhShrRirekiDetail.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exStringEquals(bAK_KhShrRirekiDetail.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_KhShrRirekiDetail.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_KhShrRirekiDetail.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail.get(0).getSyushrgk(), BizCurrency.valueOf(100001), "主たる支払額");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail.get(0).getShrtstmttkin(), BizCurrency.valueOf(100002), "支払対象積立金");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail.get(0).getShrtstmttkinhngkbbn(), BizCurrency.valueOf(1000000001), "支払対象積立金（変額部分）");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail.get(0).getSjkkktyouseigk(), BizCurrency.valueOf(100003), "市場価格調整額");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail.get(0).getKaiyakusjkkktyouseiritu(), null, "解約市場価格調整率");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail.get(0).getKaiyakusjkkktyouseiriritu(), null, "解約時市場価格調整用利率");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail.get(0).getKaiyakukjgk(), BizCurrency.valueOf(1000000001), "解約控除額");
        assertEquals("解約控除率", bAK_KhShrRirekiDetail.get(0).getKaiyakukoujyoritu(), BizNumber.valueOf(1));
        exStringEquals(bAK_KhShrRirekiDetail.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhShrRirekiDetail.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhShrRirekiDetail.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KykSyouhnRireki> bAK_KykSyouhnRireki = bAK_KhTtdkRireki.get(0).getBAKKykSyouhnRirekis();
        exStringEquals(bAK_KykSyouhnRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykSyouhnRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykSyouhnRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_KykSyouhnRireki.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_KykSyouhnRireki.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_KykSyouhnRireki.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_KykSyouhnRireki.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getKykjyoutai(), C_Kykjyoutai.ITIJIBARAI, "契約状態");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.KAIYAKU, "消滅事由");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getSyoumetuymd(), BizDate.valueOf("20150101"), "消滅日");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150102"), "効力発生日");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getKykymd(), BizDate.valueOf("20150103"), "契約日");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getKykymdsiteiumukbn(), C_UmuKbn.ARI, "契約日指定有無区分");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getSknnkaisiymd(), BizDate.valueOf("20150104"), "責任開始日");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getGansknnkaisiymd(), BizDate.valueOf("20150105"), "がん責任開始日");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getHksknnkaisiymd(), BizDate.valueOf("20150106"), "復活責任開始日");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getHkgansknnkaisiymd(), BizDate.valueOf("20150107"), "復活がん責任開始日");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(bAK_KykSyouhnRireki.get(0).getHknkkn(), 22, "保険期間");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(bAK_KykSyouhnRireki.get(0).getHrkkkn(), 11, "払込期間");
        exNumericEquals(bAK_KykSyouhnRireki.get(0).getKyknen(), 35, "契約者年齢");
        exNumericEquals(bAK_KykSyouhnRireki.get(0).getHhknnen(), 45, "被保険者年齢");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getHhknseiymd(), BizDate.valueOf("20100101"), "被保険者生年月日");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getHaraimanymd(), BizDate.valueOf("20150108"), "払満日");
        exDateEquals(bAK_KykSyouhnRireki.get(0).getHknkknmanryouymd(), BizDate.valueOf("20150109"), "保険期間満了日");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getKatakbn(), C_KataKbn.GKYUFGK_20, "型区分");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exBizCalcbleEquals(bAK_KykSyouhnRireki.get(0).getKihons(), BizCurrency.valueOf(100001), "基本Ｓ");
        exBizCalcbleEquals(bAK_KykSyouhnRireki.get(0).getHokenryou(), BizCurrency.valueOf(100002), "保険料");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exStringEquals(bAK_KykSyouhnRireki.get(0).getRyouritusdno(), "101", "料率世代番号");
        assertEquals("予定利率", bAK_KykSyouhnRireki.get(0).getYoteiriritu(), BizNumber.valueOf(1));
        assertEquals("予定利率変動時保証利率", bAK_KykSyouhnRireki.get(0).getYoteirrthendohosyurrt(), BizNumber.valueOf(1));
        exNumericEquals(bAK_KykSyouhnRireki.get(0).getYtirrthndmnskaisuu(), 10, "予定利率変動見直回数");
        exBizCalcbleEquals(bAK_KykSyouhnRireki.get(0).getKyksjkkktyouseiriritu(), null, "契約時市場価格調整用利率");
        exClassificationEquals(bAK_KykSyouhnRireki.get(0).getNksyukbn(), C_Nenkinsyu.KAKUTEINENKIN, "年金種類区分");
        exNumericEquals(bAK_KykSyouhnRireki.get(0).getNenkinkkn(), 10, "年金期間");
        exNumericEquals(bAK_KykSyouhnRireki.get(0).getNkgnshosyouritu(), 1, "年金原資最低保証率");
        exBizCalcbleEquals(bAK_KykSyouhnRireki.get(0).getNkgnshosyougk(), BizCurrency.valueOf(1000000001), "年金原資最低保証額");
        exStringEquals(bAK_KykSyouhnRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSyouhnRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSyouhnRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_SyouhnTokujouRireki> bAK_SyouhnTokujouRireki =  bAK_KhTtdkRireki.get(0).getBAKSyouhnTokujouRirekis();
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_SyouhnTokujouRireki.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_SyouhnTokujouRireki.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_SyouhnTokujouRireki.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_SyouhnTokujouRireki.get(0).getTkjyhyouten(), C_Tkjyhyouten.HYOUTEN225, "特条標点");
        exBizCalcbleEquals(bAK_SyouhnTokujouRireki.get(0).getTkjyp(), BizCurrency.valueOf(100001), "特条保険料");
        exClassificationEquals(bAK_SyouhnTokujouRireki.get(0).getTkjyskgnkkn(), C_Tkjyskgnkkn.Y5, "特条削減期間");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getHtnpbuicd1(), "111", "不担保部位コード１");
        exClassificationEquals(bAK_SyouhnTokujouRireki.get(0).getHtnpkkn1(), C_Htnpkkn.ONE, "不担保期間１");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getHtnpbuicd2(), "222", "不担保部位コード２");
        exClassificationEquals(bAK_SyouhnTokujouRireki.get(0).getHtnpkkn2(), C_Htnpkkn.TOW, "不担保期間２");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getHtnpbuicd3(), "333", "不担保部位コード３");
        exClassificationEquals(bAK_SyouhnTokujouRireki.get(0).getHtnpkkn3(), C_Htnpkkn.THREE, "不担保期間３");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getHtnpbuicd4(), "444", "不担保部位コード４");
        exClassificationEquals(bAK_SyouhnTokujouRireki.get(0).getHtnpkkn4(), C_Htnpkkn.FOUR, "不担保期間４");
        exClassificationEquals(bAK_SyouhnTokujouRireki.get(0).getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "特定高度障害不担保区分");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_SyouhnTokujouRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_HengakuUnitRireki> bAK_HengakuUnitRireki = bAK_KhTtdkRireki.get(0).getBAKHengakuUnitRirekis();
        exStringEquals(bAK_HengakuUnitRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HengakuUnitRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HengakuUnitRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_HengakuUnitRireki.get(0).getUnitfundkbn(), C_UnitFundKbn.USDFUND, "ユニットファンド区分");
        exStringEquals(bAK_HengakuUnitRireki.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_HengakuUnitRireki.get(0).getUnitkouryokuhasseiymd(), BizDate.valueOf("20150101"), "ユニット効力発生日");
        exDateEquals(bAK_HengakuUnitRireki.get(0).getUnitkouryokuendymd(), BizDate.valueOf("20150101"), "ユニット効力終了日");
        assertEquals("ユニット数", bAK_HengakuUnitRireki.get(0).getUnitsuu(), BizNumber.valueOf(1));
        exNumericEquals(bAK_HengakuUnitRireki.get(0).getFundhaibunwariai(), 1, "ファンド配分割合");
        exStringEquals(bAK_HengakuUnitRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HengakuUnitRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HengakuUnitRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_HengakuCf> bAK_HengakuCf = bAK_KhTtdkRireki.get(0).getBAKHengakuCfs();
        exStringEquals(bAK_HengakuCf.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HengakuCf.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HengakuCf.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_HengakuCf.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_HengakuCf.get(0).getUnitfundkbn(), C_UnitFundKbn.USDFUND, "ユニットファンド区分");
        exDateEquals(bAK_HengakuCf.get(0).getSyoriYmd(), BizDate.valueOf("20150101"), "処理年月日");
        exNumericEquals(bAK_HengakuCf.get(0).getRenno(), 1, "連番");
        exClassificationEquals(bAK_HengakuCf.get(0).getCfkbn(), C_CfKbn.BLNK, "ＣＦ区分");
        exClassificationEquals(bAK_HengakuCf.get(0).getHasseiriyuukbn(), C_HasseiRiyuuKbn.BLNK, "発生理由区分");
        exClassificationEquals(bAK_HengakuCf.get(0).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");

        List<IT_BAK_Tesuuryou> bAK_Tesuuryou = bAK_KykKihon.getBAKTesuuryous();
        exStringEquals(bAK_Tesuuryou.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Tesuuryou.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Tesuuryou.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_Tesuuryou.get(0).getTsrysyorikbn(), C_TsrysyoriKbn.HUKKATU, "手数料処理区分");
        exNumericEquals(bAK_Tesuuryou.get(0).getRenno(), 2, "連番");
        exDateEquals(bAK_Tesuuryou.get(0).getSyoriYmd(), BizDate.valueOf("20150701"), "処理年月日");
        exDateYMEquals(bAK_Tesuuryou.get(0).getKouryokuhasseiym(), BizDateYM.valueOf("201506"), "効力発生年月");
        exNumericEquals(bAK_Tesuuryou.get(0).getNyknkaisuuy(), 15, "入金回数（年）");
        exNumericEquals(bAK_Tesuuryou.get(0).getNyknkaisuum(), 14, "入金回数（月）");
        exClassificationEquals(bAK_Tesuuryou.get(0).getMikeikapariflg(), C_UmuKbn.ARI, "未経過Ｐ有フラグ");
        exClassificationEquals(bAK_Tesuuryou.get(0).getMisyuupariflg(), C_UmuKbn.NONE, "未収Ｐ有フラグ");
        exBizCalcbleEquals(bAK_Tesuuryou.get(0).getMikeikap(), BizCurrency.valueOf(100001), "未経過保険料");
        exDateYMEquals(bAK_Tesuuryou.get(0).getSeisekiym(), BizDateYM.valueOf("201501"), "成績計上年月");
        exBizCalcbleEquals(bAK_Tesuuryou.get(0).getIktp(), BizCurrency.valueOf(100002), "一括払保険料");
        exClassificationEquals(bAK_Tesuuryou.get(0).getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(bAK_Tesuuryou.get(0).getHrkkeiro(), C_Hrkkeiro.CREDIT, "払込経路");
        exBizCalcbleEquals(bAK_Tesuuryou.get(0).getHrkp(), BizCurrency.valueOf(100003), "払込保険料");
        exDateYMEquals(bAK_Tesuuryou.get(0).getJkipjytym(), BizDateYM.valueOf("201505"), "次回Ｐ充当年月");
        exDateYEquals(bAK_Tesuuryou.get(0).getHaitounendo(), BizDateY.valueOf("2015"), "配当年度");
        exStringEquals(bAK_Tesuuryou.get(0).getCifcd(), "123456789012345", "ＣＩＦコード");
        exStringEquals(bAK_Tesuuryou.get(0).getSmbckanriid(), "99999999999", "ＳＭＢＣ受付管理ＩＤ");
        exClassificationEquals(bAK_Tesuuryou.get(0).getBoskykjyoutai(), C_Boskykjyoutai.HEIGAIBOUSISOTIKYK, "募集契約状態");
        exStringEquals(bAK_Tesuuryou.get(0).getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exDateYMEquals(bAK_Tesuuryou.get(0).getBosyuuym(), BizDateYM.valueOf("201507"), "募集年月");
        exDateEquals(bAK_Tesuuryou.get(0).getNyknymd(), BizDate.valueOf("20150701"), "入金日");
        assertEquals("円換算適用為替レート", bAK_Tesuuryou.get(0).getYenkansantkykwsrate(), BizNumber.valueOf(102));
        exDateEquals(bAK_Tesuuryou.get(0).getYenkansantkykwsrateymd(), BizDate.valueOf("20150701"), "円換算適用為替レート基準日");
        exStringEquals(bAK_Tesuuryou.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Tesuuryou.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Tesuuryou.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_TesuuryouSyouhn> bAK_TesuuryouSyouhn = bAK_Tesuuryou.get(0).getBAKTesuuryouSyouhns();
        exStringEquals(bAK_TesuuryouSyouhn.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TesuuryouSyouhn.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_TesuuryouSyouhn.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getTsrysyorikbn(), C_TsrysyoriKbn.HUKKATU, "手数料処理区分");
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getRenno(), 2, "連番");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_TesuuryouSyouhn.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_TesuuryouSyouhn.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.YUUKOU, "有効消滅区分");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getKykjyoutai(), C_Kykjyoutai.ITIJIBARAI, "契約状態");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.MOSMUKOU, "消滅事由");
        exDateEquals(bAK_TesuuryouSyouhn.get(0).getSyoumetuymd(), BizDate.valueOf("20150701"), "消滅日");
        exDateEquals(bAK_TesuuryouSyouhn.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150702"), "効力発生日");
        exDateEquals(bAK_TesuuryouSyouhn.get(0).getKykymd(), BizDate.valueOf("20150703"), "契約日");
        exDateEquals(bAK_TesuuryouSyouhn.get(0).getSknnkaisiymd(), BizDate.valueOf("20150704"), "責任開始日");
        exDateEquals(bAK_TesuuryouSyouhn.get(0).getGansknnkaisiymd(), BizDate.valueOf("20150705"), "がん責任開始日");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getHknkknsmnkbn(), C_HknkknsmnKbn.SAIMANKI, "保険期間歳満期区分");
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getHknkkn(), 12, "保険期間");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getHrkkknsmnkbn(), C_HrkkknsmnKbn.NENMANKI, "払込期間歳満期区分");
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getHrkkkn(), 13, "払込期間");
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getKyknen(), 14, "契約者年齢");
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getHhknnen(), 15, "被保険者年齢");
        exDateEquals(bAK_TesuuryouSyouhn.get(0).getHhknseiymd(), BizDate.valueOf("20150101"), "被保険者生年月日");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(bAK_TesuuryouSyouhn.get(0).getHaraimanymd(), BizDate.valueOf("20150801"), "払満日");
        exDateEquals(bAK_TesuuryouSyouhn.get(0).getHknkknmanryouymd(), BizDate.valueOf("20150802"), "保険期間満了日");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getKatakbn(), C_KataKbn.HONNIN_SAISI, "型区分");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exBizCalcbleEquals(bAK_TesuuryouSyouhn.get(0).getKihons(), BizCurrency.valueOf(100001), "基本Ｓ");
        exBizCalcbleEquals(bAK_TesuuryouSyouhn.get(0).getHokenryou(), BizCurrency.valueOf(100002), "保険料");
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exStringEquals(bAK_TesuuryouSyouhn.get(0).getRyouritusdno(), "1", "料率世代番号");
        assertEquals("予定利率", bAK_TesuuryouSyouhn.get(0).getYoteiriritu(), BizNumber.valueOf(1));
        assertEquals("予定利率変動時保証利率", bAK_TesuuryouSyouhn.get(0).getYoteirrthendohosyurrt(), BizNumber.valueOf(1));
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getYtirrthndmnskaisuu(), 10, "予定利率変動見直回数");
        assertEquals("契約時市場価格調整用利率",bAK_TesuuryouSyouhn.get(0).getKyksjkkktyouseiriritu(), BizNumber.valueOf(1));
        exClassificationEquals(bAK_TesuuryouSyouhn.get(0).getNksyukbn(), C_Nenkinsyu.KAKUTEINENKIN, "年金種類区分");
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getNenkinkkn(), 10, "年金期間");
        exNumericEquals(bAK_TesuuryouSyouhn.get(0).getNkgnshosyouritu(), 1, "年金原資最低保証率");
        exBizCalcbleEquals(bAK_TesuuryouSyouhn.get(0).getNkgnshosyougk(), BizCurrency.valueOf(1000000001), "年金原資最低保証額");
        exStringEquals(bAK_TesuuryouSyouhn.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TesuuryouSyouhn.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TesuuryouSyouhn.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_TesuuryouSyouhnRireki> bAK_TesuuryouSyouhnRireki = bAK_Tesuuryou.get(0).getBAKTesuuryouSyouhnRirekis();
        exStringEquals(bAK_TesuuryouSyouhnRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TesuuryouSyouhnRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_TesuuryouSyouhnRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getTsrysyorikbn(), C_TsrysyoriKbn.HUKKATU, "手数料処理区分");
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getRenno(), 2, "連番");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getSyutkkbn(), C_SyutkKbn.TK, "主契約特約区分");
        exStringEquals(bAK_TesuuryouSyouhnRireki.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getSyouhnsdno(), 2, "商品世代番号");
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getKyksyouhnrenno(), 2, "契約商品連番");
        exStringEquals(bAK_TesuuryouSyouhnRireki.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getKykjyoutai(), C_Kykjyoutai.PMEN, "契約状態");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.MNRY, "消滅事由");
        exDateEquals(bAK_TesuuryouSyouhnRireki.get(0).getSyoumetuymd(), BizDate.valueOf("20150801"), "消滅日");
        exDateEquals(bAK_TesuuryouSyouhnRireki.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150802"), "効力発生日");
        exDateEquals(bAK_TesuuryouSyouhnRireki.get(0).getKykymd(), BizDate.valueOf("20150803"), "契約日");
        exDateEquals(bAK_TesuuryouSyouhnRireki.get(0).getSknnkaisiymd(), BizDate.valueOf("20150804"), "責任開始日");
        exDateEquals(bAK_TesuuryouSyouhnRireki.get(0).getGansknnkaisiymd(), BizDate.valueOf("20150805"), "がん責任開始日");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getHknkkn(), 22, "保険期間");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getHrkkkn(), 33, "払込期間");
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getKyknen(), 44, "契約者年齢");
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getHhknnen(), 55, "被保険者年齢");
        exDateEquals(bAK_TesuuryouSyouhnRireki.get(0).getHhknseiymd(), BizDate.valueOf("20151001"), "被保険者生年月日");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(bAK_TesuuryouSyouhnRireki.get(0).getHaraimanymd(), BizDate.valueOf("20151001"), "払満日");
        exDateEquals(bAK_TesuuryouSyouhnRireki.get(0).getHknkknmanryouymd(), BizDate.valueOf("20151002"), "保険期間満了日");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getKatakbn(), C_KataKbn.HONIN_KO, "型区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE120, "給付限度型区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU1, "手術給付金型区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.NIBAI, "基本給付金額倍率区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getRokudaildkbn(), C_6daiLdKbn.ARI, "６大生活習慣病追加給付型区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getPmnjtkkbn(), C_PmnjtkKbn.NONE, "保険料免除特約区分");
        exBizCalcbleEquals(bAK_TesuuryouSyouhnRireki.get(0).getKihons(), BizCurrency.valueOf(200001), "基本Ｓ");
        exBizCalcbleEquals(bAK_TesuuryouSyouhnRireki.get(0).getHokenryou(), BizCurrency.valueOf(200002), "保険料");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exStringEquals(bAK_TesuuryouSyouhnRireki.get(0).getRyouritusdno(), "1", "料率世代番号");
        assertEquals("予定利率", bAK_TesuuryouSyouhnRireki.get(0).getYoteiriritu(), BizNumber.valueOf(1));
        assertEquals("予定利率変動時保証利率", bAK_TesuuryouSyouhnRireki.get(0).getYoteirrthendohosyurrt(), BizNumber.valueOf(1));
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getYtirrthndmnskaisuu(), 10, "予定利率変動見直回数");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki.get(0).getNksyukbn(), C_Nenkinsyu.KAKUTEINENKIN, "年金種類区分");
        assertEquals("契約時市場価格調整用利率",bAK_TesuuryouSyouhnRireki.get(0).getKyksjkkktyouseiriritu(), BizNumber.valueOf(1));
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getNenkinkkn(), 10, "年金期間");
        exNumericEquals(bAK_TesuuryouSyouhnRireki.get(0).getNkgnshosyouritu(), 1, "年金原資最低保証率");
        exBizCalcbleEquals(bAK_TesuuryouSyouhnRireki.get(0).getNkgnshosyougk(), BizCurrency.valueOf(1000000001), "年金原資最低保証額");
        exStringEquals(bAK_TesuuryouSyouhnRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TesuuryouSyouhnRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TesuuryouSyouhnRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KoujyoSym> bAK_KoujyoSym = bAK_KykKihon.getBAKKoujyoSyms();
        exStringEquals(bAK_KoujyoSym.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KoujyoSym.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KoujyoSym.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KoujyoSym.get(0).getNendo(), "2015", "年度");
        exDateEquals(bAK_KoujyoSym.get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exNumericEquals(bAK_KoujyoSym.get(0).getRenno(), 1, "連番");
        exClassificationEquals(bAK_KoujyoSym.get(0).getKjsmsakuseisyorikbn(), C_KoujyosyoumeisakuseisyoriKbn.HOKENSYOUKEN, "控除証明作成処理区分");
        exClassificationEquals(bAK_KoujyoSym.get(0).getTekiyouseidokbn(), C_TekiyouseidoKbn.NEWOLDHZN, "適用制度区分");
        exStringEquals(bAK_KoujyoSym.get(0).getSyoumeiymd(), "20150102", "証明日");
        exDateYMEquals(bAK_KoujyoSym.get(0).getSyoumeistartym(), BizDateYM.valueOf("201502"), "証明開始年月");
        exDateYMEquals(bAK_KoujyoSym.get(0).getSyoumeiendym(), BizDateYM.valueOf("201503"), "証明終了年月");
        exNumericEquals(bAK_KoujyoSym.get(0).getSyoumeikkntukisuu(), 12, "証明期間月数");
        exNumericEquals(bAK_KoujyoSym.get(0).getSyoumeikknnensuu(), 12, "証明期間年数");
        exStringEquals(bAK_KoujyoSym.get(0).getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exStringEquals(bAK_KoujyoSym.get(0).getUktnmkjaddsama(), "受取人名（漢字）１","受取人名（漢字／様付加）");
        exDateEquals(bAK_KoujyoSym.get(0).getNenkinuktseiymd(), BizDate.valueOf("20150101"), "年金受取人生年月日");
        exStringEquals(bAK_KoujyoSym.get(0).getHknsyuruinmrykkj(), "保険種類略称（漢字）１", "保険種類略称（漢字）");
        exDateEquals(bAK_KoujyoSym.get(0).getKykymd(), BizDate.valueOf("20150103"), "契約日");
        exClassificationEquals(bAK_KoujyoSym.get(0).getHknkknsmnkbnsyu(), C_HknkknsmnKbn.SAIMANKI, "保険期間歳満期区分（主契約）");
        assertEquals("保険期間（主契約）", bAK_KoujyoSym.get(0).getHknkknsyu(), BizNumber.valueOf(44));
        exNumericEquals(bAK_KoujyoSym.get(0).getNenkanhrkkaisuu(), 23, "年間払込回数");
        exNumericEquals(bAK_KoujyoSym.get(0).getPhrkkkn(), 23, "保険料払込期間");
        exDateEquals(bAK_KoujyoSym.get(0).getNkshrstartymd(), BizDate.valueOf("20150101"), "年金支払開始日");
        exStringEquals(bAK_KoujyoSym.get(0).getNknshry(), "23", "年金支払期間");
        exClassificationEquals(bAK_KoujyoSym.get(0).getKykjyoutai(), C_Kykjyoutai.IKKATUNK, "契約状態");
        exClassificationEquals(bAK_KoujyoSym.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.YUUKOU, "有効消滅区分");
        exClassificationEquals(bAK_KoujyoSym.get(0).getHaitoukinuketorihoukbn(), C_HaitoukinuketorihouKbn.TUMIHAI, "配当金受取方法区分");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getOldippanjissekip(), BizCurrency.valueOf(200001), "旧制度一般実績保険料");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getOldippannenkanp(), BizCurrency.valueOf(200002), "旧制度一般年間保険料");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getOldippanjissekihaitoukin(), BizCurrency.valueOf(200003), "旧制度一般実績配当金");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getOldippannenkanhaitoukin(), BizCurrency.valueOf(200004), "旧制度一般年間配当金");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getOldippanjissekisyoumeigk(), BizCurrency.valueOf(200005), "旧制度一般実績証明額");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getOldippannenkansyoumeigk(), BizCurrency.valueOf(200006), "旧制度一般年間証明額");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewippanjissekip(), BizCurrency.valueOf(200007), "新制度一般実績保険料");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewippannenkanp(), BizCurrency.valueOf(200008), "新制度一般年間保険料");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewippanjissekihaitoukin(), BizCurrency.valueOf(200009), "新制度一般実績配当金");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewippannenkanhaitoukin(), BizCurrency.valueOf(200010), "新制度一般年間配当金");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewippanjissekisyoumeigk(), BizCurrency.valueOf(200011), "新制度一般実績証明額");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewippannenkansyoumeigk(), BizCurrency.valueOf(200012), "新制度一般年間証明額");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewiryoujissekip(), BizCurrency.valueOf(200013), "新制度介護医療実績保険料");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewiryounenkanp(), BizCurrency.valueOf(200014), "新制度介護医療年間保険料");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewiryoujissekihaitoukin(), BizCurrency.valueOf(200015), "新制度介護医療実績配当金");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewiryounenkanhaitoukin(), BizCurrency.valueOf(200016), "新制度介護医療年間配当金");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewiryoujissekisyoumeigk(), BizCurrency.valueOf(200017), "新制度介護医療実績証明額");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewiryounenkansyoumeigk(), BizCurrency.valueOf(200018), "新制度介護医療年間証明額");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewnkjissekip(), BizCurrency.valueOf(200019), "新制度年金実績保険料");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewnknenkanp(), BizCurrency.valueOf(200020), "新制度年金年間保険料");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewnkjissekihaitoukin(), BizCurrency.valueOf(200021), "新制度年金実績配当金");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewnknenkanhaitoukin(), BizCurrency.valueOf(200022), "新制度年金年間配当金");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewnkjissekisyoumeigk(), BizCurrency.valueOf(200023), "新制度年金実績証明額");
        exBizCalcbleEquals(bAK_KoujyoSym.get(0).getNewnknenkansyoumeigk(), BizCurrency.valueOf(200024), "新制度年金年間証明額");
        exClassificationEquals(bAK_KoujyoSym.get(0).getKjnnkkoujyum(), C_UmuKbn.NONE, "個人年金控除有無");
        exStringEquals(bAK_KoujyoSym.get(0).getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_KoujyoSym.get(0).getTsinadr1kj(), "通信先住所１（漢字）１", "通信先住所１（漢字）");
        exStringEquals(bAK_KoujyoSym.get(0).getTsinadr2kj(), "通信先住所２（漢字）１", "通信先住所２（漢字）");
        exStringEquals(bAK_KoujyoSym.get(0).getTsinadr3kj(), "通信先住所３（漢字）１", "通信先住所３（漢字）");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawasesosikinmkj(), "問合せ先組織名", "問合せ先組織名（漢字）");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawaseyno(), null, "問合せ先郵便番号");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawaseadr1kj(), "問合せ先住所１", "問合せ先住所１（漢字）");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawaseadr2kj(), "問合せ先住所２", "問合せ先住所２（漢字）");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawaseadr3kj(), "問合せ先住所３", "問合せ先住所３（漢字）");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawasetelno(), null, "問合せ先電話番号");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawaseteluktkkanou1(), "201611010101", "問合せ先電話受付可能時間１");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawaseteluktkkanou2(), "201611010110", "問合せ先電話受付可能時間２");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawasesosikinmkj2(), "第２問合せ先組織名", "第２問合せ先組織名（漢字）");
        exStringEquals(bAK_KoujyoSym.get(0).getToiawasetelno2(), null, "第２問合せ先電話番号");
        exClassificationEquals(bAK_KoujyoSym.get(0).getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
        exStringEquals(bAK_KoujyoSym.get(0).getDrtencd(), "1010", "代理店コード");
        exStringEquals(bAK_KoujyoSym.get(0).getDrtennmkj(), "代理店名（漢字）１", "代理店名（漢字）");
        exClassificationEquals(bAK_KoujyoSym.get(0).getHengakuumu(), C_UmuKbn.NONE, "変額保険有無");
        exClassificationEquals(bAK_KoujyoSym.get(0).getNewsyoumeigkumukbn(), C_UmuKbn.NONE, "新制度証明額有無区分");
        exStringEquals(bAK_KoujyoSym.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KoujyoSym.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KoujyoSym.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_Suiihyou> bAK_Suiihyou = bAK_KykKihon.getBAKSuiihyous();
        exStringEquals(bAK_Suiihyou.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Suiihyou.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Suiihyou.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_Suiihyou.get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exNumericEquals(bAK_Suiihyou.get(0).getKeikanensuu(), 22, "経過年数");
        exDateEquals(bAK_Suiihyou.get(0).getCalckijyunymd(), BizDate.valueOf("20150101"), "計算基準日");
        exDateYMEquals(bAK_Suiihyou.get(0).getCalcym(), BizDateYM.valueOf("201501"), "計算年月");
        exClassificationEquals(bAK_Suiihyou.get(0).getMvatekijyoutaikbn(),C_MvaTekiyoujyoutaiKbn.MVAARI, "ＭＶＡ適用状態区分");
        exClassificationEquals(bAK_Suiihyou.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        assertEquals("市場価格調整用利率（上昇）", bAK_Suiihyou.get(0).getSjkkktusirrtup(), BizNumber.valueOf(1));
        assertEquals("市場価格調整用利率（同水準）", bAK_Suiihyou.get(0).getSjkkktusirrtsame(), BizNumber.valueOf(2));
        assertEquals("市場価格調整用利率（低下）", bAK_Suiihyou.get(0).getSjkkktusirrtdown(), BizNumber.valueOf(3));
        assertEquals("市場価格調整用利率変動幅（上）", bAK_Suiihyou.get(0).getSjkkktusirrthendouup(), BizNumber.valueOf(4));
        assertEquals("市場価格調整用利率変動幅（下）", bAK_Suiihyou.get(0).getSjkkktusirrthendoudown(), BizNumber.valueOf(5));
        assertEquals("円換算適用為替レート（円高）", bAK_Suiihyou.get(0).getYenknsnkwsrateyendaka(), BizNumber.valueOf(6));
        assertEquals("円換算適用為替レート（中央値）", bAK_Suiihyou.get(0).getYenknsnkwsrateyenkijyun(), BizNumber.valueOf(7));
        assertEquals("円換算適用為替レート（円安）", bAK_Suiihyou.get(0).getYenknsnkwsrateyenyasu(), BizNumber.valueOf(8));
        exBizCalcbleEquals( bAK_Suiihyou.get(0).getYenknsnkwsrategkyendaka(), BizCurrency.valueOf(1001),"円換算適用為替レート変動額（円高）");
        exBizCalcbleEquals( bAK_Suiihyou.get(0).getYenknsnkwsrategkyenyasu(), BizCurrency.valueOf(1002),"円換算適用為替レート変動額（円安）");
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwup(), BizCurrency.valueOf(1003),"ＭＶＡ適用解約返戻金額（上昇）" );
        exBizCalcbleEquals( bAK_Suiihyou.get(0).getMvaariwsame(), BizCurrency.valueOf(1004),"ＭＶＡ適用解約返戻金額（同水準）");
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwdown(), BizCurrency.valueOf(1005),"ＭＶＡ適用解約返戻金額（低下）" );
        exBizCalcbleEquals( bAK_Suiihyou.get(0).getMvaariwyenupyendaka(), BizCurrency.valueOf(1006),"ＭＶＡ適用解約返戻金額（円貨）（上昇）（円高）");
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwyenupyenkijyun(), BizCurrency.valueOf(1007),"ＭＶＡ適用解約返戻金額（円貨）（上昇）（中央値）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwyenupyenyasu(), BizCurrency.valueOf(1008),"ＭＶＡ適用解約返戻金額（円貨）（上昇）（円安）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwyensameyendaka(), BizCurrency.valueOf(1009),"ＭＶＡ適用解約返戻金額（円貨）（同水準）（円高）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwyensameyenkijyun(), BizCurrency.valueOf(1010),"ＭＶＡ適用解約返戻金額（円貨）（同水準）（中央値）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwyensameyenyasu(), BizCurrency.valueOf(1011),"ＭＶＡ適用解約返戻金額（円貨）（同水準）（円安）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwyendownyendaka(), BizCurrency.valueOf(1012),"ＭＶＡ適用解約返戻金額（円貨）（低下）（円高）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwyendownyenkijyun(), BizCurrency.valueOf(1013),"ＭＶＡ適用解約返戻金額（円貨）（低下）（中央値）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariwyendownyenyasu(), BizCurrency.valueOf(1014),"ＭＶＡ適用解約返戻金額（円貨）（低下）（円安）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvaariptumitatekin(), BizCurrency.valueOf(1015),"ＭＶＡ適用保険料積立金");
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvanonewsame(), BizCurrency.valueOf(1016),"ＭＶＡ適用外解約返戻金額" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvanonewyensameyendaka(), BizCurrency.valueOf(1017),"ＭＶＡ適用外解約返戻金額（円貨）（円高）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvanonewyensameyenkijyun(), BizCurrency.valueOf(1018),"ＭＶＡ適用外解約返戻金額（円貨）（中央値）" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvanonewyensameyenyasu(), BizCurrency.valueOf(1019),"ＭＶＡ適用外解約返戻金額（円貨）（円安）");
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMvanoneptumitatekin(), BizCurrency.valueOf(1020),"ＭＶＡ適用外保険料積立金" );
        exBizCalcbleEquals(bAK_Suiihyou.get(0).getMkhyouyensysnikougk(), BizCurrency.valueOf(1021),"目標到達時円建終身保険移行特約目標額");

        exStringEquals(bAK_Suiihyou.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Suiihyou.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Suiihyou.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_TtdkKan> bAK_TtdkKan = bAK_KykKihon.getBAKTtdkKans();
        exStringEquals(bAK_TtdkKan.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TtdkKan.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_TtdkKan.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_TtdkKan.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_TtdkKan.get(0).getSyoruiCd(), C_SyoruiCdKbn.CM_BATCH_FBFURIKOMIKEI_4, "書類コード");
        exDateEquals(bAK_TtdkKan.get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exClassificationEquals(bAK_TtdkKan.get(0).getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
        exClassificationEquals(bAK_TtdkKan.get(0).getTantousitukbn(), null, "担当室区分");
        exClassificationEquals(bAK_TtdkKan.get(0).getSyoukendhumukbn(), C_UmuKbn.ARI, "証券同封有無区分");
        exStringEquals(bAK_TtdkKan.get(0).getShskyno(), "1234567", "送付先郵便番号");
        exStringEquals(bAK_TtdkKan.get(0).getShsadr1kj(), "送付先住所１（漢字）（３０桁）", "送付先住所１（漢字）（３０桁）");
        exStringEquals(bAK_TtdkKan.get(0).getShsadr2kj(), "送付先住所２（漢字）（３０桁）", "送付先住所２（漢字）（３０桁）");
        exStringEquals(bAK_TtdkKan.get(0).getShsadr3kj(), "送付先住所３（漢字）（３０桁）", "送付先住所３（漢字）（３０桁）");
        exStringEquals(bAK_TtdkKan.get(0).getShsnmkj(), "送付先氏名（漢字）１", "送付先氏名（漢字）");
        exStringEquals(bAK_TtdkKan.get(0).getToiawasesosikinmkj(), "問合せ先組織名", "問合せ先組織名（漢字）");
        exStringEquals(bAK_TtdkKan.get(0).getToiawaseyno(), "12345678", "問合せ先郵便番号");
        exStringEquals(bAK_TtdkKan.get(0).getToiawaseadr1kj(), "問合せ先住所１", "問合せ先住所１（漢字）");
        exStringEquals(bAK_TtdkKan.get(0).getToiawaseadr2kj(), "問合せ先住所２", "問合せ先住所２（漢字）");
        exStringEquals(bAK_TtdkKan.get(0).getToiawaseadr3kj(), "問合せ先住所３", "問合せ先住所３（漢字）");
        exStringEquals(bAK_TtdkKan.get(0).getToiawasekaisyanmkj(), null, "問合せ先会社名（漢字）");
        exStringEquals(bAK_TtdkKan.get(0).getToiawasetelno(), "12345678901234", "問合せ先電話番号");
        exStringEquals(bAK_TtdkKan.get(0).getToiawaseteluktkkanou1(), "11", "問合せ先電話受付可能時間１");
        exStringEquals(bAK_TtdkKan.get(0).getToiawaseteluktkkanou2(), "22", "問合せ先電話受付可能時間２");
        exClassificationEquals(bAK_TtdkKan.get(0).getTetudukisyukbn(), C_TetudukisyuKbn.KAIYAKU, "手続種類区分");
        exClassificationEquals(bAK_TtdkKan.get(0).getShrumu(), C_UmuKbn.ARI, "支払有無区分");
        exClassificationEquals(bAK_TtdkKan.get(0).getSyorikbn(), null, "処理区分");
        exStringEquals(bAK_TtdkKan.get(0).getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exDateEquals(bAK_TtdkKan.get(0).getKykymd(), BizDate.valueOf("20150401"), "契約日");
        exStringEquals(bAK_TtdkKan.get(0).getSyouhnnm(), "商品名１", "商品名");
        exStringEquals(bAK_TtdkKan.get(0).getHhknnmkj(), "被保険者名（漢字）１", "被保険者名（漢字）");
        exClassificationEquals(bAK_TtdkKan.get(0).getYenshrtktekiumu(), C_UmuKbn.ARI, "円支払特約適用有無");
        exClassificationEquals(bAK_TtdkKan.get(0).getTtdknaiyouumukbn(), null, "手続内容有無区分");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou1(), null, "手続内容１");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou2(), null, "手続内容２");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou3(), null, "手続内容３");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou4(), null, "手続内容４");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou5(), null, "手続内容５");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou6(), null, "手続内容６");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou7(), null, "手続内容７");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou8(), null, "手続内容８");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou9(), null, "手続内容９");
        exStringEquals(bAK_TtdkKan.get(0).getTtdknaiyou10(), null, "手続内容１０");
        exDateEquals(bAK_TtdkKan.get(0).getShrymd(), BizDate.valueOf("20150410"), "支払日");
        exDateEquals(bAK_TtdkKan.get(0).getCalckijyunymd(), null, "計算基準日");
        exDateEquals(bAK_TtdkKan.get(0).getKaiykymd(), null, "解約日");
        exClassificationEquals(bAK_TtdkKan.get(0).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exStringEquals(bAK_TtdkKan.get(0).getShrtuukasyuryk(), null, "支払通貨種類略称");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getShrgkkei(), BizCurrency.valueOf(3000001), "支払額合計");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getHnkngk(), null, "返金額");
        exClassificationEquals(bAK_TtdkKan.get(0).getHnkntuukasyu(), null, "返金通貨種類");
        exDateEquals(bAK_TtdkKan.get(0).getHnknymd(), null, "返金日");

        exBizCalcbleEquals(bAK_TtdkKan.get(0).getShrtienrsk(), BizCurrency.valueOf(3000008), "支払遅延利息");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou1(), "摘要１", "摘要１");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou2(), "摘要２", "摘要２");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou3(), "摘要３", "摘要３");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou4(), "摘要４", "摘要４");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou5(), "摘要５", "摘要５");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou6(), "摘要６", "摘要６");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou7(), "摘要７", "摘要７");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou8(), "摘要８", "摘要８");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou9(), null ,"摘要９");
        exStringEquals(bAK_TtdkKan.get(0).getTekiyou10(), null, "摘要１０");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai1(), BizCurrency.valueOf(1000000001), "金額明細１");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai2(), BizCurrency.valueOf(1000000002), "金額明細２");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai3(), BizCurrency.valueOf(1000000003), "金額明細３");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai4(), BizCurrency.valueOf(1000000004), "金額明細４");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai5(), BizCurrency.valueOf(1000000005), "金額明細５");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai6(), BizCurrency.valueOf(1000000006), "金額明細６");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai7(), BizCurrency.valueOf(1000000007), "金額明細７");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai8(), BizCurrency.valueOf(1000000008), "金額明細８");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai9(), null, "金額明細９");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getKngkmeisai10(), null, "金額明細１０");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu1(), null, "金額明細通貨種類１");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu2(), null, "金額明細通貨種類２");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu3(), null, "金額明細通貨種類３");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu4(), null, "金額明細通貨種類４");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu5(), null, "金額明細通貨種類５");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu6(), null, "金額明細通貨種類６");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu7(), null, "金額明細通貨種類７");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu8(), null, "金額明細通貨種類８");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu9(), null, "金額明細通貨種類９");
        exClassificationEquals(bAK_TtdkKan.get(0).getKngkmisituukasyu10(), null, "金額明細通貨種類１０");
        exStringEquals(bAK_TtdkKan.get(0).getBikou1(), null, "備考１");
        exStringEquals(bAK_TtdkKan.get(0).getBikou2(), null, "備考２");
        exStringEquals(bAK_TtdkKan.get(0).getBikou3(), null, "備考３");
        exStringEquals(bAK_TtdkKan.get(0).getBikou4(), null, "備考４");
        exStringEquals(bAK_TtdkKan.get(0).getBikou5(), null, "備考５");
        exStringEquals(bAK_TtdkKan.get(0).getBikou6(), null, "備考６");
        exStringEquals(bAK_TtdkKan.get(0).getBikou7(), null, "備考７");
        exStringEquals(bAK_TtdkKan.get(0).getBikou8(), null, "備考８");
        exStringEquals(bAK_TtdkKan.get(0).getBikou9(), null, "備考９");
        exStringEquals(bAK_TtdkKan.get(0).getBikou10(), null, "備考１０");

        exStringEquals(bAK_TtdkKan.get(0).getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_TtdkKan.get(0).getSitencd(), "001", "支店コード");
        exStringEquals(bAK_TtdkKan.get(0).getBanknmkj(), "銀行名（漢字）１", "銀行名（漢字）");
        exStringEquals(bAK_TtdkKan.get(0).getSitennmkj(), "支店名（漢字）１", "支店名（漢字）");
        exClassificationEquals(bAK_TtdkKan.get(0).getYokinkbn(), C_YokinKbn.HUTUUYUTYO, "預金種目区分");
        exStringEquals(bAK_TtdkKan.get(0).getKouzano(), "1234567", "口座番号");
        exClassificationEquals(bAK_TtdkKan.get(0).getKzsyuruikbn(), C_KouzasyuruiKbn.YENKOUZA, "口座種類区分");
        exStringEquals(bAK_TtdkKan.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exClassificationEquals(bAK_TtdkKan.get(0).getSoukinsakisiteikbn(), null, "送金先指定区分");
        exClassificationEquals(bAK_TtdkKan.get(0).getHtsiryosyukbn(), null, "法定資料種類区分");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getSynykngk(), BizCurrency.valueOf(1000000001), "収入金額");
        exBizCalcbleEquals(bAK_TtdkKan.get(0).getHtykeihi(), BizCurrency.valueOf(3000012), "必要経費");
        exClassificationEquals(bAK_TtdkKan.get(0).getKaiyakujiyuu(), C_Kaiyakujiyuu.TUUJYOU, "解約事由");
        exClassificationEquals(bAK_TtdkKan.get(0).getZeimumongonoutkbn(), null, "税務文言出力区分");
        exStringEquals(bAK_TtdkKan.get(0).getZeimumongon1(), null, "税務文言１");
        exStringEquals(bAK_TtdkKan.get(0).getZeimumongon2(), null, "税務文言２");
        exStringEquals(bAK_TtdkKan.get(0).getZeimumongon3(), null, "税務文言３");
        exStringEquals(bAK_TtdkKan.get(0).getZeimumongon4(), null, "税務文言４");
        exStringEquals(bAK_TtdkKan.get(0).getZeimumongon5(), null, "税務文言５");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongonhyoudai(), null, "お知らせ文言表題");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon1(), null, "お知らせ文言１");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon2(), null, "お知らせ文言２");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon3(), null, "お知らせ文言３");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon4(), null, "お知らせ文言４");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon5(), null, "お知らせ文言５");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon6(), null, "お知らせ文言６");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon7(), null, "お知らせ文言７");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon8(), null, "お知らせ文言８");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon9(), null, "お知らせ文言９");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon10(), null, "お知らせ文言１０");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon11(), null, "お知らせ文言１１");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon12(), null, "お知らせ文言１２");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon13(), null, "お知らせ文言１３");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon14(), null, "お知らせ文言１４");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon15(), null, "お知らせ文言１５");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon16(), null, "お知らせ文言１６");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon17(), null, "お知らせ文言１７");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon18(), null, "お知らせ文言１８");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon19(), null, "お知らせ文言１９");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon20(), null, "お知らせ文言２０");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon21(), null, "お知らせ文言２１");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon22(), null, "お知らせ文言２２");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon23(), null, "お知らせ文言２３");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon24(), null, "お知らせ文言２４");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon25(), null, "お知らせ文言２５");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon26(), null, "お知らせ文言２６");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon27(), null, "お知らせ文言２７");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon28(), null, "お知らせ文言２８");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon29(), null, "お知らせ文言２９");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon30(), null, "お知らせ文言３０");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon31(), null, "お知らせ文言３１");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon32(), null, "お知らせ文言３２");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon33(), null, "お知らせ文言３３");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon34(), null, "お知らせ文言３４");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon35(), null, "お知らせ文言３５");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon36(), null, "お知らせ文言３６");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon37(), null, "お知らせ文言３７");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon38(), null, "お知らせ文言３８");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon39(), null, "お知らせ文言３９");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon40(), null, "お知らせ文言４０");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon41(), null, "お知らせ文言４１");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon42(), null, "お知らせ文言４２");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon43(), null, "お知らせ文言４３");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon44(), null, "お知らせ文言４４");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon45(), null, "お知らせ文言４５");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon46(), null, "お知らせ文言４６");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon47(), null, "お知らせ文言４７");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon48(), null, "お知らせ文言４８");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon49(), null, "お知らせ文言４９");
        exStringEquals(bAK_TtdkKan.get(0).getOsirasemongon50(), null, "お知らせ文言５０");
        exStringEquals(bAK_TtdkKan.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TtdkKan.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TtdkKan.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_HokenSyouken> bAK_HokenSyouken = bAK_KykKihon.getBAKHokenSyoukens();
        exStringEquals(bAK_HokenSyouken.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HokenSyouken.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HokenSyouken.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_HokenSyouken.get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exStringEquals(bAK_HokenSyouken.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.HUYOU, "印紙税支払要否区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getStdrsktirasidouhuukbn(), null, "指定代理請求チラシ同封区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getDstirasidouhuukbn(), null, "ＤＳチラシ同封区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyotnshuyoupostumukbn(), null, "証券転送不要郵便有無区分");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd1(), "1", "表示欄左メッセージコード１");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd2(), "2", "表示欄左メッセージコード２");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd3(), "3", "表示欄左メッセージコード３");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd4(), "4", "表示欄左メッセージコード４");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd5(), "5", "表示欄左メッセージコード５");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd6(), null, "表示欄左メッセージコード６");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd7(), null, "表示欄左メッセージコード７");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd8(), null, "表示欄左メッセージコード８");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd9(), null, "表示欄左メッセージコード９");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd10(), null, "表示欄左メッセージコード１０");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd11(), null, "表示欄左メッセージコード１１");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd12(), null, "表示欄左メッセージコード１２");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd13(), null, "表示欄左メッセージコード１３");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd14(), null, "表示欄左メッセージコード１４");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd15(), null, "表示欄左メッセージコード１５");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd16(), null, "表示欄左メッセージコード１６");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd17(), null, "表示欄左メッセージコード１７");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd18(), null, "表示欄左メッセージコード１８");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd19(), null, "表示欄左メッセージコード１９");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranhidarimsgcd20(), null, "表示欄左メッセージコード２０");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd1(), "1", "表示欄右メッセージコード１");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd2(), "2", "表示欄右メッセージコード２");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd3(), "3", "表示欄右メッセージコード３");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd4(), "4", "表示欄右メッセージコード４");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd5(), "5", "表示欄右メッセージコード５");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd6(), null, "表示欄右メッセージコード６");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd7(), null, "表示欄右メッセージコード７");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd8(), null, "表示欄右メッセージコード８");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd9(), null, "表示欄右メッセージコード９");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd10(), null, "表示欄右メッセージコード１０");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd11(), null, "表示欄右メッセージコード１１");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd12(), null, "表示欄右メッセージコード１２");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd13(), null, "表示欄右メッセージコード１３");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd14(), null, "表示欄右メッセージコード１４");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd15(), null, "表示欄右メッセージコード１５");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd16(), null, "表示欄右メッセージコード１６");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd17(), null, "表示欄右メッセージコード１７");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd18(), null, "表示欄右メッセージコード１８");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd19(), null, "表示欄右メッセージコード１９");
        exStringEquals(bAK_HokenSyouken.get(0).getHyoujiranmigiimsgcd20(), null, "表示欄右メッセージコード２０");
        exDateEquals(bAK_HokenSyouken.get(0).getHyoujiransknnkaisiymd(), null, "表示欄責任開始日");
        assertEquals("表示欄予定利率", bAK_HokenSyouken.get(0).getHyoujiranyoteiriritu(), BizNumber.valueOf(1));
        assertEquals("表示欄市場価格調整用利率", bAK_HokenSyouken.get(0).getHyoujiransjkkktusirrt(), BizNumber.valueOf(2));
        exStringEquals(bAK_HokenSyouken.get(0).getHknsyukigou(), "1", "保険種類記号");
        exStringEquals(bAK_HokenSyouken.get(0).getHanbainm(), "販売名称", "販売名称");
        exStringEquals(bAK_HokenSyouken.get(0).getSeisikihknnm(), "正式保険名称", "正式保険名称");
        exDateEquals(bAK_HokenSyouken.get(0).getKouryokukaisiymd(),null, "効力開始年月日");
        exStringEquals(bAK_HokenSyouken.get(0).getKyknmkj(), "契約者名", "契約者名（漢字）");
        exClassificationEquals(bAK_HokenSyouken.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "契約者名漢字化不可区分");
        exStringEquals(bAK_HokenSyouken.get(0).getHhknnmkj(), "被保険者名", "被保険者名（漢字）");
        exClassificationEquals(bAK_HokenSyouken.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "被保険者名漢字化不可区分");
        exDateEquals(bAK_HokenSyouken.get(0).getHhknseiymd(), BizDate.valueOf("20150101"), "被保険者生年月日");
        exClassificationEquals(bAK_HokenSyouken.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(bAK_HokenSyouken.get(0).getHhknnen(), 11, "被保険者年齢");

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn1(), null, "（証券）受取人見出し区分１");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn1(), null, "（証券）受取人区分１");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm1(),null, "（証券）受取人名１");
        assertEquals("（証券）受取人分割割合１", bAK_HokenSyouken.get(0).getSyoukenuktbnwari1(), BizNumber.valueOf(1));

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn2(), null, "（証券）受取人見出し区分２");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn2(), null, "（証券）受取人区分２");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm2(),null, "（証券）受取人名２");
        assertEquals("（証券）受取人分割割合２", bAK_HokenSyouken.get(0).getSyoukenuktbnwari2(), BizNumber.valueOf(2));

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn3(), null, "（証券）受取人見出し区分３");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn3(), null, "（証券）受取人区分３");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm3(),null, "（証券）受取人名３");
        assertEquals("（証券）受取人分割割合３", bAK_HokenSyouken.get(0).getSyoukenuktbnwari3(), BizNumber.valueOf(3));

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn4(), null, "（証券）受取人見出し区分４");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn4(), null, "（証券）受取人区分４");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm4(),null, "（証券）受取人名４");
        assertEquals("（証券）受取人分割割合４", bAK_HokenSyouken.get(0).getSyoukenuktbnwari4(), BizNumber.valueOf(4));

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn5(), null, "（証券）受取人見出し区分５");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn5(), null, "（証券）受取人区分５");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm5(),null, "（証券）受取人名５");
        assertEquals("（証券）受取人分割割合５", bAK_HokenSyouken.get(0).getSyoukenuktbnwari5(), BizNumber.valueOf(5));

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn6(), null, "（証券）受取人見出し区分６");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn6(), null, "（証券）受取人区分６");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm6(),null, "（証券）受取人名６");
        assertEquals("（証券）受取人分割割合６", bAK_HokenSyouken.get(0).getSyoukenuktbnwari6(), BizNumber.valueOf(6));

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn7(), null, "（証券）受取人見出し区分７");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn7(), null, "（証券）受取人区分７");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm7(),null, "（証券）受取人名７");
        assertEquals("（証券）受取人分割割合７", bAK_HokenSyouken.get(0).getSyoukenuktbnwari7(), BizNumber.valueOf(7));

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn8(), null, "（証券）受取人見出し区分８");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn8(), null, "（証券）受取人区分８");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm8(),null, "（証券）受取人名８");
        assertEquals("（証券）受取人分割割合８", bAK_HokenSyouken.get(0).getSyoukenuktbnwari8(), BizNumber.valueOf(8));

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn9(), null, "（証券）受取人見出し区分９");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn9(), null, "（証券）受取人区分９");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm9(),null, "（証券）受取人名９");
        assertEquals("（証券）受取人分割割合９", bAK_HokenSyouken.get(0).getSyoukenuktbnwari9(), BizNumber.valueOf(9));

        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktmidasikbn10(), null, "（証券）受取人見出し区分１０");
        exClassificationEquals(bAK_HokenSyouken.get(0).getSyoukenuktkbn10(), null, "（証券）受取人区分１０");
        exStringEquals(bAK_HokenSyouken.get(0).getSyoukenuktnm10(),null, "（証券）受取人名１０");
        assertEquals("（証券）受取人分割割合１０", bAK_HokenSyouken.get(0).getSyoukenuktbnwari10(), BizNumber.valueOf(10));
        exStringEquals(bAK_HokenSyouken.get(0).getPmsgcd1(),null, "保険料メッセージコード１");
        exStringEquals(bAK_HokenSyouken.get(0).getPmsgcd2(),null, "保険料メッセージコード２");
        exStringEquals(bAK_HokenSyouken.get(0).getPmsgcd3(),null, "保険料メッセージコード３");
        exClassificationEquals(bAK_HokenSyouken.get(0).getPtuukatype(),null, "保険料通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken.get(0).getHokenryou(), null, "保険料");
        exStringEquals(bAK_HokenSyouken.get(0).getPtuuka(),null, "保険料通貨");
        exStringEquals(bAK_HokenSyouken.get(0).getPtokuyakumsgcd(),null, "保険料特約メッセージコード");
        exDateEquals(bAK_HokenSyouken.get(0).getKykymd(), BizDate.valueOf("20150101"), "契約日");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd1(), "1", "その他内容欄メッセージコード１");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd2(), "2", "その他内容欄メッセージコード２");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd3(), "3", "その他内容欄メッセージコード３");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd4(), "4", "その他内容欄メッセージコード４");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd5(), "5", "その他内容欄メッセージコード５");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd6(), "6", "その他内容欄メッセージコード６");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd7(), "7", "その他内容欄メッセージコード７");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd8(), "8", "その他内容欄メッセージコード８");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd9(), "9", "その他内容欄メッセージコード９");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd10(), "10", "その他内容欄メッセージコード１０");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd11(), "11", "その他内容欄メッセージコード１１");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd12(), "12", "その他内容欄メッセージコード１２");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd13(), "13", "その他内容欄メッセージコード１３");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd14(), "14", "その他内容欄メッセージコード１４");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd15(), "15", "その他内容欄メッセージコード１５");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd16(), "16", "その他内容欄メッセージコード１６");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd17(), "17", "その他内容欄メッセージコード１７");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd18(), "18", "その他内容欄メッセージコード１８");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd19(), "19", "その他内容欄メッセージコード１９");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyouranmsgcd20(), "20", "その他内容欄メッセージコード２０");
        exStringEquals(bAK_HokenSyouken.get(0).getStnaiyourangaimsgcd(), "1", "その他内容欄外メッセージコード");
        exStringEquals(bAK_HokenSyouken.get(0).getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_HokenSyouken.get(0).getTsinadr1kj(), "通信先住所１", "通信先住所１（漢字）");
        exStringEquals(bAK_HokenSyouken.get(0).getTsinadr2kj(), "通信先住所２", "通信先住所２（漢字）");
        exStringEquals(bAK_HokenSyouken.get(0).getTsinadr3kj(), "通信先住所３", "通信先住所３（漢字）");
        exStringEquals(bAK_HokenSyouken.get(0).getSisyacd(), "123", "支社コード");
        exStringEquals(bAK_HokenSyouken.get(0).getCcmsgcd(), "1", "コールセンターメッセージコード");
        exClassificationEquals(bAK_HokenSyouken.get(0).getChannelcd(), C_Channelcd.SMBC, "チャネルコード");
        exStringEquals(bAK_HokenSyouken.get(0).getDrtennm1kj(), "代理店名１", "代理店名１（漢字）");
        exStringEquals(bAK_HokenSyouken.get(0).getDrtennm2kj(), "代理店名２", "代理店名２（漢字）");
        exStringEquals(bAK_HokenSyouken.get(0).getAisatumsgcd(), "1", "挨拶メッセージコード");
        exStringEquals(bAK_HokenSyouken.get(0).getHskmsgcd(), "1", "補足メッセージコード");
        exDateEquals(bAK_HokenSyouken.get(0).getSyohakkouymd(), BizDate.valueOf("20150101"), "証券発行年月日");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分２");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分３");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分４");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分５");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分６");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分７");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分８");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分９");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１０");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１１");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１２");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１３");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１４");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１５");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１６");
        exClassificationEquals(bAK_HokenSyouken.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１７");
        exStringEquals(bAK_HokenSyouken.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HokenSyouken.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HokenSyouken.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getNksyuruinmsyouken(), "年金種類名称", "年金種類名称（証券用）");
        exNumericEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTeikiikkatubaraitukisuu(), 1, "定期一括払月数");
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getZnntikiktbriyhrkgktuktype(), C_Tuukasyu.JPY, "前納定期一括払円貨払込額通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getZnntikiktbriyenhrkgk(), BizCurrency.valueOf(5566), "前納定期一括払円貨払込額");
        exNumericEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getZnnkai2(), 12, "前納回数（２桁）");
        assertEquals("ご負担費用説明欄解約控除率最小", bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getHutanhiyustmkyakkjrtmin(), BizNumber.valueOf(0.1));
        assertEquals("ご負担費用説明欄解約控除率最大", bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getHutanhiyustmkyakkjrtmax(), BizNumber.valueOf(0.2));
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getFstpznnkngktuktype(), C_Tuukasyu.USD, "初回Ｐご確認欄前納金額通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getFstpznnkngk(), BizCurrency.valueOf(7788), "初回Ｐご確認欄前納金額");
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getDskjnkngkktuktype(), C_Tuukasyu.JPY, "ＤＳ基準金額通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getDskjnkngk(), BizCurrency.valueOf(8899), "ＤＳ基準金額");
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTikiktbriyhrkgktuktype(), C_Tuukasyu.JPY, "定期一括払円貨払込額通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTikiktbriyenhrkgk(), BizCurrency.valueOf(1122), "定期一括払円貨払込額");
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktirasidouhuukbn1(), C_UmuKbn.ARI, "ご家族登録チラシ１同封区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktirasidouhuukbn2(), C_UmuKbn.ARI, "ご家族登録チラシ２同封区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKykdairitirasidouhuukbn(), C_UmuKbn.ARI, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getSkhtirasidouhuukbn(), C_UmuKbn.ARI, "債権法チラシ同封区分");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg1(), "001", "ご家族登録サービスメッセージコード１");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg2(), "002", "ご家族登録サービスメッセージコード２");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg3(), "003", "ご家族登録サービスメッセージコード３");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg4(), "004", "ご家族登録サービスメッセージコード４");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg5(), "005", "ご家族登録サービスメッセージコード５");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg6(), "006", "ご家族登録サービスメッセージコード６");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg7(), "007", "ご家族登録サービスメッセージコード７");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg8(), "008", "ご家族登録サービスメッセージコード８");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzknmkj118(), "家族名１", "登録家族名１（１８桁）");
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzksei1(), C_Seibetu.MALE, "登録家族性別１");
        exDateEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkseiymd1(), BizDate.valueOf("20180101"), "登録家族生年月日１");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkyno1(), "1234567", "登録家族郵便番号１");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr1kj1(), "住所１漢字１", "登録家族住所１（漢字）１");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr2kj1(), "住所２漢字１", "登録家族住所２（漢字）１");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr3kj1(), "住所３漢字１", "登録家族住所３（漢字）１");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzktelno1(), null, "登録家族電話番号１");
        exClassificationEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzksei2(), C_Seibetu.MALE, "登録家族性別２");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzknmkj218(), "家族名２", "登録家族名２（１８桁）");
        exDateEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkseiymd2(), BizDate.valueOf("20180201"), "登録家族生年月日２");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkyno2(), "2345678", "登録家族郵便番号２");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr1kj2(), "住所１漢字２", "登録家族住所１（漢字）２");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr2kj2(), "住所２漢字２", "登録家族住所２（漢字）２");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr3kj2(), "住所３漢字２", "登録家族住所３（漢字）２");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzktelno2(), null, "登録家族電話番号２");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKykdairinm18(), "契約者代理人名", "契約者代理人名（１８桁）");
        exStringEquals(bAK_HokenSyouken.get(0).getBAKHokenSyoukenHukaInfos().get(0).getHhkndairinm(), "被保険者代理人氏名", "被保険者代理人氏名");

        List<IT_BAK_TrkKzk> bAK_TrkKzk = bAK_KykKihon.getBAKTrkKzks();
        exStringEquals(bAK_TrkKzk.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TrkKzk.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_TrkKzk.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_TrkKzk.get(0).getTrkkzkkbn(), C_TrkKzkKbn.TRKKZK1, "登録家族区分");
        exDateEquals(bAK_TrkKzk.get(0).getTrkkzksetteiymd(), BizDate.valueOf("20190102"), "登録家族設定年月日");
        exStringEquals(bAK_TrkKzk.get(0).getTrkkzknmkn(), "登録家族名カナ", "登録家族名（カナ）");
        exStringEquals(bAK_TrkKzk.get(0).getTrkkzknmkj(), "登録家族名漢字", "登録家族名（漢字）");
        exClassificationEquals(bAK_TrkKzk.get(0).getTrkkzknmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "登録家族名漢字化不可区分");
        exDateEquals(bAK_TrkKzk.get(0).getTrkkzkseiymd(), BizDate.valueOf("20180101"), "登録家族生年月日");
        exClassificationEquals(bAK_TrkKzk.get(0).getTrkkzksei(), C_Seibetu.MALE, "登録家族性別");
        exClassificationEquals(bAK_TrkKzk.get(0).getTrkkzktdk(), C_Tdk.HONNIN, "登録家族続柄");
        exStringEquals(bAK_TrkKzk.get(0).getTrkkzkyno(), "1234567", "登録家族郵便番号");
        exStringEquals(bAK_TrkKzk.get(0).getTrkkzkadr1kj(), null, "登録家族住所１（漢字）");
        exStringEquals(bAK_TrkKzk.get(0).getTrkkzkadr2kj(), "住所１漢字", "登録家族住所２（漢字）");
        exStringEquals(bAK_TrkKzk.get(0).getTrkkzkadr3kj(), "住所２漢字", "登録家族住所３（漢字）");
        exStringEquals(bAK_TrkKzk.get(0).getTrkkzktelno(), "010-1234-2598", "登録家族電話番号");
        exStringEquals(bAK_TrkKzk.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TrkKzk.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TrkKzk.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_CreditCardInfo> bAK_CreditCardInfo = bAK_KykKihon.getBAKCreditCardInfos();
        exStringEquals(bAK_CreditCardInfo.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_CreditCardInfo.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_CreditCardInfo.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_CreditCardInfo.get(0).getCreditkessaiyouno(), "123-456-789", "クレジットカード決済用番号");
        exDateYMEquals(bAK_CreditCardInfo.get(0).getCredityuukoukakym(), BizDateYM.valueOf("201901"), "クレジットカード有効確認年月");
        exClassificationEquals(bAK_CreditCardInfo.get(0).getCredityuukoukakkekka(), C_Yuukoukakkekka.YUUKOUKAK_OK, "クレジットカード有効確認結果");
        exStringEquals(bAK_CreditCardInfo.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_CreditCardInfo.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_CreditCardInfo.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KoujyoSymNaiyouD> bAK_KoujyoSymNaiyouD = bAK_KykKihon.getBAKKoujyoSymNaiyouDs();
        exStringEquals(bAK_KoujyoSymNaiyouD.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KoujyoSymNaiyouD.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KoujyoSymNaiyouD.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KoujyoSymNaiyouD.get(0).getSyouhncd(), "0001", "商品コード");
        exNumericEquals(bAK_KoujyoSymNaiyouD.get(0).getRenno3keta(), 1, "連番（３桁）");
        exStringEquals(bAK_KoujyoSymNaiyouD.get(0).getKoujyosyoumeinnd(), "2019", "控除証明年度");
        exBizCalcbleEquals(bAK_KoujyoSymNaiyouD.get(0).getKoujyosyoumeid(), BizCurrency.valueOf(12345), "控除証明Ｄ");
        exDateYEquals(bAK_KoujyoSymNaiyouD.get(0).getHaitounendo(), BizDateY.valueOf("2020"), "配当年度");
        exNumericEquals(bAK_KoujyoSymNaiyouD.get(0).getHaitoukanrirenno(), 1, "配当管理連番");
        exClassificationEquals(bAK_KoujyoSymNaiyouD.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE1, "配当金作成区分");
        exClassificationEquals(bAK_KoujyoSymNaiyouD.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exClassificationEquals(bAK_KoujyoSymNaiyouD.get(0).getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.SUMI, "控除証明書発行済フラグ");
        exClassificationEquals(bAK_KoujyoSymNaiyouD.get(0).getSakujyoflg(), C_Delflag.SAKUJYO, "削除フラグ");
        exStringEquals(bAK_KoujyoSymNaiyouD.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KoujyoSymNaiyouD.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KoujyoSymNaiyouD.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhDenpyoData.get(0).getDenrenno(), "12345678907", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(0).getHuridenatesakicd(), "102", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTantocd(), C_TantouCdKbn.KIKAKUIMU, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(0).getDenymd(), BizDate.valueOf("20150414"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTaisyakukbn(), C_TaisyakuKbn.KASIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_SYOKAI_GAIHO_JPY, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSuitoubumoncd(), "102", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDengaikagk(), BizCurrency.valueOf(20001), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(0).getDenkawaserate(), BizNumber.valueOf(102));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDenyenkagk(), BizCurrency.valueOf(1000000002), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getHuridenskskbn(), C_HuridensksKbn.GYOUMUIGAI, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenhnknhoukbn(), C_DenhnknhouKbn.YUBINHARAIDASI, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenshrhoukbn(), C_DenshrhouKbn.FBSOUKINYOKU, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(0).getSyoriYmd(), BizDate.valueOf("20150202"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyoricd(), "1002", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyorisosikicd(), "1000002", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg1cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg2cd(), C_Segcd.BLNK, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678906", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getDenrenno(), "12345678901", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyoricd(), "1002", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyorisosikicd(), "1000002", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160202"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150405"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyono(), "12806345672", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getBankcd(), "1212", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKouzano(), "7654321", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getSoukingk(), BizCurrency.valueOf(1000000002), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getGaikataikagk(), BizCurrency.valueOf(1000000002), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(2));

        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678906", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getDenrenno(), "12345678901", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoricd(), "1002", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyorisosikicd(), "1000002", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160202"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150405"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyono(), "12806345672", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBankcd(), "1212", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBanknmej(), "bank2", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitencd(), "123", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitennmej(), "siten2", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKouzano(), "7654321", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getGaikashrgk(), BizCurrency.valueOf(2), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getCrossrateshrgk(), BizCurrency.valueOf(2), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(2));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getIrninnmei(), "irni1", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getRenno(), 1, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getSyoriYmd(), BizDate.valueOf("20150101"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kykno(), "1000000002", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kyknokbn(), C_Huho2kyknoKbn.MOSNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyouhncd(), "1002", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkn(), "タイショウシャシメイ２", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkj(), "タイショウシャシメイ２", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseiymd(), BizDate.valueOf("20160202"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKetymd(), BizDate.valueOf("20150101"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getKetsyacd(), "22", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getPalketsyacd(), "22", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getSintyou(), 110, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getTaijyuu(), 50, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKktymd(), BizDate.valueOf("20150101"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd1(), "11", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym1(), BizDateYM.valueOf("201501"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd2(), "11", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym2(), BizDateYM.valueOf("201501"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        exStringEquals(bAK_AnsyuKihon.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_AnsyuKihon.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_AnsyuKihon.getTrkssikibetukey(), "12345", "取消識別キー");
        exDateYMEquals(bAK_AnsyuKihon.getJkipjytym(), BizDateYM.valueOf("201501"), "次回Ｐ充当年月");
        exClassificationEquals(bAK_AnsyuKihon.getTkiktannaitukisuu(), C_Tkiktannaitukisuu.SIXMONTHS, "定期一括案内月数");
        exClassificationEquals(bAK_AnsyuKihon.getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.SUMI, "控除証明書発行済フラグ");
        exDateEquals(bAK_AnsyuKihon.getSyuharaimanymd(), BizDate.valueOf("20150401"), "主契約払満日");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_AnsyuCreditCard bAK_AnsyuCreditCard = bAK_AnsyuKihon.getBAKAnsyuCreditCard();
        exStringEquals(bAK_AnsyuCreditCard.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_AnsyuCreditCard.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_AnsyuCreditCard.getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_AnsyuCreditCard.getYukoukachkymd(), BizDate.valueOf("20151001"), "有効性確認日");
        exClassificationEquals(bAK_AnsyuCreditCard.getYuukoukakujkkbn(), C_YuukoukakujkKbn.SUMI, "有効性確認状況区分");
        exClassificationEquals(bAK_AnsyuCreditCard.getAuthorijkkbn(), C_AuthorijkKbn.NG, "オーソリ状況区分");
        exClassificationEquals(bAK_AnsyuCreditCard.getAuthoritrkkbn(), C_AuthoritrkKbn.ITIYEN, "オーソリ登録区分");
        exBizCalcbleEquals(bAK_AnsyuCreditCard.getAuthorigk(), BizCurrency.valueOf(100001), "オーソリ金額");
        exDateEquals(bAK_AnsyuCreditCard.getAuthorikanryoymd(), BizDate.valueOf("20151002"), "オーソリ完了日");
        exStringEquals(bAK_AnsyuCreditCard.getSyouninno(), "123456", "承認番号");
        exStringEquals(bAK_AnsyuCreditCard.getTanmatusyorino(), "7654321", "端末処理通番");
        exDateEquals(bAK_AnsyuCreditCard.getUriageymd(), BizDate.valueOf("20151003"), "売上日");
        exStringEquals(bAK_AnsyuCreditCard.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuCreditCard.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuCreditCard.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_AnsyuRireki> bAK_AnsyuRireki = bAK_AnsyuKihon.getBAKAnsyuRirekis();
        exStringEquals(bAK_AnsyuRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_AnsyuRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_AnsyuRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.OTHER, "入金内容区分");
        exDateYMEquals(bAK_AnsyuRireki.get(0).getJyuutouym(), BizDateYM.valueOf("201502"), "充当年月");
        exNumericEquals(bAK_AnsyuRireki.get(0).getAnnaino(), 1, "案内番号");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getNykkeiro(), C_Nykkeiro.KYHKIN, "入金経路");
        exNumericEquals(bAK_AnsyuRireki.get(0).getJyutoukaisuuy(), 12, "充当回数（年）");
        exNumericEquals(bAK_AnsyuRireki.get(0).getJyutoukaisuum(), 3, "充当回数（月）");
        exBizCalcbleEquals(bAK_AnsyuRireki.get(0).getHrkp(), BizCurrency.valueOf(300002), "払込保険料");
        exBizCalcbleEquals(bAK_AnsyuRireki.get(0).getIktwaribikikgk(), BizCurrency.valueOf(300003), "一括割引料");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getAnnaijkkbn(), C_AnnaijkKbn.SONOTAKETTYAKU, "案内状況区分");
        exDateEquals(bAK_AnsyuRireki.get(0).getAnnaisakuseiymd(), BizDate.valueOf("20150601"), "案内作成日");
        exDateEquals(bAK_AnsyuRireki.get(0).getNyksyoriymd(), BizDate.valueOf("20150602"), "入金処理日");
        exDateEquals(bAK_AnsyuRireki.get(0).getMinyusyoriymd(), BizDate.valueOf("20150603"), "未入処理日");
        exDateEquals(bAK_AnsyuRireki.get(0).getDattaiuktkymd(), BizDate.valueOf("20150604"), "脱退受付日");
        exDateEquals(bAK_AnsyuRireki.get(0).getHurikaeymd(), BizDate.valueOf("20150605"), "振替日");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getHurihunokbn(), C_HurihunoKbn.ITKTUGOU, "振替不能理由区分");
        exDateEquals(bAK_AnsyuRireki.get(0).getUriageymdkon(), BizDate.valueOf("20150606"), "売上日（今回）");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getKrkkeijyoflg(), C_UmuKbn.ARI, "仮受計上フラグ");
        exDateEquals(bAK_AnsyuRireki.get(0).getKrkkeijyoymd(), BizDate.valueOf("20150607"), "仮受計上処理日");
        exNumericEquals(bAK_AnsyuRireki.get(0).getKrkno(), 12345, "仮受番号");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getHrkkeiro(), C_Hrkkeiro.CREDIT, "払込経路");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exDateYMEquals(bAK_AnsyuRireki.get(0).getJkipjytym(), BizDateYM.valueOf("201504"), "次回Ｐ充当年月");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getSyuudaikocd(), C_Syuudaikocd.ZENSINKYOU, "収納代行社コード");
        exStringEquals(bAK_AnsyuRireki.get(0).getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_AnsyuRireki.get(0).getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_AnsyuRireki.get(0).getKouzano(), "1234567", "口座番号");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getSinkeizkkbn(), C_SinkeizkKbn.HENKOU, "新規継続区分");
        exClassificationEquals(bAK_AnsyuRireki.get(0).getSyuyakukyohikbn(), C_SyuyakukyohiKbn.SYUYAKUKYOHI, "集約拒否区分");
        exStringEquals(bAK_AnsyuRireki.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exStringEquals(bAK_AnsyuRireki.get(0).getCardkaisyacd(), "11", "カード会社コード");
        exStringEquals(bAK_AnsyuRireki.get(0).getCreditcardno1(), "12345678901", "クレジットカード番号１");
        exStringEquals(bAK_AnsyuRireki.get(0).getCreditcardno2(), "12345678902", "クレジットカード番号２");
        exStringEquals(bAK_AnsyuRireki.get(0).getCreditcardno3(), "12345678903", "クレジットカード番号３");
        exStringEquals(bAK_AnsyuRireki.get(0).getCreditcardno4(), "12345678904", "クレジットカード番号４");
        exDateEquals(bAK_AnsyuRireki.get(0).getYukoukachkymd(), BizDate.valueOf("20150709"), "有効性確認日");
        exDateEquals(bAK_AnsyuRireki.get(0).getAuthorikanryoymd(), BizDate.valueOf("20150710"), "オーソリ完了日");
        exDateEquals(bAK_AnsyuRireki.get(0).getUriageymdzen(), BizDate.valueOf("20150711"), "売上日（前回）");
        exDateEquals(bAK_AnsyuRireki.get(0).getHrkkigen(), BizDate.valueOf("20150712"), "払込期限");
        exStringEquals(bAK_AnsyuRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_DattaiUktk bAK_DattaiUktk = bAK_AnsyuKihon.getBAKDattaiUktk();
        exStringEquals(bAK_DattaiUktk.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_DattaiUktk.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_DattaiUktk.getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_DattaiUktk.getSyoriYmd(), BizDate.valueOf("20151001"), "処理年月日");
        exClassificationEquals(bAK_DattaiUktk.getDattaikeiro(), C_Dattaikeiro.CREDIT, "脱退経路");
        exClassificationEquals(bAK_DattaiUktk.getDattairiyuukbn(), C_DattairiyuuKbn.OTHER, "脱退理由区分");
        exDateYMEquals(bAK_DattaiUktk.getDattaiym(), BizDateYM.valueOf("201510"), "脱退年月");
        exStringEquals(bAK_DattaiUktk.getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_DattaiUktk.getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_DattaiUktk.getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_DattaiUktk.getKouzano(), "1234567", "口座番号");
        exClassificationEquals(bAK_DattaiUktk.getHurihunokbn(), C_HurihunoKbn.ITKTUGOU, "振替不能理由区分");
        exDateEquals(bAK_DattaiUktk.getHurikaeymd(), BizDate.valueOf("20150604"), "振替日");
        exClassificationEquals(bAK_DattaiUktk.getCreditdatakbn(), C_CreditdataKbn.URIAGE, "クレジットデータ区分");
        exStringEquals(bAK_DattaiUktk.getCreditcardno1(), "12345678901", "クレジットカード番号１");
        exStringEquals(bAK_DattaiUktk.getCreditcardno2(), "12345678902", "クレジットカード番号２");
        exStringEquals(bAK_DattaiUktk.getCreditcardno3(), "12345678903", "クレジットカード番号３");
        exStringEquals(bAK_DattaiUktk.getCreditcardno4(), "12345678904", "クレジットカード番号４");
        exClassificationEquals(bAK_DattaiUktk.getCreditbrerrorcd(), C_Creditbrerrorcd.G97, "クレジット払エラーコード");
        exDateYMEquals(bAK_DattaiUktk.getJkipjytym(), BizDateYM.valueOf("201512"), "次回Ｐ充当年月");
        exStringEquals(bAK_DattaiUktk.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_DattaiUktk.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_DattaiUktk.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_SyuunouHenknRireki> bAK_SyuunouHenknRireki = bAK_AnsyuKihon.getBAKSyuunouHenknRirekis();
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getDenrenno(), "9999999999", "伝票データ連番");
        exNumericEquals(bAK_SyuunouHenknRireki.get(0).getEdano(), 1, "枝番号");
        exDateEquals(bAK_SyuunouHenknRireki.get(0).getDenkihyouymd(), BizDate.valueOf("20150101"), "伝票起票日");
        exDateEquals(bAK_SyuunouHenknRireki.get(0).getShrymd(), BizDate.valueOf("20150102"), "支払日");
        exClassificationEquals(bAK_SyuunouHenknRireki.get(0).getKanjyoukmkcd(), C_Kanjyoukmkcd.SONOTAKARIBARAIKIN_GAIHO, "勘定科目コード");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_SyuunouHenknRireki.get(0).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getKouzano(), "1234567", "口座番号");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getCreditcardno1(), "9999999901", "クレジットカード番号１");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getCreditcardno2(), "9999999902", "クレジットカード番号２");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getCreditcardno3(), "9999999903", "クレジットカード番号３");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getCreditcardno4(), "9999999904", "クレジットカード番号４");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_SyuunouHenknRireki.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_Tokusin bAK_Tokusin = bAK_AnsyuKihon.getBAKTokusin();
        exStringEquals(bAK_Tokusin.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Tokusin.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Tokusin.getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_Tokusin.getTokusinkbn(), C_TokusinKbn.HISAIGAI, "特伸区分");
        exDateEquals(bAK_Tokusin.getTokusinsyoriymd(), BizDate.valueOf("20151101"), "特伸処理年月日");
        exDateEquals(bAK_Tokusin.getTokusinendymd(), BizDate.valueOf("20151102"), "特伸終了日");
        exStringEquals(bAK_Tokusin.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Tokusin.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Tokusin.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exDateEquals(bAK_SmbcStyKanri.get(0).getDatarenymd(), BizDate.valueOf("20151016"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(0).getDatasakuseirenno(), BizNumber.valueOf(1234567));
        exStringEquals(bAK_SmbcStyKanri.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(0).getRendouflg(), C_Rendouflg.RENDOUZUMI, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatakbn(), "7", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatasakuseiymd(), "20151011", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbchknkaisyacd(), "55", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcuktkkanriid(), "1234567890", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihouktkzmymd(), "20151012", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbymd(), "20151013", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcbankhnkykflg(), "1", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbksyymd(), "20151014", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohjyttykymd(), "20151015", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihonyknzmymd(), "20151016", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosnszmymd(), "20151017", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyknhkkzmymd(), "20151018", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyumoku(), "15", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyurui(), "16", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyono(), "12806345672", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyonoedaban(), "00001", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcjktkflg(), "0", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihotrksymd(), "20151019", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohktymd(), "20151020", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckykseiymd(), "20151021", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）１", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmosuktymd(), "20151022", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckosyaareastyknr(), "12121212121212", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(0).getUktkymd(), BizDate.valueOf("20180102"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getTourokuroute(), C_TourokuRouteKbn.DS, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktksyorikbn(), C_UktkSyoriKbn.KAIYAKU, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20180202"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(0).getSyoriyoteiymd(), BizDate.valueOf("20180302"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.MISYORI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getInputshrhousiteikbn(), C_InputShrhousiteiKbn.FBSOUKIN, "入力用支払方法指定区分");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getBankcd(), "1002", "銀行コード");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getSitencd(), "102", "支店コード");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getYokinkbn(), C_YokinKbn.HUTUU, "預金種目区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKouzano(), "201801250002", "口座番号");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKzdoukbn(), C_Kzdou.DOUITU, "口座名義人同一区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKzmeiginmkn(), "テスト名義人２", "口座名義人氏名（カナ）");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkymd(), BizDate.valueOf("20180102"), "円建変更日");
        exDateEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttymd(), BizDate.valueOf("20180202"), "目標額到達日");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttkaiyakuhr(), BizCurrency.valueOf(112000), "目標額到達時解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewkaiyakuhr(), BizCurrency.valueOf(122000), "変更後解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkhr(), BizCurrency.valueOf(132000), "円建変更時返戻金");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNyuuryokuhassoukbn(), C_HassouKbn.TYOKUSOU, "入力発送区分");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu1(), C_HnskariyuuKbn.YENDTHNKHR_ARI, "本社回送理由１");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu2(), C_HnskariyuuKbn.JIMU_ARI, "本社回送理由２");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhrgaika(), BizCurrency.valueOf(142000), "円建変更時解約返戻金（外貨）");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhryen(), BizCurrency.valueOf(152000), "円建変更時解約返戻金（円貨）");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhncd(), "1002", "変更後商品コード");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhnsdno(), 12, "変更後商品世代番号");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkihons(), BizCurrency.valueOf(162000), "円建変更後基本Ｓ");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewhokenryou(), BizCurrency.valueOf(172000), "変更後保険料");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewkyktuukasyu(), C_Tuukasyu.USD, "変更後契約通貨種類");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewryouritusdno(), "102", "変更後料率世代番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(0).getRenno(), 2, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE1, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2010"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getTounendod(), BizCurrency.valueOf(20000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrymd(), BizDate.valueOf("20180102"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedruigk(), BizCurrency.valueOf(30000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(2000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(6000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinTime(), "20181018111111112", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20180102"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(0).getRenno(), 2, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.RISOKUKURIIRE, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(0).getTumitated(), BizCurrency.valueOf(30000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20180202"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinTime(), "20181018111111112", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyouno(), "12312432315223341232", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyksyoriymd(), BizDate.valueOf("20180102"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180202"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNykkeiro(), C_Nykkeiro.KZHRK, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkkaisuu(), C_Hrkkaisuu.TUKI, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.KEIZOKUP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(0).getJyuutouym(), BizDateYM.valueOf("201802"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuuy(), 2, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuum(), 9, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(0).getRsgaku(), BizCurrency.valueOf(20000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getRyosyuymd(), BizDate.valueOf("20180302"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getDenrenno(), "10000000000000000002", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNykdenymd(), BizDate.valueOf("20180402"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitoubumoncd(), "102", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaebankcd(), "1002", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaesitencd(), "202", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTabakarikanjyono(), "02", "束仮勘定番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkno(), "10000002", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.EGSYOKUIN, "振込用紙入金区分");

        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitososhikicd(), "1000002", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinTime(), "20181018111111112", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(0).getDshrtoukeisikibetukey(), "12312432315223341232", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(0).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(0).getHenkousikibetukey(), "101", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriYmd(), BizDate.valueOf("20190102"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyorikbn(), C_SyoriKbn.CLGOFF, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyouhncd(), "1001", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getKykjyoutai(), C_Kykjyoutai.HRKMTYUU, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.CLGOFF, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(0).getKykymd(), BizDate.valueOf("20190402"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(0).getYendthnkymd(), BizDate.valueOf("20190502"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKihons(), BizCurrency.valueOf(999992), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(0).getYoteiriritu(), BizNumber.valueOf(1.22));
        exDateEquals(bAK_KhDshrTuki.get(0).getDenymd(), BizDate.valueOf("20190602"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getSiharaid(), BizCurrency.valueOf(888882), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(0).getCalckijyunymd(), BizDate.valueOf("20190702"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriymd2(), BizDate.valueOf("20190802"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(0).getJkipjytym(), BizDateYM.valueOf("201904"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(0).getKinoubetukijyunymd(), BizDate.valueOf("20190902"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(0).getGengkwari(), BizNumber.valueOf(0.12));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getItibushrgk(), BizCurrency.valueOf(112), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkin(), BizCurrency.valueOf(222), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk(), BizCurrency.valueOf(332), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(442), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(552), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getDkeisanhaitoukin(), BizCurrency.valueOf(662), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkingk(), BizCurrency.valueOf(12), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedganrikindshr(), BizCurrency.valueOf(23), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated(), BizCurrency.valueOf(34), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosimae(), BizCurrency.valueOf(45), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosigo(), BizCurrency.valueOf(56), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTkbthaitou(), BizCurrency.valueOf(67), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE1, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTounendod(), BizCurrency.valueOf(442), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrymd(), BizDate.valueOf("20201002"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk2(), BizCurrency.valueOf(552), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk2(), BizCurrency.valueOf(662), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk2(), BizCurrency.valueOf(772), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20201102"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.RISOKUKURIIRE, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated2(), BizCurrency.valueOf(882), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20191202"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalckari(), BizCurrency.valueOf(992), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(0).getKariwariatedriritu1(), BizNumber.valueOf(0.212));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(0).getKariwariatedriritu2(), BizNumber.valueOf(0.112));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalctumi(), BizCurrency.valueOf(22222), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(0).getTumitatedriritu1(), BizNumber.valueOf(0.132));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(0).getTumitatedriritu2(), BizNumber.valueOf(0.142));
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinTime(), "20181018111111112", "業務用更新時間");

        testTableMaintenanceUtil_backUp_1_2_Db();
    }

    private void testTableMaintenanceUtil_backUp_1_2_Db() {
        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);
        SinkeiyakuDomManager sinkeiyakuDomManager = SWAKInjector.getInstance(SinkeiyakuDomManager.class);

        IT_BAK_KykKihon bAK_KykKihon1 = hozenDomManager.getBAKKykKihon("12806345672", "12345");

        IT_BAK_AnsyuKihon bAK_AnsyuKihon1 = hozenDomManager.getBAKAnsyuKihon("12806345672", "12345");

        List<IT_BAK_KhDenpyoData> bAK_KhDenpyoData1 = hozenDomManager.getBAKKhDenpyoDatasBySyonoTrkssikibetukey("12806345672", "12345");

        List<IT_BAK_KhFBSoukinData> bAK_KhFBSoukinData1 = hozenDomManager.getBAKKhFBSoukinDatasBySyonoTrkssikibetukey("12806345672", "12345");

        List<IT_BAK_KhGaikaFBSoukinData> bAK_KhGaikaFBSoukinData1 = hozenDomManager.getBAKKhGaikaFBSoukinDatasBySyonoTrkssikibetukey("12806345672", "12345");

        List<IT_BAK_KhSntkInfoTouroku> bAK_KhSntkInfoTouroku1 = hozenDomManager.getAllBAKKhSntkInfoTouroku();
        List<HT_BAK_SmbcStyKanri> bAK_SmbcStyKanri1 = sinkeiyakuDomManager.getBAKSmbcStyKanrisBySyonoTrkssikibetukey("12806345672", "12345");

        List<IT_BAK_KhHenkouUktk> bAK_KhHenkouUktk1 = hozenDomManager.getAllBAKKhHenkouUktk();

        List<IT_BAK_KhHaitouKanri> bAK_KhHaitouKanri1 = hozenDomManager.getAllBAKKhHaitouKanri();

        List<IT_BAK_KhTumitateDKanri> bAK_KhTumitateDKanri1 = hozenDomManager.getAllBAKKhTumitateDKanri();

        List<IT_BAK_NyuukinKakusyouData> bAK_NyuukinKakusyouData1 = hozenDomManager.getAllBAKNyuukinKakusyouData();

        List<IT_BAK_KhDshrTuki> bAK_KhDshrTuki1 = hozenDomManager.getAllBAKKhDshrTuki();

        assertNotNull(bAK_KykKihon1);
        assertNotNull(bAK_KykKihon1.getBAKCreditCard());
        exNumericEquals(bAK_KykKihon1.getBAKFatcaInfos().size(), 1, "件数");
        assertNotNull(bAK_KykKihon1.getBAKHhknSya());
        exNumericEquals(bAK_KykKihon1.getBAKKariukekins().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKhLincSousinInfos().size(), 1, "件数");
        assertNotNull(bAK_KykKihon1.getBAKKhTtdkTyuui());
        exNumericEquals(bAK_KykKihon1.getBAKKihrkmpSeisanRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKoujyoSymKanris().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKoujyoSymNaiyous().size(), 1, "件数");
        assertNotNull(bAK_KykKihon1.getBAKKouza());
        assertNotNull(bAK_KykKihon1.getBAKTeikikinKouza());
        exNumericEquals(bAK_KykKihon1.getBAKKykDairitens().size(), 1, "件数");
        assertNotNull(bAK_KykKihon1.getBAKKykSonotaTkyk());
        assertNotNull(bAK_KykKihon1.getBAKKykSya());
        exNumericEquals(bAK_KykKihon1.getBAKKykSyouhns().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKykUkts().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKNyknJissekiRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKSyouhnTokujous().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKYykIdouAnsyuCreditCards().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKYykIdouNaiyoHrhnks().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKYykIdouUktks().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKHengakuUnits().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKhTtdkRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKhTtdkRirekis().get(0).getBAKKhHenkouRirekis().size(), 1, "件数");
        assertNotNull(bAK_KykKihon1.getBAKKhTtdkRirekis().get(0).getBAKKhShrRireki());
        exNumericEquals(bAK_KykKihon1.getBAKKhTtdkRirekis().get(0).getBAKKhShrRireki().getBAKKhShrRirekiDetails().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKhTtdkRirekis().get(0).getBAKKykSyouhnRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKhTtdkRirekis().get(0).getBAKSyouhnTokujouRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKhTtdkRirekis().get(0).getBAKHengakuUnitRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKhTtdkRirekis().get(0).getBAKHengakuCfs().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKTesuuryous().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKTesuuryous().get(0).getBAKTesuuryouSyouhns().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKTesuuryous().get(0).getBAKTesuuryouSyouhnRirekis().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKoujyoSyms().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKSuiihyous().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKTtdkKans().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKHokenSyoukens().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKHokenSyoukens().get(0).getBAKHokenSyoukenHukaInfos().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKTrkKzks().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKCreditCardInfos().size(), 1, "件数");
        exNumericEquals(bAK_KykKihon1.getBAKKoujyoSymNaiyouDs().size(), 1, "件数");


        exNumericEquals(bAK_KhDenpyoData1.size(), 1, "件数");

        exNumericEquals(bAK_KhFBSoukinData1.size(), 1, "件数");

        exNumericEquals(bAK_KhGaikaFBSoukinData1.size(), 1, "件数");

        exNumericEquals(bAK_KhSntkInfoTouroku1.size(), 1, "件数");


        assertNotNull(bAK_AnsyuKihon1);
        assertNotNull(bAK_AnsyuKihon1.getBAKAnsyuCreditCard());
        exNumericEquals(bAK_AnsyuKihon1.getBAKAnsyuRirekis().size(), 1, "件数");
        assertNotNull(bAK_AnsyuKihon1.getBAKDattaiUktk());
        exNumericEquals(bAK_AnsyuKihon1.getBAKSyuunouHenknRirekis().size(), 1, "件数");
        assertNotNull(bAK_AnsyuKihon1.getBAKTokusin());

        exNumericEquals(bAK_SmbcStyKanri1.size(), 1, "件数");

        exNumericEquals(bAK_KhHenkouUktk1.size(), 1, "件数");
        exNumericEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().size(), 1, "件数");
        exNumericEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().size(), 1, "件数");

        exStringEquals(bAK_KykKihon1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykKihon1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykKihon1.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KykKihon1.getAitesyono(), "12806345672", "相手証券番号");
        exClassificationEquals(bAK_KykKihon1.getHaitoukbn(), C_HaitouKbn.NONE, "配当区分");
        exClassificationEquals(bAK_KykKihon1.getHrkkaisuu(), C_Hrkkaisuu.ITIJI, "払込回数");
        exClassificationEquals(bAK_KykKihon1.getHrkkeiro(), C_Hrkkeiro.CREDIT, "払込経路");
        exClassificationEquals(bAK_KykKihon1.getSdpdkbn(), C_Sdpd.PD, "Ｓ建Ｐ建区分");
        exClassificationEquals(bAK_KykKihon1.getDntryouritukbn(), C_DntryourituKbn.A, "団体料率区分");
        exStringEquals(bAK_KykKihon1.getDntcd(), "001", "団体コード");
        exClassificationEquals(bAK_KykKihon1.getSntkhoukbn(), C_SntkhouKbn.BLNK, "選択方法区分");
        exClassificationEquals(bAK_KykKihon1.getSinsakbn(), C_SinsaKbn.NINGENDOKKU, "診査区分");
        exDateEquals(bAK_KykKihon1.getMosymd(), BizDate.valueOf("20150101"), "申込日");
        exDateEquals(bAK_KykKihon1.getKktymd(), BizDate.valueOf("20150102"), "告知日");
        exDateEquals(bAK_KykKihon1.getFstpnyknymd(), BizDate.valueOf("20150103"), "初回保険料入金日");
        exDateEquals(bAK_KykKihon1.getMosukeymd(), BizDate.valueOf("20150104"), "申込書受付日");
        exDateEquals(bAK_KykKihon1.getMosjimosuktymd(), BizDate.valueOf("20150105"), "申込時申込書受付日");
        exDateEquals(bAK_KykKihon1.getSeirituymd(), BizDate.valueOf("20150106"), "成立日");
        exDateEquals(bAK_KykKihon1.getItiprsymd(), BizDate.valueOf("20150107"), "１Ｐ領収予定日");
        exBizCalcbleEquals(bAK_KykKihon1.getHrkp(), BizCurrency.valueOf(10000), "払込保険料");
        exDateYMEquals(bAK_KykKihon1.getBosyuuym(), BizDateYM.valueOf("201501"), "募集年月");
        exDateYMEquals(bAK_KykKihon1.getSeisekiym(), BizDateYM.valueOf("201502"), "成績計上年月");
        exDateYMEquals(bAK_KykKihon1.getSkeikeijyouym(), BizDateYM.valueOf("201503"), "新契約計上年月");
        exStringEquals(bAK_KykKihon1.getPlancd(), "002", "プランコード");
        exNumericEquals(bAK_KykKihon1.getPlanrenno(), 1, "プラン連番");
        exClassificationEquals(bAK_KykKihon1.getAisyoumeikbn(), C_AisyoumeiKbn.BLNK, "愛称名区分");
        exClassificationEquals(bAK_KykKihon1.getSyusaiumu(), C_UmuKbn.ARI, "出再有無");
        exClassificationEquals(bAK_KykKihon1.getStknsetkbn(), C_StknsetKbn.NONE, "質権設定区分");
        exClassificationEquals(bAK_KykKihon1.getKykksykjyumu(), C_UmuKbn.NONE, "契約者貸付約定有無");
        exClassificationEquals(bAK_KykKihon1.getKykksumu(), C_UmuKbn.ARI, "契約者貸付有無");
        exClassificationEquals(bAK_KykKihon1.getAplkahikbn(), C_Aplkahi.NONE, "ＡＰＬ可否区分");
        exClassificationEquals(bAK_KykKihon1.getAplumu(), C_UmuKbn.NONE, "ＡＰＬ有無");
        exClassificationEquals(bAK_KykKihon1.getFstphrkkeirokbn(), C_FstphrkkeiroKbn.CONVENIENCE, "初回保険料払込経路区分");
        exDateYEquals(bAK_KykKihon1.getHaitounendo(), BizDateY.valueOf("2015"), "配当年度");
        exClassificationEquals(bAK_KykKihon1.getHaitoukinuketorihoukbn(), C_HaitoukinuketorihouKbn.BLNK, "配当金受取方法区分");
        exClassificationEquals(bAK_KykKihon1.getTratkityuiumu(), C_UmuKbn.ARI, "取扱注意有無");
        exStringEquals(bAK_KykKihon1.getTratkityuiuny(), "取扱注意内容１", "取扱注意内容");
        exNumericEquals(bAK_KykKihon1.getSbuktnin(), 2, "死亡受取人人数");
        exStringEquals(bAK_KykKihon1.getGansindankakuteiymd(), "20150108", "がん診断確定日");
        exClassificationEquals(bAK_KykKihon1.getMosuketukekbn(), C_MosUketukeKbn.SIRYOUSEIKYUU, "申込受付区分");
        exClassificationEquals(bAK_KykKihon1.getKijikbn(), C_KijiKbn.NONE, "記事区分");
        exStringEquals(bAK_KykKihon1.getHhknsykgycd(), "101", "被保険者職業コード");
        exClassificationEquals(bAK_KykKihon1.getHhknnensyuukbn(), C_NensyuuKbn.MORETHAN1000, "被保険者年収区分");
        exStringEquals(bAK_KykKihon1.getDrtenkanritodoufukencd(), "47", "代理店管理都道府県コード");
        exStringEquals(bAK_KykKihon1.getCifcd(), "003", "ＣＩＦコード");
        exStringEquals(bAK_KykKihon1.getSmbckanriid(), "004", "ＳＭＢＣ受付管理ＩＤ");
        exClassificationEquals(bAK_KykKihon1.getTsryhshrkykumukbn(), C_UmuKbn.ARI, "手数料不支払契約有無区分");
        exClassificationEquals(bAK_KykKihon1.getKykhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.UNTEN, "契約者本人確認書類区分");
        exClassificationEquals(bAK_KykKihon1.getSkskknhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.UNTEN, "親権者後見人本人確認書類区分");
        exClassificationEquals(bAK_KykKihon1.getBoskykjyoutai(), C_Boskykjyoutai.HEIGAIBOUSISOTIKYK, "募集契約状態");
        exNumericEquals(bAK_KykKihon1.getKanyuusyano(), 5, "加入者番号");
        exClassificationEquals(bAK_KykKihon1.getDrctservicemoskbn(), C_DirectServiceMosKbn.ENTRY, "ダイレクトサービス申込区分");
        exClassificationEquals(bAK_KykKihon1.getSksyoukenskskbn(), C_SkSyoukenSksKbn.SINKISAKUSEI, "新契約証券作成区分");
        exDateEquals(bAK_KykKihon1.getSinkyksyokensakuseiymd(), BizDate.valueOf("20100101"), "新契約証券作成日");
        exDateEquals(bAK_KykKihon1.getSyoyousinkyksyohakkouymd(), BizDate.valueOf("20110101"), "証券用新契約証券発行日");
        exClassificationEquals(bAK_KykKihon1.getNkuikosumikbn(), C_NkIkouzumiKbn.BLNK, "年金移行済区分");
        exDateEquals(bAK_KykKihon1.getSyhenkouymd(), BizDate.valueOf("20150109"), "最終変更日");
        exDateEquals(bAK_KykKihon1.getLastsyosaihkymd(), BizDate.valueOf("20150110"), "最終証券再発行日");
        exDateEquals(bAK_KykKihon1.getLastmeihenymd(), BizDate.valueOf("20150111"), "最終名義変更日");
        exDateEquals(bAK_KykKihon1.getLastkykmeighnkymd(), BizDate.valueOf("20150111"), "最終契約者名義変更日");
        exDateEquals(bAK_KykKihon1.getLastsbukthenymd(), BizDate.valueOf("20150111"), "最終死亡受取人変更日");
        exDateEquals(bAK_KykKihon1.getLastkyknmseiymdhenkouymd(), BizDate.valueOf("20150111"), "最終契約者名生年月日変更日");
        exDateEquals(bAK_KykKihon1.getLastkyknmkanakjteiymd(), BizDate.valueOf("20150113"), "最終契約者名仮名漢字訂正日");
        exDateEquals(bAK_KykKihon1.getLasttsinynohenkouymd(), BizDate.valueOf("20150114"), "最終通信先郵便番号変更日");
        exDateEquals(bAK_KykKihon1.getLastjyuuhenymd(), BizDate.valueOf("20150115"), "最終住所変更日");
        exStringEquals(bAK_KykKihon1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykKihon1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykKihon1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        IT_BAK_CreditCard bAK_CreditCard1 = bAK_KykKihon1.getBAKCreditCard();
        exStringEquals(bAK_CreditCard1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_CreditCard1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_CreditCard1.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_CreditCard1.getKokno(), "1000001", "顧客番号");
        exStringEquals(bAK_CreditCard1.getCardkaisyacd(), "01", "カード会社コード");
        exStringEquals(bAK_CreditCard1.getCreditcardno1(), "10000011", "クレジットカード番号１");
        exStringEquals(bAK_CreditCard1.getCreditcardno2(), "10000012", "クレジットカード番号２");
        exStringEquals(bAK_CreditCard1.getCreditcardno3(), "10000013", "クレジットカード番号３");
        exStringEquals(bAK_CreditCard1.getCreditcardno4(), "10000014", "クレジットカード番号４");
        exStringEquals(bAK_CreditCard1.getCreditcardykkigen(), "20151101", "クレジットカード有効期限");
        exStringEquals(bAK_CreditCard1.getCreditmeiginmkn(), "クレジットカード名義人氏名（カナ）１", "クレジットカード名義人氏名（カナ）");
        exStringEquals(bAK_CreditCard1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_CreditCard1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_CreditCard1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_FatcaInfo> bAK_FatcaInfo1 = bAK_KykKihon1.getBAKFatcaInfos();
        exStringEquals(bAK_FatcaInfo1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_FatcaInfo1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_FatcaInfo1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_FatcaInfo1.get(0).getRenno(), 1, "連番");
        exDateEquals(bAK_FatcaInfo1.get(0).getSyoriYmd(), BizDate.valueOf("20100101"), "処理年月日");
        exStringEquals(bAK_FatcaInfo1.get(0).getSyorisosikicd(), "1000001", "処理組織コード");
        exClassificationEquals(bAK_FatcaInfo1.get(0).getFatcasnsikbn(), C_FatcasnsiKbn.BLNK, "ＦＡＴＣＡ宣誓区分");
        exClassificationEquals(bAK_FatcaInfo1.get(0).getBikkjnssinfokbn(), C_BikkjnssinfoKbn.ARI, "米国人示唆情報区分");
        exClassificationEquals(bAK_FatcaInfo1.get(0).getFatcakekkbn(), C_FatcakekKbn.TAISYOUGAIYOU, "ＦＡＴＣＡ結果区分");
        exClassificationEquals(bAK_FatcaInfo1.get(0).getFatcahankeiikbn(), C_FatcahankeiiKbn.SONOTA, "ＦＡＴＣＡ判明経緯区分");
        exStringEquals(bAK_FatcaInfo1.get(0).getBikknzsyno(), "100001", "米国納税者番号");
        exDateEquals(bAK_FatcaInfo1.get(0).getSyomeiymd(), BizDate.valueOf("20150901"), "署名日");
        exStringEquals(bAK_FatcaInfo1.get(0).getKokno(), "100002", "顧客番号");
        exClassificationEquals(bAK_FatcaInfo1.get(0).getFatcatgkbn(), C_FatcatgKbn.KYKSZK, "ＦＡＴＣＡ対象者区分");
        exStringEquals(bAK_FatcaInfo1.get(0).getSeionnmkn(), "清音氏名（カナ）１", "清音氏名（カナ）");
        exStringEquals(bAK_FatcaInfo1.get(0).getNmkn(), "氏名（カナ）１", "氏名（カナ）");
        exStringEquals(bAK_FatcaInfo1.get(0).getNmkj(), "氏名（漢字）１", "氏名（漢字）");
        exDateEquals(bAK_FatcaInfo1.get(0).getSeiymd(), BizDate.valueOf("20150902"), "生年月日");
        exClassificationEquals(bAK_FatcaInfo1.get(0).getSeibetu(), C_Seibetu.MALE, "性別");
        exDateEquals(bAK_FatcaInfo1.get(0).getKouryokuendymd(), BizDate.valueOf("20150903"), "効力終了日");
        exDateEquals(bAK_FatcaInfo1.get(0).getTrkymd(), BizDate.valueOf("20150903"), "登録日");
        exStringEquals(bAK_FatcaInfo1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_FatcaInfo1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_FatcaInfo1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        IT_BAK_HhknSya bAK_HhknSya1 = bAK_KykKihon1.getBAKHhknSya();
        exStringEquals(bAK_HhknSya1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HhknSya1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HhknSya1.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_HhknSya1.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_HhknSya1.getHhknsakuinmeino(), "1000000001", "被保険者索引名番号");
        exStringEquals(bAK_HhknSya1.getHhknnmkn(), "被保険者名（本ＴＢＬ）", "被保険者名（カナ）");
        exStringEquals(bAK_HhknSya1.getHhknnmkj(), "被保険者名漢字１", "被保険者名（漢字）");
        exClassificationEquals(bAK_HhknSya1.getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(bAK_HhknSya1.getHhknseiymd(), BizDate.valueOf("20150301"), "被保険者生年月日");
        exClassificationEquals(bAK_HhknSya1.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exStringEquals(bAK_HhknSya1.getHhknyno(), "3334444", "被保険者郵便番号");
        exStringEquals(bAK_HhknSya1.getHhknadr1kn(), "被保険者住所１カナ１", "被保険者住所１（カナ）");
        exStringEquals(bAK_HhknSya1.getHhknadr1kj(), "被保険者住所１漢字１", "被保険者住所１（漢字）");
        exStringEquals(bAK_HhknSya1.getHhknadr2kn(), "被保険者住所２カナ１", "被保険者住所２（カナ）");
        exStringEquals(bAK_HhknSya1.getHhknadr2kj(), "被保険者住所２漢字１", "被保険者住所２（漢字）");
        exStringEquals(bAK_HhknSya1.getHhknadr3kn(), "被保険者住所３カナ１", "被保険者住所３（カナ）");
        exStringEquals(bAK_HhknSya1.getHhknadr3kj(), "被保険者住所３漢字１", "被保険者住所３（漢字）");
        exStringEquals(bAK_HhknSya1.getHhkntelno(), null, "被保険者電話番号");
        exStringEquals(bAK_HhknSya1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HhknSya1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HhknSya1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_Kariukekin> bAK_Kariukekin1 = bAK_KykKihon1.getBAKKariukekins();
        exStringEquals(bAK_Kariukekin1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Kariukekin1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Kariukekin1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_Kariukekin1.get(0).getKrkno(), 666, "仮受番号");
        exDateEquals(bAK_Kariukekin1.get(0).getKrkkeijyoymd(), BizDate.valueOf("20150701"), "仮受計上処理日");
        exBizCalcbleEquals(bAK_Kariukekin1.get(0).getKrkgk(), BizCurrency.valueOf(100000), "仮受金額");
        exDateEquals(bAK_Kariukekin1.get(0).getHasseidenymd(), BizDate.valueOf("20150702"), "発生伝票日付");
        exDateEquals(bAK_Kariukekin1.get(0).getSeisandenymd(), BizDate.valueOf("20150703"), "精算伝票日付");
        exClassificationEquals(bAK_Kariukekin1.get(0).getKrkseisanzumiflg(), C_Krkseisanzumiflg.SUMI, "仮受精算済フラグ");
        exClassificationEquals(bAK_Kariukekin1.get(0).getKrkriyuukbn(), C_KrkriyuuKbn.PMENGONYKN, "仮受理由区分");
        exClassificationEquals(bAK_Kariukekin1.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.PMENYOUP, "入金内容区分");
        exClassificationEquals(bAK_Kariukekin1.get(0).getNykkeiro(), C_Nykkeiro.HKNKIN, "入金経路");
        exDateYMEquals(bAK_Kariukekin1.get(0).getJyuutouym(), BizDateYM.valueOf("201507"), "充当年月");
        exNumericEquals(bAK_Kariukekin1.get(0).getJyutoukaisuuy(), 5, "充当回数（年）");
        exNumericEquals(bAK_Kariukekin1.get(0).getJyutoukaisuum(), 6, "充当回数（月）");
        exDateEquals(bAK_Kariukekin1.get(0).getRyosyuymd(), BizDate.valueOf("20150704"), "領収日");
        exStringEquals(bAK_Kariukekin1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Kariukekin1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Kariukekin1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");



        List<IT_BAK_KhLincSousinInfo> bAK_KhLincSousinInfo1 = bAK_KykKihon1.getBAKKhLincSousinInfos();
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getKbnkey(), "07", "区分キー");
        exClassificationEquals(bAK_KhLincSousinInfo1.get(0).getLincsoujyusinsyskbn(), C_LincsoujyusinsysKbn.HOZEN, "ＬＩＮＣ送受信用システム区分");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getSyono(), "12806345672", "証券番号");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getRenno(), 1, "連番");
        exClassificationEquals(bAK_KhLincSousinInfo1.get(0).getLincsousinkbn(), C_SousinKbn.SOUSINZUMI, "ＬＩＮＣ送信区分");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLincrecordsyubetu(), 11, "ＬＩＮＣ＿レコード種別");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getLinchenkoutype(), "9", "ＬＩＮＣ＿変更タイプ");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinckanyuusyano(), 1234567890, "ＬＩＮＣ＿加入者番号");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getLinchhknnmkn(), "ＬＩＮＣ＿被保険者名（カナ）１", "ＬＩＮＣ＿被保険者名（カナ）");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getLinchhknnmkj(), "ＬＩＮＣ＿被保険者名（漢字）１", "ＬＩＮＣ＿被保険者名（漢字）");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinchhknsei(), 3, "ＬＩＮＣ＿被保険者性別");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinchhknseiymd(), 20150101, "ＬＩＮＣ＿被保険者生年月日");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getLinchhknadrkn(), "ＬＩＮＣ＿被保険者住所（カナ）１", "ＬＩＮＣ＿被保険者住所（カナ）");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinckeihidjnhyouji(), 8, "ＬＩＮＣ＿契被同人表示");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getLinckyknmkn(), "ＬＩＮＣ＿契約者名（カナ）１", "ＬＩＮＣ＿契約者名（カナ）");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getLinckyknmkj(), "ＬＩＮＣ＿契約者名（漢字）１", "ＬＩＮＣ＿契約者名（漢字）");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinckyksei(), 1, "ＬＩＮＣ＿契約者性別");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinckykseiymd(), 20150102, "ＬＩＮＣ＿契約者生年月日");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getLinckykadrkn(), "ＬＩＮＣ＿契約者住所（カナ）１", "ＬＩＮＣ＿契約者住所（カナ）");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinctrkmousideymd(), 20150103, "ＬＩＮＣ＿登録申出年月日");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinckykytymd(), 20150104, "ＬＩＮＣ＿契約予定年月日");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinckykymd(), 20150105, "ＬＩＮＣ＿契約年月日");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinchozenytymd(), 20150106, "ＬＩＮＣ＿保全予定年月日");
        exBizCalcbleEquals(bAK_KhLincSousinInfo1.get(0).getLincsgnyukyhng(), BizCurrency.valueOf(1001), "ＬＩＮＣ＿災害入院給付金日額");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinchozenymd(), 20150106, "ＬＩＮＣ＿保全年月日");
        exBizCalcbleEquals(bAK_KhLincSousinInfo1.get(0).getLincsipnyukyhng(), BizCurrency.valueOf(1002), "ＬＩＮＣ＿疾病入院給付金日額");
        exBizCalcbleEquals(bAK_KhLincSousinInfo1.get(0).getLincsjnyukyhng(), BizCurrency.valueOf(1003), "ＬＩＮＣ＿成人病入院給付金日額");
        exBizCalcbleEquals(bAK_KhLincSousinInfo1.get(0).getLincsonotanyukyhng(), BizCurrency.valueOf(1004), "ＬＩＮＣ＿その他入院給付金日額");
        exBizCalcbleEquals(bAK_KhLincSousinInfo1.get(0).getLinchutuusbs(), BizCurrency.valueOf(1005), "ＬＩＮＣ＿普通死亡保険金額");
        exBizCalcbleEquals(bAK_KhLincSousinInfo1.get(0).getLincsgsbksns(), BizCurrency.valueOf(1006), "ＬＩＮＣ＿災害死亡時加算保険金額");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getLinckakusyasiyouran(), "ＬＩＮＣ＿各社使用欄１", "ＬＩＮＣ＿各社使用欄");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLincmousideflg(), 5, "ＬＩＮＣ＿申出フラグ");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLincmousideflgsetymd(), 20150108, "ＬＩＮＣ＿申出フラグ設定年月日");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLincmousideflgkaijyoymd(), 20150109, "ＬＩＮＣ＿申出フラグ解除年月日");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLincjgyhknflg(), 6, "ＬＩＮＣ＿事業保険フラグ");
        exNumericEquals(bAK_KhLincSousinInfo1.get(0).getLinctenkanflg(), 7, "ＬＩＮＣ＿転換フラグ");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhLincSousinInfo1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        IT_BAK_KhTtdkTyuui bAK_KhTtdkTyuui1 = bAK_KykKihon1.getBAKKhTtdkTyuui();
        exStringEquals(bAK_KhTtdkTyuui1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhTtdkTyuui1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhTtdkTyuui1.getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_KhTtdkTyuui1.getTtdktyuuisetymd(), BizDate.valueOf("20151001"), "手続注意設定日");
        exStringEquals(bAK_KhTtdkTyuui1.getTtdktyuuisetnm(), "手続注意設定者名１", "手続注意設定者名");
        exClassificationEquals(bAK_KhTtdkTyuui1.getKktyuitakbn(), C_KktyuitaKbn.DNGNMEMONASI, "契約管理注意取扱区分");
        exStringEquals(bAK_KhTtdkTyuui1.getTtdktyuuinaiyou1(), "手続注意内容１＿１", "手続注意内容１");
        exStringEquals(bAK_KhTtdkTyuui1.getTtdktyuuinaiyou2(), "手続注意内容２＿１", "手続注意内容２");
        exStringEquals(bAK_KhTtdkTyuui1.getTtdktyuuinaiyou3(), "手続注意内容３＿１", "手続注意内容３");
        exClassificationEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbn1(), C_TtdktyuuiKbn.TTDKTYUUOUTAITYUUI, "手続注意区分１");
        exClassificationEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbn2(), C_TtdktyuuiKbn.KYKSYASOUSASYOUKAI, "手続注意区分２");
        exClassificationEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbn3(), C_TtdktyuuiKbn.HASANOYOBITOUSAN, "手続注意区分３");
        exClassificationEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbn4(), C_TtdktyuuiKbn.HOKENKEIYAKUSASIOSAE, "手続注意区分４");
        exClassificationEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbn5(), C_TtdktyuuiKbn.KYKSYAYUKUEHUMEI, "手続注意区分５");
        exStringEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnhsknaiyou1(), "手続注意区分補足内容１＿１", "手続注意区分補足内容１");
        exStringEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnhsknaiyou2(), "手続注意区分補足内容２＿１", "手続注意区分補足内容２");
        exStringEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnhsknaiyou3(), "手続注意区分補足内容３＿１", "手続注意区分補足内容３");
        exStringEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnhsknaiyou4(), "手続注意区分補足内容４＿１", "手続注意区分補足内容４");
        exStringEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnhsknaiyou5(), "手続注意区分補足内容５＿１", "手続注意区分補足内容５");
        exDateEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnsetymd1(), BizDate.valueOf("20151002"), "手続注意区分設定日１");
        exDateEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnsetymd2(), BizDate.valueOf("20151003"), "手続注意区分設定日２");
        exDateEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnsetymd3(), BizDate.valueOf("20151004"), "手続注意区分設定日３");
        exDateEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnsetymd4(), BizDate.valueOf("20151005"), "手続注意区分設定日４");
        exDateEquals(bAK_KhTtdkTyuui1.getTtdktyuuikbnsetymd5(), BizDate.valueOf("20151006"), "手続注意区分設定日５");
        exStringEquals(bAK_KhTtdkTyuui1.getSetsosikicd1(), "1000001", "設定組織コード１");
        exStringEquals(bAK_KhTtdkTyuui1.getSetsosikicd2(), "2000001", "設定組織コード２");
        exStringEquals(bAK_KhTtdkTyuui1.getSetsosikicd3(), "3000001", "設定組織コード３");
        exStringEquals(bAK_KhTtdkTyuui1.getSetsosikicd4(), "4000001", "設定組織コード４");
        exStringEquals(bAK_KhTtdkTyuui1.getSetsosikicd5(), "5000001", "設定組織コード５");
        exStringEquals(bAK_KhTtdkTyuui1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTtdkTyuui1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTtdkTyuui1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KihrkmpSeisanRireki> bAK_KihrkmpSeisanRireki1 = bAK_KykKihon1.getBAKKihrkmpSeisanRirekis();
        exStringEquals(bAK_KihrkmpSeisanRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KihrkmpSeisanRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KihrkmpSeisanRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KihrkmpSeisanRireki1.get(0).getRenno(), 1, "連番");
        exStringEquals(bAK_KihrkmpSeisanRireki1.get(0).getHenkousikibetukey(), "100", "変更識別キー");
        exDateEquals(bAK_KihrkmpSeisanRireki1.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150101"), "効力発生日");
        exClassificationEquals(bAK_KihrkmpSeisanRireki1.get(0).getKihrkpssnaiyoukbn(), C_KiharaiPseisanNaiyouKbn.SEISANP, "既払込Ｐ精算内容区分");
        exDateYMEquals(bAK_KihrkmpSeisanRireki1.get(0).getJyuutouym(), BizDateYM.valueOf("201501"), "充当年月");
        exNumericEquals(bAK_KihrkmpSeisanRireki1.get(0).getSeijyutoukaisuum(), 10, "精算充当回数（月）");
        exNumericEquals(bAK_KihrkmpSeisanRireki1.get(0).getSeijyutoukaisuuy(), 20, "精算充当回数（年）");
        exClassificationEquals(bAK_KihrkmpSeisanRireki1.get(0).getMisyuumikeikakbn(), C_MisyuumikeikaKbn.MIKEIKAP, "未収未経過区分");
        exClassificationEquals(bAK_KihrkmpSeisanRireki1.get(0).getRstuukasyu(), C_Tuukasyu.JPY, "領収通貨種類");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki1.get(0).getSeisanpgoukei(), BizCurrency.valueOf(10001), "精算保険料合計");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki1.get(0).getYenkansansspgoukei(), BizCurrency.valueOf(1000000001), "円換算精算保険料合計");
        exDateEquals(bAK_KihrkmpSeisanRireki1.get(0).getYenkansantkykwsrateymd(), BizDate.valueOf("20100101"), "円換算適用為替レート基準日");
        assertEquals("円換算適用為替レート", bAK_KihrkmpSeisanRireki1.get(0).getYenkansantkykwsrate(), BizNumber.valueOf(101));
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki1.get(0).getHenkank(), BizCurrency.valueOf(10002), "返還金");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki1.get(0).getYenkansanhenkankin(), BizCurrency.valueOf(1000000001), "円換算返還金");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki1.get(0).getTuityouk(), BizCurrency.valueOf(10003), "追徴金");
        exBizCalcbleEquals(bAK_KihrkmpSeisanRireki1.get(0).getYenkansantuityoukin(), BizCurrency.valueOf(1000000001), "円換算追徴金");
        exDateEquals(bAK_KihrkmpSeisanRireki1.get(0).getZeimukwsratekjnymd(), BizDate.valueOf("20100101"), "税務用為替レート基準日");
        assertEquals("税務用為替レート", bAK_KihrkmpSeisanRireki1.get(0).getZeimukwsrate(), BizNumber.valueOf(101));
        exStringEquals(bAK_KihrkmpSeisanRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KihrkmpSeisanRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KihrkmpSeisanRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KoujyoSymKanri> bAK_KoujyoSymKanri1 = bAK_KykKihon1.getBAKKoujyoSymKanris();
        exStringEquals(bAK_KoujyoSymKanri1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KoujyoSymKanri1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KoujyoSymKanri1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KoujyoSymKanri1.get(0).getNendo(), "2015", "年度");
        exDateYMEquals(bAK_KoujyoSymKanri1.get(0).getLastsyoumeiendym(), BizDateYM.valueOf("201501"), "最終証明終了年月");
        exStringEquals(bAK_KoujyoSymKanri1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KoujyoSymKanri1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KoujyoSymKanri1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KoujyoSymNaiyou> bAK_KoujyoSymNaiyou1 = bAK_KykKihon1.getBAKKoujyoSymNaiyous();
        exStringEquals(bAK_KoujyoSymNaiyou1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KoujyoSymNaiyou1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KoujyoSymNaiyou1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KoujyoSymNaiyou1.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_KoujyoSymNaiyou1.get(0).getRenno3keta(), 123, "連番（３桁）");
        exStringEquals(bAK_KoujyoSymNaiyou1.get(0).getKoujyosyoumeinnd(), "2015", "控除証明年度");
        exDateYMEquals(bAK_KoujyoSymNaiyou1.get(0).getSyoumeistartym(), BizDateYM.valueOf("201501"), "証明開始年月");
        exDateYMEquals(bAK_KoujyoSymNaiyou1.get(0).getSyoumeiendym(), BizDateYM.valueOf("201502"), "証明終了年月");
        exClassificationEquals(bAK_KoujyoSymNaiyou1.get(0).getKoujyosyoumeipkbn(), C_KoujyosyoumeipKbn.NENKIN, "控除証明保険料区分");
        exClassificationEquals(bAK_KoujyoSymNaiyou1.get(0).getTekiyouseidokbn(), C_TekiyouseidoKbn.NEWSD, "適用制度区分");
        exClassificationEquals(bAK_KoujyoSymNaiyou1.get(0).getKoujyosymnaiyoureckbn(), C_KoujyosymnaiyourecKbn.TUITYOUKIN, "控除証明内容レコード区分");
        exBizCalcbleEquals(bAK_KoujyoSymNaiyou1.get(0).getKoujyosyoumeigk(), BizCurrency.valueOf(1001), "控除証明額");
        exDateYMEquals(bAK_KoujyoSymNaiyou1.get(0).getJyutoustartym(), BizDateYM.valueOf("201503"), "充当開始年月");
        exNumericEquals(bAK_KoujyoSymNaiyou1.get(0).getNyknjskrrkrenno(), 11, "入金実績履歴連番");
        exNumericEquals(bAK_KoujyoSymNaiyou1.get(0).getKihrkpssrrkrenno(), 12, "既払込Ｐ精算履歴連番");
        exClassificationEquals(bAK_KoujyoSymNaiyou1.get(0).getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.SUMI, "控除証明書発行済フラグ");
        exStringEquals(bAK_KoujyoSymNaiyou1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KoujyoSymNaiyou1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KoujyoSymNaiyou1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        IT_BAK_Kouza bAK_Kouza1 = bAK_KykKihon1.getBAKKouza();
        exStringEquals(bAK_Kouza1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Kouza1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Kouza1.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_Kouza1.getKokno(), "1000001", "顧客番号");
        exStringEquals(bAK_Kouza1.getBankcd(), "0001", "銀行コード");
        exStringEquals(bAK_Kouza1.getSitencd(), "001", "支店コード");
        exClassificationEquals(bAK_Kouza1.getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_Kouza1.getKouzano(), "1234567", "口座番号");
        exStringEquals(bAK_Kouza1.getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exClassificationEquals(bAK_Kouza1.getSinkeizkkbn(), C_SinkeizkKbn.HENKOU, "新規継続区分");
        exClassificationEquals(bAK_Kouza1.getSyuudaikocd(), C_Syuudaikocd.ZENSINKYOU, "収納代行社コード");
        exStringEquals(bAK_Kouza1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Kouza1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Kouza1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        IT_BAK_TeikikinKouza bAK_TeikikinKouza1 = bAK_KykKihon1.getBAKTeikikinKouza();
        exStringEquals(bAK_TeikikinKouza1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TeikikinKouza1.getSyono(), "12806345672", "証券番号");
        exClassificationEquals(bAK_TeikikinKouza1.getKzsyuruikbn(), C_KouzasyuruiKbn.YENKOUZA, "口座種類区分");
        exStringEquals(bAK_TeikikinKouza1.getBankcd(), "0001", "銀行コード");
        exStringEquals(bAK_TeikikinKouza1.getSitencd(), "001", "支店コード");
        exClassificationEquals(bAK_TeikikinKouza1.getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_TeikikinKouza1.getKouzano(), "1234567", "口座番号");
        exStringEquals(bAK_TeikikinKouza1.getKzmeiginmkn(), "口座名義人氏名（カナ）", "口座名義人氏名（カナ）");
        exStringEquals(bAK_TeikikinKouza1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TeikikinKouza1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TeikikinKouza1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KykDairiten> bAK_KykDairiten1 = bAK_KykKihon1.getBAKKykDairitens();
        exStringEquals(bAK_KykDairiten1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykDairiten1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykDairiten1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KykDairiten1.get(0).getDrtenrenno(), 3, "代理店連番");
        exStringEquals(bAK_KykDairiten1.get(0).getDrtencd(), "10001", "代理店コード");
        exStringEquals(bAK_KykDairiten1.get(0).getDrtenkanrisosikicd(), "1000001", "代理店管理組織コード");
        exStringEquals(bAK_KykDairiten1.get(0).getGyousekikeijyousakisosikicd(), "1000001", "業績計上先組織コード");
        exStringEquals(bAK_KykDairiten1.get(0).getOyadrtencd(), "10003", "親代理店コード");
        exStringEquals(bAK_KykDairiten1.get(0).getBosyuucd(), "100001", "募集人コード");
        exStringEquals(bAK_KykDairiten1.get(0).getDaibosyuucd(), "100001", "代表募集人コード");
        exClassificationEquals(bAK_KykDairiten1.get(0).getDrtenbunumu(), C_UmuKbn.NONE, "代理店分担有無");
        exClassificationEquals(bAK_KykDairiten1.get(0).getKanjidrtflg(), C_Kanjidrtflg.KANJI, "幹事代理店フラグ");
        assertEquals("分担割合", bAK_KykDairiten1.get(0).getBunwari(), BizNumber.valueOf(100));
        exDateEquals(bAK_KykDairiten1.get(0).getIkanymd(), BizDate.valueOf("20150801"), "移管日");
        exStringEquals(bAK_KykDairiten1.get(0).getBsyujoyadrtencd(), "10004", "募集時親代理店コード");
        exStringEquals(bAK_KykDairiten1.get(0).getBsyujdrtencd(), "10005", "募集時代理店コード");
        exStringEquals(bAK_KykDairiten1.get(0).getBsyujbosyuutrkno(), "10006", "募集時募集人登録番号");
        exStringEquals(bAK_KykDairiten1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykDairiten1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykDairiten1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        IT_BAK_KykSonotaTkyk bAK_KykSonotaTkyk1 = bAK_KykKihon1.getBAKKykSonotaTkyk();
        exStringEquals(bAK_KykSonotaTkyk1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykSonotaTkyk1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykSonotaTkyk1.getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_KykSonotaTkyk1.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk1.getStdrsktkyhkumu(), C_UmuKbn.NONE, "指定代理請求特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk1.getStdrsktkyhkymd(), BizDate.valueOf("20150101"), "指定代理請求特約付加日");
        exClassificationEquals(bAK_KykSonotaTkyk1.getYennykntkhkumu(), C_UmuKbn.ARI, "円入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk1.getGaikanykntkhkumu(), C_UmuKbn.ARI, "外貨入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk1.getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk1.getYenshrkykkykhenkoymd(), BizDate.valueOf("20100101"), "円支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk1.getNkgkkateitkumu(), C_UmuKbn.NONE, "年金額確定特約有無");
        assertEquals("年金総額保証割合", bAK_KykSonotaTkyk1.getNksgkhosyuwari(), BizNumber.valueOf(25));
        exClassificationEquals(bAK_KykSonotaTkyk1.getSkjbrnktsumu(), C_UmuKbn.NONE, "即時払年金特則有無");
        exClassificationEquals(bAK_KykSonotaTkyk1.getNenkingaku8waritkumu(), C_UmuKbn.ARI, "年金額８割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk1.getNenkingaku9waritkumu(), C_UmuKbn.NONE, "年金額９割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk1.getNkyentkhukaumu(), C_UmuKbn.ARI, "年金円支払特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk1.getKwsttkhukaumu(), C_UmuKbn.NONE, "為替ターゲット特約付加有無");
        exNumericEquals(bAK_KykSonotaTkyk1.getKwstargetrate(), 19, "為替ターゲットレート");
        exClassificationEquals(bAK_KykSonotaTkyk1.getTargettkhkumu(), C_UmuKbn.ARI, "ターゲット特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk1.getTargettkykkykhenkoymd(), BizDate.valueOf("20100101"), "ターゲット特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk1.getTargettkkbn(), C_TargetTkKbn.SYUUSIN, "ターゲット特約区分");
        exNumericEquals(bAK_KykSonotaTkyk1.getTargettkmokuhyouti(), 123, "ターゲット特約目標値");
        exClassificationEquals(bAK_KykSonotaTkyk1.getYsknkshtkumu(), C_UmuKbn.ARI, "新遺族年金支払特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk1.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(bAK_KykSonotaTkyk1.getPmnjtkkykymd(), BizDate.valueOf("20150104"), "保険料免除特約契約日");
        exDateEquals(bAK_KykSonotaTkyk1.getPmnjtksknnkaisiymd(), BizDate.valueOf("20150105"), "保険料免除特約責任開始日");
        exDateEquals(bAK_KykSonotaTkyk1.getPmnjtkgansknnkaisiymd(), BizDate.valueOf("20150106"), "保険料免除特約がん責任開始日");
        exDateEquals(bAK_KykSonotaTkyk1.getPmhktsknnkaisiymd(), BizDate.valueOf("20150107"), "保険料免除特約復活責任開始日");
        exDateEquals(bAK_KykSonotaTkyk1.getPmnjhktgansknnkaisiymd(), BizDate.valueOf("20150108"), "保険料免除特約復活がん責任開始日");
        exStringEquals(bAK_KykSonotaTkyk1.getPmnjtkhtnpbuicd1(), "111", "保険料免除特約不担保部位コード１");
        exClassificationEquals(bAK_KykSonotaTkyk1.getPmnjtkhtnpkkn1(), C_Htnpkkn.ONE, "保険料免除特約不担保期間１");
        exStringEquals(bAK_KykSonotaTkyk1.getPmnjtkhtnpbuicd2(), "222", "保険料免除特約不担保部位コード２");
        exClassificationEquals(bAK_KykSonotaTkyk1.getPmnjtkhtnpkkn2(), C_Htnpkkn.TOW, "保険料免除特約不担保期間２");
        exStringEquals(bAK_KykSonotaTkyk1.getPmnjtkhtnpbuicd3(), "333", "保険料免除特約不担保部位コード３");
        exClassificationEquals(bAK_KykSonotaTkyk1.getPmnjtkhtnpkkn3(), C_Htnpkkn.THREE, "保険料免除特約不担保期間３");
        exStringEquals(bAK_KykSonotaTkyk1.getPmnjtkhtnpbuicd4(), "444", "保険料免除特約不担保部位コード４");
        exClassificationEquals(bAK_KykSonotaTkyk1.getPmnjtkhtnpkkn4(), C_Htnpkkn.FOUR, "保険料免除特約不担保期間４");
        exClassificationEquals(bAK_KykSonotaTkyk1.getPmnjtokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "保険料免除特約特定高度障害不担保区分");
        exClassificationEquals(bAK_KykSonotaTkyk1.getSknnkaisikitkkbn(), C_SknnkaisikitkKbn.SKNNKAISIKITK, "責任開始期特約区分");
        exClassificationEquals(bAK_KykSonotaTkyk1.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk1.getNkshrtkykhenkoymd(), BizDate.valueOf("20100101"), "年金支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk1.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(bAK_KykSonotaTkyk1.getNkshrtkyknksyukkn(), 10, "年金支払特約年金期間");

        exClassificationEquals(bAK_KykSonotaTkyk1.getInitsbjiyensitihsytkhukaumu(), C_UmuKbn.NONE, "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(bAK_KykSonotaTkyk1.getInitsbjiyenkasaiteihsygk(), BizCurrency.valueOf(101), "初期死亡時円換算最低保証額");
        exClassificationEquals(bAK_KykSonotaTkyk1.getJyudkaigomeharaitkhukaumu(), C_UmuKbn.NONE, "重度介護前払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk1.getJyudkaigomeharaitkhukaymd(),  BizDate.valueOf("20100101"), "重度介護前払特約付加日");

        exStringEquals(bAK_KykSonotaTkyk1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        IT_BAK_KykSya bAK_KykSya1 = bAK_KykKihon1.getBAKKykSya();
        exStringEquals(bAK_KykSya1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykSya1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykSya1.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KykSya1.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_KykSya1.getKyksakuinmeino(), "1000000001", "契約者索引名番号");
        exStringEquals(bAK_KykSya1.getKyknmkn(), "契約名カナ（本ＴＢＬ）", "契約者名（カナ）");
        exStringEquals(bAK_KykSya1.getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exClassificationEquals(bAK_KykSya1.getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exDateEquals(bAK_KykSya1.getKykseiymd(), BizDate.valueOf("20150201"), "契約者生年月日");
        exClassificationEquals(bAK_KykSya1.getKyksei(), C_Kyksei.FEMALE, "契約者性別");
        exClassificationEquals(bAK_KykSya1.getKkkyktdk(), C_Tdk.SONOTA, "契約管理契約者続柄");
        exStringEquals(bAK_KykSya1.getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_KykSya1.getTsinadr1kn(), "通信先住所１カナ１", "通信先住所１（カナ）");
        exStringEquals(bAK_KykSya1.getTsinadr1kj(), "通信先住所１漢字１", "通信先住所１（漢字）");
        exStringEquals(bAK_KykSya1.getTsinadr2kn(), "通信先住所２カナ１", "通信先住所２（カナ）");
        exStringEquals(bAK_KykSya1.getTsinadr2kj(), "通信先住所２漢字１", "通信先住所２（漢字）");
        exStringEquals(bAK_KykSya1.getTsinadr3kn(), "通信先住所３カナ１", "通信先住所３（カナ）");
        exStringEquals(bAK_KykSya1.getTsinadr3kj(), "通信先住所３漢字１", "通信先住所３（漢字）");
        exStringEquals(bAK_KykSya1.getTsintelno(),null, "通信先電話番号");
        exStringEquals(bAK_KykSya1.getDai2tsintelno(), null, "第２通信先電話番号");
        exStringEquals(bAK_KykSya1.getTsinmailaddress(), "test1@test.com", "通信先メールアドレス");
        exStringEquals(bAK_KykSya1.getKinmusakinm(), "勤務先名１", "勤務先名");
        exClassificationEquals(bAK_KykSya1.getHjndaiykkbn(), C_HjndaiykKbn.SYOTYOU, "法人代表者役職区分");
        exStringEquals(bAK_KykSya1.getHjndaiyknm(), "法人代表者役職名１", "法人代表者役職名");
        exStringEquals(bAK_KykSya1.getHjndainmkn(), "法人代表者名カナ１", "法人代表者名（カナ）");
        exStringEquals(bAK_KykSya1.getHjndainmkj(), "法人代表者名漢字１", "法人代表者名（漢字）");
        exStringEquals(bAK_KykSya1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSya1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSya1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KykSyouhn> bAK_KykSyouhn1 = bAK_KykKihon1.getBAKKykSyouhns();
        exStringEquals(bAK_KykSyouhn1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykSyouhn1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykSyouhn1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_KykSyouhn1.get(0).getSyouhncd(), "0001", "商品コード");
        exNumericEquals(bAK_KykSyouhn1.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_KykSyouhn1.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_KykSyouhn1.get(0).getHenkousikibetukey(), "456", "変更識別キー");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getKykjyoutai(), C_Kykjyoutai.IKKATUNK, "契約状態");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.MNRY, "消滅事由");
        exDateEquals(bAK_KykSyouhn1.get(0).getSyoumetuymd(), BizDate.valueOf("20150501"), "消滅日");
        exDateEquals(bAK_KykSyouhn1.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150502"), "効力発生日");
        exDateEquals(bAK_KykSyouhn1.get(0).getKykymd(), BizDate.valueOf("20150503"), "契約日");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getKykymdsiteiumukbn(), C_UmuKbn.ARI, "契約日指定有無区分");
        exDateEquals(bAK_KykSyouhn1.get(0).getSknnkaisiymd(), BizDate.valueOf("20150504"), "責任開始日");
        exDateEquals(bAK_KykSyouhn1.get(0).getGansknnkaisiymd(), BizDate.valueOf("20150505"), "がん責任開始日");
        exDateEquals(bAK_KykSyouhn1.get(0).getHksknnkaisiymd(), BizDate.valueOf("20150506"), "復活責任開始日");
        exDateEquals(bAK_KykSyouhn1.get(0).getHkgansknnkaisiymd(), BizDate.valueOf("20150507"), "復活がん責任開始日");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getHknkknsmnkbn(), C_HknkknsmnKbn.SAIMANKI, "保険期間歳満期区分");
        exNumericEquals(bAK_KykSyouhn1.get(0).getHknkkn(), 50, "保険期間");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getHrkkknsmnkbn(), C_HrkkknsmnKbn.NENMANKI, "払込期間歳満期区分");
        exNumericEquals(bAK_KykSyouhn1.get(0).getHrkkkn(), 55, "払込期間");
        exNumericEquals(bAK_KykSyouhn1.get(0).getKyknen(), 45, "契約者年齢");
        exNumericEquals(bAK_KykSyouhn1.get(0).getHhknnen(), 46, "被保険者年齢");
        exDateEquals(bAK_KykSyouhn1.get(0).getHhknseiymd(), BizDate.valueOf("20100101"), "被保険者生年月日");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(bAK_KykSyouhn1.get(0).getHaraimanymd(), BizDate.valueOf("20150508"), "払満日");
        exDateEquals(bAK_KykSyouhn1.get(0).getHknkknmanryouymd(), BizDate.valueOf("20150509"), "保険期間満了日");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getKatakbn(), C_KataKbn.GKYUFGK_20, "型区分");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getRokudaildkbn(), C_6daiLdKbn.BLNK, "６大生活習慣病追加給付型区分");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exBizCalcbleEquals(bAK_KykSyouhn1.get(0).getKihons(), BizCurrency.valueOf(1000), "基本Ｓ");
        exBizCalcbleEquals(bAK_KykSyouhn1.get(0).getHokenryou(), BizCurrency.valueOf(1001), "保険料");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exStringEquals(bAK_KykSyouhn1.get(0).getRyouritusdno(), "3", "料率世代番号");
        assertEquals("予定利率", bAK_KykSyouhn1.get(0).getYoteiriritu(), BizNumber.valueOf(1));
        assertEquals("予定利率変動時保証利率", bAK_KykSyouhn1.get(0).getYoteirrthendohosyurrt(), BizNumber.valueOf(1));
        exNumericEquals(bAK_KykSyouhn1.get(0).getYtirrthndmnskaisuu(), 10, "予定利率変動見直回数");
        exClassificationEquals(bAK_KykSyouhn1.get(0).getNksyukbn(), C_Nenkinsyu.KAKUTEINENKIN, "年金種類区分");
        exNumericEquals(bAK_KykSyouhn1.get(0).getNenkinkkn(), 10, "年金期間");
        exNumericEquals(bAK_KykSyouhn1.get(0).getNkgnshosyouritu(), 1, "年金原資最低保証率");
        exBizCalcbleEquals(bAK_KykSyouhn1.get(0).getNkgnshosyougk(), BizCurrency.valueOf(1000000001), "年金原資最低保証額");
        exStringEquals(bAK_KykSyouhn1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSyouhn1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSyouhn1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KykUkt> bAK_KykUkt1 = bAK_KykKihon1.getBAKKykUkts();
        exStringEquals(bAK_KykUkt1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykUkt1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykUkt1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_KykUkt1.get(0).getUktsyukbn(), C_UktsyuKbn.SONOTA, "受取人種類区分");
        exNumericEquals(bAK_KykUkt1.get(0).getUktsyurenno(), 1, "受取人種類別連番");
        exStringEquals(bAK_KykUkt1.get(0).getKokno(), "11111111", "顧客番号");
        exClassificationEquals(bAK_KykUkt1.get(0).getUktkbn(), C_UktKbn.KYK, "受取人区分");
        exStringEquals(bAK_KykUkt1.get(0).getUktnmkn(), "受取人名（カナ）１", "受取人名（カナ）");
        exStringEquals(bAK_KykUkt1.get(0).getUktnmkj(), "受取人名（漢字）１", "受取人名（漢字）");
        exClassificationEquals(bAK_KykUkt1.get(0).getUktnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "受取人名漢字化不可区分");
        exDateEquals(bAK_KykUkt1.get(0).getUktseiymd(), BizDate.valueOf("20150601"), "受取人生年月日");
        exClassificationEquals(bAK_KykUkt1.get(0).getUkttdk(), C_Tdk.HONNIN, "受取人続柄");
        assertEquals("受取人分割割合", bAK_KykUkt1.get(0).getUktbnwari(), BizNumber.valueOf(100));
        exStringEquals(bAK_KykUkt1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykUkt1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykUkt1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_NyknJissekiRireki> bAK_NyknJissekiRireki1 = bAK_KykKihon1.getBAKNyknJissekiRirekis();
        exStringEquals(bAK_NyknJissekiRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_NyknJissekiRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_NyknJissekiRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateYMEquals(bAK_NyknJissekiRireki1.get(0).getJyutoustartym(), BizDateYM.valueOf("201501"), "充当開始年月");
        exNumericEquals(bAK_NyknJissekiRireki1.get(0).getRenno(), 5, "連番");
        exDateYMEquals(bAK_NyknJissekiRireki1.get(0).getJyutouendym(), BizDateYM.valueOf("201502"), "充当終了年月");
        exBizCalcbleEquals(bAK_NyknJissekiRireki1.get(0).getRsgaku(), BizCurrency.valueOf(1000000001), "領収金額");
        exClassificationEquals(bAK_NyknJissekiRireki1.get(0).getRstuukasyu(), C_Tuukasyu.JPY, "領収通貨種類");
        exDateEquals(bAK_NyknJissekiRireki1.get(0).getRyosyukwsratekjymd(), BizDate.valueOf("20100101"), "領収為替レート基準日");
        assertEquals("領収為替レート", bAK_NyknJissekiRireki1.get(0).getRyosyukwsrate(), BizNumber.valueOf(101));
        exBizCalcbleEquals(bAK_NyknJissekiRireki1.get(0).getHrkp(), BizCurrency.valueOf(100002), "払込保険料");
        exBizCalcbleEquals(bAK_NyknJissekiRireki1.get(0).getIktwaribikikgk(), BizCurrency.valueOf(100003), "一括割引料");
        exDateEquals(bAK_NyknJissekiRireki1.get(0).getNyksyoriymd(), BizDate.valueOf("20150101"), "入金処理日");
        exDateEquals(bAK_NyknJissekiRireki1.get(0).getRyosyuymd(), BizDate.valueOf("20150102"), "領収日");
        exStringEquals(bAK_NyknJissekiRireki1.get(0).getNykdenno(), "1234567890", "入金伝票番号");
        exDateEquals(bAK_NyknJissekiRireki1.get(0).getNykdenymd(), BizDate.valueOf("20150103"), "入金伝票日付");
        exClassificationEquals(bAK_NyknJissekiRireki1.get(0).getNykkeiro(), C_Nykkeiro.SKEI, "入金経路");
        exClassificationEquals(bAK_NyknJissekiRireki1.get(0).getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exNumericEquals(bAK_NyknJissekiRireki1.get(0).getJyutoukaisuuy(), 15, "充当回数（年）");
        exNumericEquals(bAK_NyknJissekiRireki1.get(0).getJyutoukaisuum(), 6, "充当回数（月）");
        exClassificationEquals(bAK_NyknJissekiRireki1.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.SYOKAIP, "入金内容区分");
        exClassificationEquals(bAK_NyknJissekiRireki1.get(0).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exClassificationEquals(bAK_NyknJissekiRireki1.get(0).getNyktrksflg(), C_Nyktrksflg.BLNK, "入金取消フラグ");
        exDateEquals(bAK_NyknJissekiRireki1.get(0).getNyktrksymd(), BizDate.valueOf("20150201"), "入金取消処理日");
        exStringEquals(bAK_NyknJissekiRireki1.get(0).getNyktrksdenno(), "9999999999", "入金取消伝票番号");
        exDateEquals(bAK_NyknJissekiRireki1.get(0).getNyktrksdenymd(), BizDate.valueOf("20150202"), "入金取消伝票日付");
        exBizCalcbleEquals(bAK_NyknJissekiRireki1.get(0).getYenkansannyknkingk(), BizCurrency.valueOf(1000000001), "円換算入金額");
        exDateEquals(bAK_NyknJissekiRireki1.get(0).getYenkansantkykwsrateymd(), BizDate.valueOf("20100101"), "円換算適用為替レート基準日");
        assertEquals("円換算適用為替レート", bAK_NyknJissekiRireki1.get(0).getYenkansantkykwsrate(), BizNumber.valueOf(101));
        exStringEquals(bAK_NyknJissekiRireki1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exStringEquals(bAK_NyknJissekiRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyknJissekiRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyknJissekiRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_SyouhnTokujou> bAK_SyouhnTokujou1 = bAK_KykKihon1.getBAKSyouhnTokujous();
        exStringEquals(bAK_SyouhnTokujou1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_SyouhnTokujou1.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_SyouhnTokujou1.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_SyouhnTokujou1.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_SyouhnTokujou1.get(0).getTkjyhyouten(), C_Tkjyhyouten.HYOUTEN225, "特条標点");
        exBizCalcbleEquals(bAK_SyouhnTokujou1.get(0).getTkjyp(), BizCurrency.valueOf(100001), "特条保険料");
        exClassificationEquals(bAK_SyouhnTokujou1.get(0).getTkjyskgnkkn(), C_Tkjyskgnkkn.Y5, "特条削減期間");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getHtnpbuicd1(), "111", "不担保部位コード１");
        exClassificationEquals(bAK_SyouhnTokujou1.get(0).getHtnpkkn1(), C_Htnpkkn.ONE, "不担保期間１");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getHtnpbuicd2(), "222", "不担保部位コード２");
        exClassificationEquals(bAK_SyouhnTokujou1.get(0).getHtnpkkn2(), C_Htnpkkn.TOW, "不担保期間２");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getHtnpbuicd3(), "333", "不担保部位コード３");
        exClassificationEquals(bAK_SyouhnTokujou1.get(0).getHtnpkkn3(), C_Htnpkkn.THREE, "不担保期間３");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getHtnpbuicd4(), "444", "不担保部位コード４");
        exClassificationEquals(bAK_SyouhnTokujou1.get(0).getHtnpkkn4(), C_Htnpkkn.FOUR, "不担保期間４");
        exClassificationEquals(bAK_SyouhnTokujou1.get(0).getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "特定高度障害不担保区分");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_SyouhnTokujou1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_YykIdouAnsyuCreditCard> bAK_YykIdouAnsyuCreditCard1 = bAK_KykKihon1.getBAKYykIdouAnsyuCreditCards();
        exStringEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getYukoukachkymd(), BizDate.valueOf("20150101"), "有効性確認日");
        exClassificationEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getYuukoukakujkkbn(), C_YuukoukakujkKbn.SUMI, "有効性確認状況区分");
        exClassificationEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getAuthorijkkbn(), C_AuthorijkKbn.NG, "オーソリ状況区分");
        exClassificationEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getAuthoritrkkbn(), C_AuthoritrkKbn.JITUGAKU, "オーソリ登録区分");
        exBizCalcbleEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getAuthorigk(), BizCurrency.valueOf(100001), "オーソリ金額");
        exDateEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getAuthorikanryoymd(), BizDate.valueOf("20150102"), "オーソリ完了日");
        exDateYMEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getJkipjytym(), BizDateYM.valueOf("201501"), "次回Ｐ充当年月");
        exStringEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getSyouninno(), "123456", "承認番号");
        exStringEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getTanmatusyorino(), "1234567", "端末処理通番");
        exStringEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_YykIdouAnsyuCreditCard1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_YykIdouNaiyoHrhnk> bAK_YykIdouNaiyoHrhnk1 = bAK_KykKihon1.getBAKYykIdouNaiyoHrhnks();
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150101"), "効力発生日");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getNewhrkkeiro(), C_Hrkkeiro.CREDIT, "（変更後）払込経路");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getNewhrkkaisuu(), C_Hrkkaisuu.NEN, "（変更後）払込回数");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getHrkkeirohnkumu(), C_UmuKbn.ARI, "払込経路変更有無区分");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getHrkkaisuuhnkumu(), C_UmuKbn.NONE, "払込回数変更有無区分");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getHaraikatahnkumu(), C_UmuKbn.ARI, "払方変更有無");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getHaraikatahnkuktknaiyoukbn(), C_HaraikatahnkuktknaiyouKbn.KAISUUKOUZAHENKOU, "払方変更受付内容区分");
        exBizCalcbleEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getHrkp(), BizCurrency.valueOf(1000001), "払込保険料");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getYokinkbn(), C_YokinKbn.BETUDAN, "預金種目区分");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getKouzano(), "1234567", "口座番号");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getSinkeizkkbn(), C_SinkeizkKbn.HENKOU, "新規継続区分");
        exClassificationEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getSyuudaikocd(), C_Syuudaikocd.ZENSINKYOU, "収納代行社コード");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getCardkaisyacd(), "15", "カード会社コード");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getCreditcardno1(), "999999999999991", "クレジットカード番号１");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getCreditcardno2(), "999999999999992", "クレジットカード番号２");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getCreditcardno3(), "999999999999993", "クレジットカード番号３");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getCreditcardno4(), "999999999999994", "クレジットカード番号４");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getCreditcardykkigen(), "999999999999995", "クレジットカード有効期限");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getCreditmeiginmkn(), "クレジットカード名義人氏名（カナ）１", "クレジットカード名義人氏名（カナ）");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_YykIdouNaiyoHrhnk1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_YykIdouUktk> bAK_YykIdouUktk1 = bAK_KykKihon1.getBAKYykIdouUktks();
        exStringEquals(bAK_YykIdouUktk1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_YykIdouUktk1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_YykIdouUktk1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_YykIdouUktk1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exStringEquals(bAK_YykIdouUktk1.get(0).getKinouId(), "testKinouId", "機能ＩＤ");
        exClassificationEquals(bAK_YykIdouUktk1.get(0).getYykidousyorikbn(), C_YykidousyoriKbn.TORIKESI, "予約異動処理区分");
        exDateEquals(bAK_YykIdouUktk1.get(0).getUktkymd(), BizDate.valueOf("20150101"), "受付日");
        exDateYMEquals(bAK_YykIdouUktk1.get(0).getSyoriym(), BizDateYM.valueOf("201501"), "処理年月");
        exStringEquals(bAK_YykIdouUktk1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_YykIdouUktk1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_YykIdouUktk1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_HengakuUnit> bAK_HengakuUnit1 = bAK_KykKihon1.getBAKHengakuUnits();
        exStringEquals(bAK_HengakuUnit1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HengakuUnit1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HengakuUnit1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_HengakuUnit1.get(0).getUnitfundkbn(), C_UnitFundKbn.USDFUND, "ユニットファンド区分");
        exStringEquals(bAK_HengakuUnit1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_HengakuUnit1.get(0).getUnitkouryokuhasseiymd(), BizDate.valueOf("20150101"), "ユニット効力発生日");
        exDateEquals(bAK_HengakuUnit1.get(0).getUnitkouryokuendymd(), BizDate.valueOf("20150101"), "ユニット効力終了日");
        assertEquals("ユニット数", bAK_HengakuUnit1.get(0).getUnitsuu(), BizNumber.valueOf(1));
        exNumericEquals(bAK_HengakuUnit1.get(0).getFundhaibunwariai(), 1, "ファンド配分割合");
        exStringEquals(bAK_HengakuUnit1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HengakuUnit1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HengakuUnit1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KhTtdkRireki> bAK_KhTtdkRireki1 = bAK_KykKihon1.getBAKKhTtdkRirekis();
        exStringEquals(bAK_KhTtdkRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_KhTtdkRireki1.get(0).getSyoriYmd(), BizDate.valueOf("20150101"), "処理年月日");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getSyorisosikicd(), "1000001", "処理組織コード");
        exClassificationEquals(bAK_KhTtdkRireki1.get(0).getShrsyousaiumu(), C_UmuKbn.ARI, "支払詳細有無区分");
        exClassificationEquals(bAK_KhTtdkRireki1.get(0).getSyorikbn(), C_SyoriKbn.MUKOU, "処理区分");
        exClassificationEquals(bAK_KhTtdkRireki1.get(0).getHonninkakninkekkakbn(), C_HonninKakninKekkaKbn.SUMI_SONOTA, "本人確認結果区分");
        exClassificationEquals(bAK_KhTtdkRireki1.get(0).getHenkourrkumu(), C_UmuKbn.ARI, "変更履歴有無");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getSmbckanriid(), "12345678901", "ＳＭＢＣ受付管理ＩＤ");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getNayosekihontblskbtkey(), "12345678901234567890", "名寄せ基本テーブル識別キー");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getKouteikanriid(), "12345678901234567890", "工程管理ＩＤ");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getYoukyuuno(), "123456789012345678", "要求通番");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTtdkRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KhHenkouRireki> bAK_KhHenkouRireki1 = bAK_KhTtdkRireki1.get(0).getBAKKhHenkouRirekis();
        exStringEquals(bAK_KhHenkouRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exNumericEquals(bAK_KhHenkouRireki1.get(0).getRenno3keta(), 123, "連番");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getTablenm(), "テーブル名称１", "テーブル名称");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getTableid(), "テーブルＩＤ１", "テーブルＩＤ");
        exClassificationEquals(bAK_KhHenkouRireki1.get(0).getHnksyuruikbn(), C_HnkSyuruiKbn.HENKOU, "変更種類区分");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getHanbetukoumokunm(), "判別項目名１", "判別項目名");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getHenkoukoumokuid(), "変更項目ID１", "変更項目ID");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getHenkoukoumokunm(), "変更項目名１", "変更項目名");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getBfrnaiyouoriginal(), "変更前内容原本１", "変更前内容原本");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getBfrnaiyou(), "変更前内容１", "変更前内容");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getNewnaiyouoriginal(), "変更後内容原本１", "変更後内容原本");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getNewnaiyou(), "変更後内容１", "変更後内容");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        IT_BAK_KhShrRireki bAK_KhShrRireki1 = bAK_KhTtdkRireki1.get(0).getBAKKhShrRireki();
        exStringEquals(bAK_KhShrRireki1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhShrRireki1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhShrRireki1.getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhShrRireki1.getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_KhShrRireki1.getShrymd(), BizDate.valueOf("20150101"), "支払日");
        exDateEquals(bAK_KhShrRireki1.getShrsyoriymd(), BizDate.valueOf("20150102"), "支払処理日");
        exClassificationEquals(bAK_KhShrRireki1.getShrsyorikbn(), C_ShrsyoriKbn.KYKTORIKESI, "支払処理区分");
        exClassificationEquals(bAK_KhShrRireki1.getTorikesiflg(), C_UmuKbn.ARI, "取消フラグ");
        exDateEquals(bAK_KhShrRireki1.getTorikesiymd(), BizDate.valueOf("20150103"), "取消日");
        exDateEquals(bAK_KhShrRireki1.getSyoruiukeymd(), BizDate.valueOf("20150104"), "書類受付日");
        exDateEquals(bAK_KhShrRireki1.getKouryokuhasseiymd(), BizDate.valueOf("20150105"), "効力発生日");
        exDateEquals(bAK_KhShrRireki1.getShrtienrskkisanymd(), BizDate.valueOf("20150105"), "支払遅延利息起算日");
        exNumericEquals(bAK_KhShrRireki1.getTienrsknissuu(), 100, "遅延利息日数");
        exClassificationEquals(bAK_KhShrRireki1.getSinsagendokknkbn(),null, "審査限度期間区分");
        exNumericEquals(bAK_KhShrRireki1.getRikoukityuutuudannissuu(), 3, "履行期中断日数");
        exClassificationEquals(bAK_KhShrRireki1.getZeitratkikbn(),null, "税取扱区分");
        exClassificationEquals(bAK_KhShrRireki1.getGsbunritaisyou(), C_UmuKbn.ARI, "源泉分離課税対象");
        exClassificationEquals(bAK_KhShrRireki1.getYenshrtkumu(), C_UmuKbn.ARI, "円支払特約有無");
        exClassificationEquals(bAK_KhShrRireki1.getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhShrRireki1.getShrgkkei(), BizCurrency.valueOf(1000000001), "支払額合計");
        exClassificationEquals(bAK_KhShrRireki1.getSyushrgkkeisyukbn(), C_SyuShrgkSyoukeiKbn.W, "主たる支払額小計種類区分");
        exBizCalcbleEquals(bAK_KhShrRireki1.getSyushrgkkei(), BizCurrency.valueOf(100001), "主たる支払額小計");
        exBizCalcbleEquals(bAK_KhShrRireki1.getMikeikap(), BizCurrency.valueOf(100004), "未経過保険料");
        exBizCalcbleEquals(bAK_KhShrRireki1.getHaitoukin(), BizCurrency.valueOf(1000000001), "配当金");
        exBizCalcbleEquals(bAK_KhShrRireki1.getSonotaseisangk(), BizCurrency.valueOf(100005), "その他精算額");
        exBizCalcbleEquals(bAK_KhShrRireki1.getGstszeigk(), BizCurrency.valueOf(100006), "源泉徴収税額");
        exBizCalcbleEquals(bAK_KhShrRireki1.getShrtienrsk(), BizCurrency.valueOf(100007), "支払遅延利息");
        exClassificationEquals(bAK_KhShrRireki1.getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhShrRireki1.getShrtuukashrgkgoukei(), BizCurrency.valueOf(1000000001), "支払通貨支払額合計");
        exBizCalcbleEquals(bAK_KhShrRireki1.getShrtuukasyushrgkkei(), BizCurrency.valueOf(1000000001), "支払通貨主たる支払額小計");
        exBizCalcbleEquals(bAK_KhShrRireki1.getShrtuukahaitoukin(), BizCurrency.valueOf(1000000001), "支払通貨配当金");
        exBizCalcbleEquals(bAK_KhShrRireki1.getShrtuukasonotaseisangk(), BizCurrency.valueOf(1000000001), "支払通貨その他精算額");
        exBizCalcbleEquals(bAK_KhShrRireki1.getShrtuukagstszeigk(), BizCurrency.valueOf(1000000001), "支払通貨源泉徴収税額");
        exBizCalcbleEquals(bAK_KhShrRireki1.getShrtuukashrtienrsk(), BizCurrency.valueOf(1000000001), "支払通貨支払遅延利息");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYenshrgkgoukei(), BizCurrency.valueOf(1000000001), "円換算支払額合計");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYensyushrgkkei(), BizCurrency.valueOf(1000000001), "円換算主たる支払額小計");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYenkansanhaitoukin(), BizCurrency.valueOf(1000000001), "円換算配当金");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYenkansansonotaseisangk(), BizCurrency.valueOf(1000000001), "円換算その他精算額");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYenmikeikap(), BizCurrency.valueOf(1000000001), "円換算未経過保険料");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYengstszeigk(), BizCurrency.valueOf(1000000001), "円換算源泉徴収税額");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYengstszeigknationaltax(), BizCurrency.valueOf(1000000001), "円換算源泉徴収税額（国税）");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYengstszeigklocaltax(), BizCurrency.valueOf(1000000001), "円換算源泉徴収税額（地方税）");
        exStringEquals(bAK_KhShrRireki1.getNztodouhukencd(), "10", "納税先都道府県コード");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYenshrtienrsk(), BizCurrency.valueOf(1000000001), "円換算支払遅延利息");
        exBizCalcbleEquals(bAK_KhShrRireki1.getHtykeihi(), BizCurrency.valueOf(100009), "必要経費");
        exBizCalcbleEquals(bAK_KhShrRireki1.getKztgk(), BizCurrency.valueOf(100010), "課税対象額");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYenhtykeihi(), BizCurrency.valueOf(100011), "円換算必要経費");
        exBizCalcbleEquals(bAK_KhShrRireki1.getYenkztgk(), BizCurrency.valueOf(100012), "円換算課税対象額");
        exDateEquals(bAK_KhShrRireki1.getShrkwsratekjnymd(), BizDate.valueOf("20100101"), "支払時為替レート基準日");
        assertEquals("支払時為替レート", bAK_KhShrRireki1.getShrkwsrate(), BizNumber.valueOf(101));
        exDateEquals(bAK_KhShrRireki1.getZeimukwsratekjnymd(), BizDate.valueOf("20100101"), "税務用為替レート基準日");
        assertEquals("税務用為替レート", bAK_KhShrRireki1.getZeimukwsrate(), BizNumber.valueOf(101));
        exClassificationEquals(bAK_KhShrRireki1.getSoukinsakisiteikbn(), C_SoukinsakisiteiKbn.KYK, "送金先指定区分");
        exStringEquals(bAK_KhShrRireki1.getSoukinsakinmkn(), "送金先氏名（カナ）", "送金先氏名（カナ）");
        exStringEquals(bAK_KhShrRireki1.getSoukinsakinmkj(), "送金先氏名（漢字）", "送金先氏名（漢字）");
        exStringEquals(bAK_KhShrRireki1.getSoukinsakiyno(), "1000001", "送金先郵便番号");
        exStringEquals(bAK_KhShrRireki1.getSoukinsakiadr1kj(), "送金先住所１（漢字）", "送金先住所１（漢字）");
        exStringEquals(bAK_KhShrRireki1.getSoukinsakiadr2kj(), "送金先住所２（漢字）", "送金先住所２（漢字）");
        exStringEquals(bAK_KhShrRireki1.getSoukinsakiadr3kj(), "送金先住所３（漢字）", "送金先住所３（漢字）");
        exStringEquals(bAK_KhShrRireki1.getKyksyaszknmkn(), "契約者相続人氏名（カナ）１", "契約者相続人氏名（カナ）");
        exStringEquals(bAK_KhShrRireki1.getKyksyaszknmkj(), "契約者相続人氏名（漢字）１", "契約者相続人氏名（漢字）");
        exStringEquals(bAK_KhShrRireki1.getKyksyaszkyno(), "1112222", "契約者相続人郵便番号");
        exStringEquals(bAK_KhShrRireki1.getKyksyaszkadr1kj(), "契約者相続人住所１（漢字）１", "契約者相続人住所１（漢字）");
        exStringEquals(bAK_KhShrRireki1.getKyksyaszkadr2kj(), "契約者相続人住所２（漢字）１", "契約者相続人住所２（漢字）");
        exStringEquals(bAK_KhShrRireki1.getKyksyaszkadr3kj(), "契約者相続人住所３（漢字）１", "契約者相続人住所３（漢字）");
        exStringEquals(bAK_KhShrRireki1.getSaikennmkj(), "債権者氏名（漢字）", "債権者氏名（漢字）");
        exStringEquals(bAK_KhShrRireki1.getSaikennyno(), "1000001", "債権者郵便番号");
        exStringEquals(bAK_KhShrRireki1.getSaikenadr1kj(), "債権者住所１（漢字）", "債権者住所１（漢字）");
        exStringEquals(bAK_KhShrRireki1.getSaikenadr2kj(), "債権者住所２（漢字）", "債権者住所２（漢字）");
        exStringEquals(bAK_KhShrRireki1.getSaikenadr3kj(), "債権者住所３（漢字）", "債権者住所３（漢字）");
        exClassificationEquals(bAK_KhShrRireki1.getInputshrhousiteikbn(), C_InputShrhousiteiKbn.FBSOUKIN, "入力用支払方法指定区分");
        exClassificationEquals(bAK_KhShrRireki1.getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exClassificationEquals(bAK_KhShrRireki1.getKzsyuruikbn(), C_KouzasyuruiKbn.YENKOUZA, "口座種類区分");
        exStringEquals(bAK_KhShrRireki1.getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_KhShrRireki1.getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_KhShrRireki1.getYokinkbn(), C_YokinKbn.TUMITATE, "預金種目区分");
        exStringEquals(bAK_KhShrRireki1.getKouzano(), "1234567", "口座番号");
        exClassificationEquals(bAK_KhShrRireki1.getKzdoukbn(), C_Kzdou.DOUITU, "口座名義人同一区分");
        exStringEquals(bAK_KhShrRireki1.getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exStringEquals(bAK_KhShrRireki1.getKykmnmeigibangou(), "101", "契約者ＭＮ名義番号");
        exStringEquals(bAK_KhShrRireki1.getUktmnmeigibangou(), "101", "受取人ＭＮ名義番号");
        exClassificationEquals(bAK_KhShrRireki1.getShrtysysyuruikbn(), C_HtsiryosyuKbn.ITJKNSHRTYOUSYO, "支払調書種類区分");
        exStringEquals(bAK_KhShrRireki1.getDenrenno(), "1001", "伝票データ連番");
        exStringEquals(bAK_KhShrRireki1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhShrRireki1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhShrRireki1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KhShrRirekiDetail> bAK_KhShrRirekiDetail1 = bAK_KhShrRireki1.getBAKKhShrRirekiDetails();
        exStringEquals(bAK_KhShrRirekiDetail1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhShrRirekiDetail1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhShrRirekiDetail1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhShrRirekiDetail1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exStringEquals(bAK_KhShrRirekiDetail1.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_KhShrRirekiDetail1.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_KhShrRirekiDetail1.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail1.get(0).getSyushrgk(), BizCurrency.valueOf(100001), "主たる支払額");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail1.get(0).getShrtstmttkin(), BizCurrency.valueOf(100002), "支払対象積立金");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail1.get(0).getShrtstmttkinhngkbbn(), BizCurrency.valueOf(1000000001), "支払対象積立金（変額部分）");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail1.get(0).getSjkkktyouseigk(), BizCurrency.valueOf(100003), "市場価格調整額");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail1.get(0).getKaiyakusjkkktyouseiritu(), null, "解約市場価格調整率");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail1.get(0).getKaiyakusjkkktyouseiriritu(), null, "解約時市場価格調整用利率");
        exBizCalcbleEquals(bAK_KhShrRirekiDetail1.get(0).getKaiyakukjgk(), BizCurrency.valueOf(1000000001), "解約控除額");
        assertEquals("解約控除率", bAK_KhShrRirekiDetail1.get(0).getKaiyakukoujyoritu(), BizNumber.valueOf(1));
        exStringEquals(bAK_KhShrRirekiDetail1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhShrRirekiDetail1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhShrRirekiDetail1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KykSyouhnRireki> bAK_KykSyouhnRireki1 = bAK_KhTtdkRireki1.get(0).getBAKKykSyouhnRirekis();
        exStringEquals(bAK_KykSyouhnRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KykSyouhnRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KykSyouhnRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_KykSyouhnRireki1.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_KykSyouhnRireki1.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_KykSyouhnRireki1.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_KykSyouhnRireki1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getKykjyoutai(), C_Kykjyoutai.ITIJIBARAI, "契約状態");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.KAIYAKU, "消滅事由");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getSyoumetuymd(), BizDate.valueOf("20150101"), "消滅日");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150102"), "効力発生日");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getKykymd(), BizDate.valueOf("20150103"), "契約日");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getKykymdsiteiumukbn(), C_UmuKbn.ARI, "契約日指定有無区分");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getSknnkaisiymd(), BizDate.valueOf("20150104"), "責任開始日");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getGansknnkaisiymd(), BizDate.valueOf("20150105"), "がん責任開始日");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getHksknnkaisiymd(), BizDate.valueOf("20150106"), "復活責任開始日");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getHkgansknnkaisiymd(), BizDate.valueOf("20150107"), "復活がん責任開始日");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(bAK_KykSyouhnRireki1.get(0).getHknkkn(), 22, "保険期間");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(bAK_KykSyouhnRireki1.get(0).getHrkkkn(), 11, "払込期間");
        exNumericEquals(bAK_KykSyouhnRireki1.get(0).getKyknen(), 35, "契約者年齢");
        exNumericEquals(bAK_KykSyouhnRireki1.get(0).getHhknnen(), 45, "被保険者年齢");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getHhknseiymd(), BizDate.valueOf("20100101"), "被保険者生年月日");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getHaraimanymd(), BizDate.valueOf("20150108"), "払満日");
        exDateEquals(bAK_KykSyouhnRireki1.get(0).getHknkknmanryouymd(), BizDate.valueOf("20150109"), "保険期間満了日");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getKatakbn(), C_KataKbn.GKYUFGK_20, "型区分");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exBizCalcbleEquals(bAK_KykSyouhnRireki1.get(0).getKihons(), BizCurrency.valueOf(100001), "基本Ｓ");
        exBizCalcbleEquals(bAK_KykSyouhnRireki1.get(0).getHokenryou(), BizCurrency.valueOf(100002), "保険料");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exStringEquals(bAK_KykSyouhnRireki1.get(0).getRyouritusdno(), "101", "料率世代番号");
        assertEquals("予定利率", bAK_KykSyouhnRireki1.get(0).getYoteiriritu(), BizNumber.valueOf(1));
        assertEquals("予定利率変動時保証利率", bAK_KykSyouhnRireki1.get(0).getYoteirrthendohosyurrt(), BizNumber.valueOf(1));
        exNumericEquals(bAK_KykSyouhnRireki1.get(0).getYtirrthndmnskaisuu(), 10, "予定利率変動見直回数");
        exBizCalcbleEquals(bAK_KykSyouhnRireki1.get(0).getKyksjkkktyouseiriritu(), null, "契約時市場価格調整用利率");
        exClassificationEquals(bAK_KykSyouhnRireki1.get(0).getNksyukbn(), C_Nenkinsyu.KAKUTEINENKIN, "年金種類区分");
        exNumericEquals(bAK_KykSyouhnRireki1.get(0).getNenkinkkn(), 10, "年金期間");
        exNumericEquals(bAK_KykSyouhnRireki1.get(0).getNkgnshosyouritu(), 1, "年金原資最低保証率");
        exBizCalcbleEquals(bAK_KykSyouhnRireki1.get(0).getNkgnshosyougk(), BizCurrency.valueOf(1000000001), "年金原資最低保証額");
        exStringEquals(bAK_KykSyouhnRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSyouhnRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSyouhnRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_SyouhnTokujouRireki> bAK_SyouhnTokujouRireki1 =  bAK_KhTtdkRireki1.get(0).getBAKSyouhnTokujouRirekis();
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_SyouhnTokujouRireki1.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_SyouhnTokujouRireki1.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_SyouhnTokujouRireki1.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_SyouhnTokujouRireki1.get(0).getTkjyhyouten(), C_Tkjyhyouten.HYOUTEN225, "特条標点");
        exBizCalcbleEquals(bAK_SyouhnTokujouRireki1.get(0).getTkjyp(), BizCurrency.valueOf(100001), "特条保険料");
        exClassificationEquals(bAK_SyouhnTokujouRireki1.get(0).getTkjyskgnkkn(), C_Tkjyskgnkkn.Y5, "特条削減期間");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getHtnpbuicd1(), "111", "不担保部位コード１");
        exClassificationEquals(bAK_SyouhnTokujouRireki1.get(0).getHtnpkkn1(), C_Htnpkkn.ONE, "不担保期間１");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getHtnpbuicd2(), "222", "不担保部位コード２");
        exClassificationEquals(bAK_SyouhnTokujouRireki1.get(0).getHtnpkkn2(), C_Htnpkkn.TOW, "不担保期間２");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getHtnpbuicd3(), "333", "不担保部位コード３");
        exClassificationEquals(bAK_SyouhnTokujouRireki1.get(0).getHtnpkkn3(), C_Htnpkkn.THREE, "不担保期間３");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getHtnpbuicd4(), "444", "不担保部位コード４");
        exClassificationEquals(bAK_SyouhnTokujouRireki1.get(0).getHtnpkkn4(), C_Htnpkkn.FOUR, "不担保期間４");
        exClassificationEquals(bAK_SyouhnTokujouRireki1.get(0).getTokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "特定高度障害不担保区分");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_SyouhnTokujouRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_HengakuUnitRireki> bAK_HengakuUnitRireki1 = bAK_KhTtdkRireki1.get(0).getBAKHengakuUnitRirekis();
        exStringEquals(bAK_HengakuUnitRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HengakuUnitRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HengakuUnitRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_HengakuUnitRireki1.get(0).getUnitfundkbn(), C_UnitFundKbn.USDFUND, "ユニットファンド区分");
        exStringEquals(bAK_HengakuUnitRireki1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exDateEquals(bAK_HengakuUnitRireki1.get(0).getUnitkouryokuhasseiymd(), BizDate.valueOf("20150101"), "ユニット効力発生日");
        exDateEquals(bAK_HengakuUnitRireki1.get(0).getUnitkouryokuendymd(), BizDate.valueOf("20150101"), "ユニット効力終了日");
        assertEquals("ユニット数", bAK_HengakuUnitRireki1.get(0).getUnitsuu(), BizNumber.valueOf(1));
        exNumericEquals(bAK_HengakuUnitRireki1.get(0).getFundhaibunwariai(), 1, "ファンド配分割合");
        exStringEquals(bAK_HengakuUnitRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HengakuUnitRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HengakuUnitRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_HengakuCf> bAK_HengakuCf1 = bAK_KhTtdkRireki1.get(0).getBAKHengakuCfs();
        exStringEquals(bAK_HengakuCf1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HengakuCf1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HengakuCf1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_HengakuCf1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_HengakuCf1.get(0).getUnitfundkbn(), C_UnitFundKbn.USDFUND, "ユニットファンド区分");
        exDateEquals(bAK_HengakuCf1.get(0).getSyoriYmd(), BizDate.valueOf("20150101"), "処理年月日");
        exNumericEquals(bAK_HengakuCf1.get(0).getRenno(), 1, "連番");
        exClassificationEquals(bAK_HengakuCf1.get(0).getCfkbn(), C_CfKbn.BLNK, "ＣＦ区分");
        exClassificationEquals(bAK_HengakuCf1.get(0).getHasseiriyuukbn(), C_HasseiRiyuuKbn.BLNK, "発生理由区分");
        exClassificationEquals(bAK_HengakuCf1.get(0).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");

        List<IT_BAK_Tesuuryou> bAK_Tesuuryou1 = bAK_KykKihon1.getBAKTesuuryous();
        exStringEquals(bAK_Tesuuryou1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Tesuuryou1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Tesuuryou1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_Tesuuryou1.get(0).getTsrysyorikbn(), C_TsrysyoriKbn.HUKKATU, "手数料処理区分");
        exNumericEquals(bAK_Tesuuryou1.get(0).getRenno(), 2, "連番");
        exDateEquals(bAK_Tesuuryou1.get(0).getSyoriYmd(), BizDate.valueOf("20150701"), "処理年月日");
        exDateYMEquals(bAK_Tesuuryou1.get(0).getKouryokuhasseiym(), BizDateYM.valueOf("201506"), "効力発生年月");
        exNumericEquals(bAK_Tesuuryou1.get(0).getNyknkaisuuy(), 15, "入金回数（年）");
        exNumericEquals(bAK_Tesuuryou1.get(0).getNyknkaisuum(), 14, "入金回数（月）");
        exClassificationEquals(bAK_Tesuuryou1.get(0).getMikeikapariflg(), C_UmuKbn.ARI, "未経過Ｐ有フラグ");
        exClassificationEquals(bAK_Tesuuryou1.get(0).getMisyuupariflg(), C_UmuKbn.NONE, "未収Ｐ有フラグ");
        exBizCalcbleEquals(bAK_Tesuuryou1.get(0).getMikeikap(), BizCurrency.valueOf(100001), "未経過保険料");
        exDateYMEquals(bAK_Tesuuryou1.get(0).getSeisekiym(), BizDateYM.valueOf("201501"), "成績計上年月");
        exBizCalcbleEquals(bAK_Tesuuryou1.get(0).getIktp(), BizCurrency.valueOf(100002), "一括払保険料");
        exClassificationEquals(bAK_Tesuuryou1.get(0).getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(bAK_Tesuuryou1.get(0).getHrkkeiro(), C_Hrkkeiro.CREDIT, "払込経路");
        exBizCalcbleEquals(bAK_Tesuuryou1.get(0).getHrkp(), BizCurrency.valueOf(100003), "払込保険料");
        exDateYMEquals(bAK_Tesuuryou1.get(0).getJkipjytym(), BizDateYM.valueOf("201505"), "次回Ｐ充当年月");
        exDateYEquals(bAK_Tesuuryou1.get(0).getHaitounendo(), BizDateY.valueOf("2015"), "配当年度");
        exStringEquals(bAK_Tesuuryou1.get(0).getCifcd(), "123456789012345", "ＣＩＦコード");
        exStringEquals(bAK_Tesuuryou1.get(0).getSmbckanriid(), "99999999999", "ＳＭＢＣ受付管理ＩＤ");
        exClassificationEquals(bAK_Tesuuryou1.get(0).getBoskykjyoutai(), C_Boskykjyoutai.HEIGAIBOUSISOTIKYK, "募集契約状態");
        exStringEquals(bAK_Tesuuryou1.get(0).getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exDateYMEquals(bAK_Tesuuryou1.get(0).getBosyuuym(), BizDateYM.valueOf("201507"), "募集年月");
        exDateEquals(bAK_Tesuuryou1.get(0).getNyknymd(), BizDate.valueOf("20150701"), "入金日");
        assertEquals("円換算適用為替レート", bAK_Tesuuryou1.get(0).getYenkansantkykwsrate(), BizNumber.valueOf(102));
        exDateEquals(bAK_Tesuuryou1.get(0).getYenkansantkykwsrateymd(), BizDate.valueOf("20150701"), "円換算適用為替レート基準日");
        exStringEquals(bAK_Tesuuryou1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Tesuuryou1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Tesuuryou1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_TesuuryouSyouhn> bAK_TesuuryouSyouhn1 = bAK_Tesuuryou1.get(0).getBAKTesuuryouSyouhns();
        exStringEquals(bAK_TesuuryouSyouhn1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TesuuryouSyouhn1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_TesuuryouSyouhn1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getTsrysyorikbn(), C_TsrysyoriKbn.HUKKATU, "手数料処理区分");
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getRenno(), 2, "連番");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getSyutkkbn(), C_SyutkKbn.SYU, "主契約特約区分");
        exStringEquals(bAK_TesuuryouSyouhn1.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getKyksyouhnrenno(), 1, "契約商品連番");
        exStringEquals(bAK_TesuuryouSyouhn1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.YUUKOU, "有効消滅区分");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getKykjyoutai(), C_Kykjyoutai.ITIJIBARAI, "契約状態");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.MOSMUKOU, "消滅事由");
        exDateEquals(bAK_TesuuryouSyouhn1.get(0).getSyoumetuymd(), BizDate.valueOf("20150701"), "消滅日");
        exDateEquals(bAK_TesuuryouSyouhn1.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150702"), "効力発生日");
        exDateEquals(bAK_TesuuryouSyouhn1.get(0).getKykymd(), BizDate.valueOf("20150703"), "契約日");
        exDateEquals(bAK_TesuuryouSyouhn1.get(0).getSknnkaisiymd(), BizDate.valueOf("20150704"), "責任開始日");
        exDateEquals(bAK_TesuuryouSyouhn1.get(0).getGansknnkaisiymd(), BizDate.valueOf("20150705"), "がん責任開始日");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getHknkknsmnkbn(), C_HknkknsmnKbn.SAIMANKI, "保険期間歳満期区分");
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getHknkkn(), 12, "保険期間");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getHrkkknsmnkbn(), C_HrkkknsmnKbn.NENMANKI, "払込期間歳満期区分");
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getHrkkkn(), 13, "払込期間");
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getKyknen(), 14, "契約者年齢");
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getHhknnen(), 15, "被保険者年齢");
        exDateEquals(bAK_TesuuryouSyouhn1.get(0).getHhknseiymd(), BizDate.valueOf("20150101"), "被保険者生年月日");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(bAK_TesuuryouSyouhn1.get(0).getHaraimanymd(), BizDate.valueOf("20150801"), "払満日");
        exDateEquals(bAK_TesuuryouSyouhn1.get(0).getHknkknmanryouymd(), BizDate.valueOf("20150802"), "保険期間満了日");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getKatakbn(), C_KataKbn.HONNIN_SAISI, "型区分");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE180, "給付限度型区分");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU2, "手術給付金型区分");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.ITIBAI, "基本給付金額倍率区分");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getRokudaildkbn(), C_6daiLdKbn.NONE, "６大生活習慣病追加給付型区分");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exBizCalcbleEquals(bAK_TesuuryouSyouhn1.get(0).getKihons(), BizCurrency.valueOf(100001), "基本Ｓ");
        exBizCalcbleEquals(bAK_TesuuryouSyouhn1.get(0).getHokenryou(), BizCurrency.valueOf(100002), "保険料");
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exStringEquals(bAK_TesuuryouSyouhn1.get(0).getRyouritusdno(), "1", "料率世代番号");
        assertEquals("予定利率", bAK_TesuuryouSyouhn1.get(0).getYoteiriritu(), BizNumber.valueOf(1));
        assertEquals("予定利率変動時保証利率", bAK_TesuuryouSyouhn1.get(0).getYoteirrthendohosyurrt(), BizNumber.valueOf(1));
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getYtirrthndmnskaisuu(), 10, "予定利率変動見直回数");
        assertEquals("契約時市場価格調整用利率",bAK_TesuuryouSyouhn1.get(0).getKyksjkkktyouseiriritu(), BizNumber.valueOf(1));
        exClassificationEquals(bAK_TesuuryouSyouhn1.get(0).getNksyukbn(), C_Nenkinsyu.KAKUTEINENKIN, "年金種類区分");
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getNenkinkkn(), 10, "年金期間");
        exNumericEquals(bAK_TesuuryouSyouhn1.get(0).getNkgnshosyouritu(), 1, "年金原資最低保証率");
        exBizCalcbleEquals(bAK_TesuuryouSyouhn1.get(0).getNkgnshosyougk(), BizCurrency.valueOf(1000000001), "年金原資最低保証額");
        exStringEquals(bAK_TesuuryouSyouhn1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TesuuryouSyouhn1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TesuuryouSyouhn1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_TesuuryouSyouhnRireki> bAK_TesuuryouSyouhnRireki1 = bAK_Tesuuryou1.get(0).getBAKTesuuryouSyouhnRirekis();
        exStringEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TesuuryouSyouhnRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_TesuuryouSyouhnRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getTsrysyorikbn(), C_TsrysyoriKbn.HUKKATU, "手数料処理区分");
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getRenno(), 2, "連番");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getSyutkkbn(), C_SyutkKbn.TK, "主契約特約区分");
        exStringEquals(bAK_TesuuryouSyouhnRireki1.get(0).getSyouhncd(), "1000", "商品コード");
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getSyouhnsdno(), 2, "商品世代番号");
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKyksyouhnrenno(), 2, "契約商品連番");
        exStringEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.SYOUMETU, "有効消滅区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKykjyoutai(), C_Kykjyoutai.PMEN, "契約状態");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.MNRY, "消滅事由");
        exDateEquals(bAK_TesuuryouSyouhnRireki1.get(0).getSyoumetuymd(), BizDate.valueOf("20150801"), "消滅日");
        exDateEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20150802"), "効力発生日");
        exDateEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKykymd(), BizDate.valueOf("20150803"), "契約日");
        exDateEquals(bAK_TesuuryouSyouhnRireki1.get(0).getSknnkaisiymd(), BizDate.valueOf("20150804"), "責任開始日");
        exDateEquals(bAK_TesuuryouSyouhnRireki1.get(0).getGansknnkaisiymd(), BizDate.valueOf("20150805"), "がん責任開始日");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHknkknsmnkbn(), C_HknkknsmnKbn.NENMANKI, "保険期間歳満期区分");
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHknkkn(), 22, "保険期間");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHrkkknsmnkbn(), C_HrkkknsmnKbn.SAIMANKI, "払込期間歳満期区分");
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHrkkkn(), 33, "払込期間");
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKyknen(), 44, "契約者年齢");
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHhknnen(), 55, "被保険者年齢");
        exDateEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHhknseiymd(), BizDate.valueOf("20151001"), "被保険者生年月日");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exDateEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHaraimanymd(), BizDate.valueOf("20151001"), "払満日");
        exDateEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHknkknmanryouymd(), BizDate.valueOf("20151002"), "保険期間満了日");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKatakbn(), C_KataKbn.HONIN_KO, "型区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKyhgndkatakbn(), C_KyhgndkataKbn.TYPE120, "給付限度型区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getSyukyhkinkatakbn(), C_SyukyhkinkataKbn.SYU1, "手術給付金型区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKhnkyhkgbairitukbn(), C_KhnkyhkgbairituKbn.NIBAI, "基本給付金額倍率区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getRokudaildkbn(), C_6daiLdKbn.ARI, "６大生活習慣病追加給付型区分");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getPmnjtkkbn(), C_PmnjtkKbn.NONE, "保険料免除特約区分");
        exBizCalcbleEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKihons(), BizCurrency.valueOf(200001), "基本Ｓ");
        exBizCalcbleEquals(bAK_TesuuryouSyouhnRireki1.get(0).getHokenryou(), BizCurrency.valueOf(200002), "保険料");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exStringEquals(bAK_TesuuryouSyouhnRireki1.get(0).getRyouritusdno(), "1", "料率世代番号");
        assertEquals("予定利率", bAK_TesuuryouSyouhnRireki1.get(0).getYoteiriritu(), BizNumber.valueOf(1));
        assertEquals("予定利率変動時保証利率", bAK_TesuuryouSyouhnRireki1.get(0).getYoteirrthendohosyurrt(), BizNumber.valueOf(1));
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getYtirrthndmnskaisuu(), 10, "予定利率変動見直回数");
        exClassificationEquals(bAK_TesuuryouSyouhnRireki1.get(0).getNksyukbn(), C_Nenkinsyu.KAKUTEINENKIN, "年金種類区分");
        assertEquals("契約時市場価格調整用利率",bAK_TesuuryouSyouhnRireki1.get(0).getKyksjkkktyouseiriritu(), BizNumber.valueOf(1));
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getNenkinkkn(), 10, "年金期間");
        exNumericEquals(bAK_TesuuryouSyouhnRireki1.get(0).getNkgnshosyouritu(), 1, "年金原資最低保証率");
        exBizCalcbleEquals(bAK_TesuuryouSyouhnRireki1.get(0).getNkgnshosyougk(), BizCurrency.valueOf(1000000001), "年金原資最低保証額");
        exStringEquals(bAK_TesuuryouSyouhnRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TesuuryouSyouhnRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TesuuryouSyouhnRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_KoujyoSym> bAK_KoujyoSym1 = bAK_KykKihon1.getBAKKoujyoSyms();
        exStringEquals(bAK_KoujyoSym1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KoujyoSym1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KoujyoSym1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KoujyoSym1.get(0).getNendo(), "2015", "年度");
        exDateEquals(bAK_KoujyoSym1.get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exNumericEquals(bAK_KoujyoSym1.get(0).getRenno(), 1, "連番");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getKjsmsakuseisyorikbn(), C_KoujyosyoumeisakuseisyoriKbn.HOKENSYOUKEN, "控除証明作成処理区分");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getTekiyouseidokbn(), C_TekiyouseidoKbn.NEWOLDHZN, "適用制度区分");
        exStringEquals(bAK_KoujyoSym1.get(0).getSyoumeiymd(), "20150102", "証明日");
        exDateYMEquals(bAK_KoujyoSym1.get(0).getSyoumeistartym(), BizDateYM.valueOf("201502"), "証明開始年月");
        exDateYMEquals(bAK_KoujyoSym1.get(0).getSyoumeiendym(), BizDateYM.valueOf("201503"), "証明終了年月");
        exNumericEquals(bAK_KoujyoSym1.get(0).getSyoumeikkntukisuu(), 12, "証明期間月数");
        exNumericEquals(bAK_KoujyoSym1.get(0).getSyoumeikknnensuu(), 12, "証明期間年数");
        exStringEquals(bAK_KoujyoSym1.get(0).getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exStringEquals(bAK_KoujyoSym1.get(0).getUktnmkjaddsama(), "受取人名（漢字）１","受取人名（漢字／様付加）");
        exDateEquals(bAK_KoujyoSym1.get(0).getNenkinuktseiymd(), BizDate.valueOf("20150101"), "年金受取人生年月日");
        exStringEquals(bAK_KoujyoSym1.get(0).getHknsyuruinmrykkj(), "保険種類略称（漢字）１", "保険種類略称（漢字）");
        exDateEquals(bAK_KoujyoSym1.get(0).getKykymd(), BizDate.valueOf("20150103"), "契約日");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getHknkknsmnkbnsyu(), C_HknkknsmnKbn.SAIMANKI, "保険期間歳満期区分（主契約）");
        assertEquals("保険期間（主契約）", bAK_KoujyoSym1.get(0).getHknkknsyu(), BizNumber.valueOf(44));
        exNumericEquals(bAK_KoujyoSym1.get(0).getNenkanhrkkaisuu(), 23, "年間払込回数");
        exNumericEquals(bAK_KoujyoSym1.get(0).getPhrkkkn(), 23, "保険料払込期間");
        exDateEquals(bAK_KoujyoSym1.get(0).getNkshrstartymd(), BizDate.valueOf("20150101"), "年金支払開始日");
        exStringEquals(bAK_KoujyoSym1.get(0).getNknshry(), "23", "年金支払期間");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getKykjyoutai(), C_Kykjyoutai.IKKATUNK, "契約状態");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getYuukousyoumetukbn(), C_YuukousyoumetuKbn.YUUKOU, "有効消滅区分");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getHaitoukinuketorihoukbn(), C_HaitoukinuketorihouKbn.TUMIHAI, "配当金受取方法区分");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getOldippanjissekip(), BizCurrency.valueOf(200001), "旧制度一般実績保険料");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getOldippannenkanp(), BizCurrency.valueOf(200002), "旧制度一般年間保険料");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getOldippanjissekihaitoukin(), BizCurrency.valueOf(200003), "旧制度一般実績配当金");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getOldippannenkanhaitoukin(), BizCurrency.valueOf(200004), "旧制度一般年間配当金");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getOldippanjissekisyoumeigk(), BizCurrency.valueOf(200005), "旧制度一般実績証明額");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getOldippannenkansyoumeigk(), BizCurrency.valueOf(200006), "旧制度一般年間証明額");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewippanjissekip(), BizCurrency.valueOf(200007), "新制度一般実績保険料");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewippannenkanp(), BizCurrency.valueOf(200008), "新制度一般年間保険料");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewippanjissekihaitoukin(), BizCurrency.valueOf(200009), "新制度一般実績配当金");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewippannenkanhaitoukin(), BizCurrency.valueOf(200010), "新制度一般年間配当金");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewippanjissekisyoumeigk(), BizCurrency.valueOf(200011), "新制度一般実績証明額");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewippannenkansyoumeigk(), BizCurrency.valueOf(200012), "新制度一般年間証明額");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewiryoujissekip(), BizCurrency.valueOf(200013), "新制度介護医療実績保険料");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewiryounenkanp(), BizCurrency.valueOf(200014), "新制度介護医療年間保険料");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewiryoujissekihaitoukin(), BizCurrency.valueOf(200015), "新制度介護医療実績配当金");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewiryounenkanhaitoukin(), BizCurrency.valueOf(200016), "新制度介護医療年間配当金");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewiryoujissekisyoumeigk(), BizCurrency.valueOf(200017), "新制度介護医療実績証明額");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewiryounenkansyoumeigk(), BizCurrency.valueOf(200018), "新制度介護医療年間証明額");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewnkjissekip(), BizCurrency.valueOf(200019), "新制度年金実績保険料");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewnknenkanp(), BizCurrency.valueOf(200020), "新制度年金年間保険料");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewnkjissekihaitoukin(), BizCurrency.valueOf(200021), "新制度年金実績配当金");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewnknenkanhaitoukin(), BizCurrency.valueOf(200022), "新制度年金年間配当金");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewnkjissekisyoumeigk(), BizCurrency.valueOf(200023), "新制度年金実績証明額");
        exBizCalcbleEquals(bAK_KoujyoSym1.get(0).getNewnknenkansyoumeigk(), BizCurrency.valueOf(200024), "新制度年金年間証明額");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getKjnnkkoujyum(), C_UmuKbn.NONE, "個人年金控除有無");
        exStringEquals(bAK_KoujyoSym1.get(0).getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_KoujyoSym1.get(0).getTsinadr1kj(), "通信先住所１（漢字）１", "通信先住所１（漢字）");
        exStringEquals(bAK_KoujyoSym1.get(0).getTsinadr2kj(), "通信先住所２（漢字）１", "通信先住所２（漢字）");
        exStringEquals(bAK_KoujyoSym1.get(0).getTsinadr3kj(), "通信先住所３（漢字）１", "通信先住所３（漢字）");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawasesosikinmkj(), "問合せ先組織名", "問合せ先組織名（漢字）");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawaseyno(), null, "問合せ先郵便番号");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawaseadr1kj(), "問合せ先住所１", "問合せ先住所１（漢字）");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawaseadr2kj(), "問合せ先住所２", "問合せ先住所２（漢字）");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawaseadr3kj(), "問合せ先住所３", "問合せ先住所３（漢字）");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawasetelno(), null, "問合せ先電話番号");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawaseteluktkkanou1(), "201611010101", "問合せ先電話受付可能時間１");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawaseteluktkkanou2(), "201611010110", "問合せ先電話受付可能時間２");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawasesosikinmkj2(), "第２問合せ先組織名", "第２問合せ先組織名（漢字）");
        exStringEquals(bAK_KoujyoSym1.get(0).getToiawasetelno2(), null, "第２問合せ先電話番号");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
        exStringEquals(bAK_KoujyoSym1.get(0).getDrtencd(), "1010", "代理店コード");
        exStringEquals(bAK_KoujyoSym1.get(0).getDrtennmkj(), "代理店名（漢字）１", "代理店名（漢字）");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getHengakuumu(), C_UmuKbn.NONE, "変額保険有無");
        exClassificationEquals(bAK_KoujyoSym1.get(0).getNewsyoumeigkumukbn(), C_UmuKbn.NONE, "新制度証明額有無区分");
        exStringEquals(bAK_KoujyoSym1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KoujyoSym1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KoujyoSym1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_Suiihyou> bAK_Suiihyou1 = bAK_KykKihon1.getBAKSuiihyous();
        exStringEquals(bAK_Suiihyou1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Suiihyou1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Suiihyou1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_Suiihyou1.get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exNumericEquals(bAK_Suiihyou1.get(0).getKeikanensuu(), 22, "経過年数");
        exDateEquals(bAK_Suiihyou1.get(0).getCalckijyunymd(), BizDate.valueOf("20150101"), "計算基準日");
        exDateYMEquals(bAK_Suiihyou1.get(0).getCalcym(), BizDateYM.valueOf("201501"), "計算年月");
        exClassificationEquals(bAK_Suiihyou1.get(0).getMvatekijyoutaikbn(),C_MvaTekiyoujyoutaiKbn.MVAARI, "ＭＶＡ適用状態区分");
        exClassificationEquals(bAK_Suiihyou1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        assertEquals("市場価格調整用利率（上昇）", bAK_Suiihyou1.get(0).getSjkkktusirrtup(), BizNumber.valueOf(1));
        assertEquals("市場価格調整用利率（同水準）", bAK_Suiihyou1.get(0).getSjkkktusirrtsame(), BizNumber.valueOf(2));
        assertEquals("市場価格調整用利率（低下）", bAK_Suiihyou1.get(0).getSjkkktusirrtdown(), BizNumber.valueOf(3));
        assertEquals("市場価格調整用利率変動幅（上）", bAK_Suiihyou1.get(0).getSjkkktusirrthendouup(), BizNumber.valueOf(4));
        assertEquals("市場価格調整用利率変動幅（下）", bAK_Suiihyou1.get(0).getSjkkktusirrthendoudown(), BizNumber.valueOf(5));
        assertEquals("円換算適用為替レート（円高）", bAK_Suiihyou1.get(0).getYenknsnkwsrateyendaka(), BizNumber.valueOf(6));
        assertEquals("円換算適用為替レート（中央値）", bAK_Suiihyou1.get(0).getYenknsnkwsrateyenkijyun(), BizNumber.valueOf(7));
        assertEquals("円換算適用為替レート（円安）", bAK_Suiihyou1.get(0).getYenknsnkwsrateyenyasu(), BizNumber.valueOf(8));
        exBizCalcbleEquals( bAK_Suiihyou1.get(0).getYenknsnkwsrategkyendaka(), BizCurrency.valueOf(1001),"円換算適用為替レート変動額（円高）");
        exBizCalcbleEquals( bAK_Suiihyou1.get(0).getYenknsnkwsrategkyenyasu(), BizCurrency.valueOf(1002),"円換算適用為替レート変動額（円安）");
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwup(), BizCurrency.valueOf(1003),"ＭＶＡ適用解約返戻金額（上昇）" );
        exBizCalcbleEquals( bAK_Suiihyou1.get(0).getMvaariwsame(), BizCurrency.valueOf(1004),"ＭＶＡ適用解約返戻金額（同水準）");
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwdown(), BizCurrency.valueOf(1005),"ＭＶＡ適用解約返戻金額（低下）" );
        exBizCalcbleEquals( bAK_Suiihyou1.get(0).getMvaariwyenupyendaka(), BizCurrency.valueOf(1006),"ＭＶＡ適用解約返戻金額（円貨）（上昇）（円高）");
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwyenupyenkijyun(), BizCurrency.valueOf(1007),"ＭＶＡ適用解約返戻金額（円貨）（上昇）（中央値）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwyenupyenyasu(), BizCurrency.valueOf(1008),"ＭＶＡ適用解約返戻金額（円貨）（上昇）（円安）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwyensameyendaka(), BizCurrency.valueOf(1009),"ＭＶＡ適用解約返戻金額（円貨）（同水準）（円高）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwyensameyenkijyun(), BizCurrency.valueOf(1010),"ＭＶＡ適用解約返戻金額（円貨）（同水準）（中央値）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwyensameyenyasu(), BizCurrency.valueOf(1011),"ＭＶＡ適用解約返戻金額（円貨）（同水準）（円安）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwyendownyendaka(), BizCurrency.valueOf(1012),"ＭＶＡ適用解約返戻金額（円貨）（低下）（円高）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwyendownyenkijyun(), BizCurrency.valueOf(1013),"ＭＶＡ適用解約返戻金額（円貨）（低下）（中央値）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariwyendownyenyasu(), BizCurrency.valueOf(1014),"ＭＶＡ適用解約返戻金額（円貨）（低下）（円安）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvaariptumitatekin(), BizCurrency.valueOf(1015),"ＭＶＡ適用保険料積立金");
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvanonewsame(), BizCurrency.valueOf(1016),"ＭＶＡ適用外解約返戻金額" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvanonewyensameyendaka(), BizCurrency.valueOf(1017),"ＭＶＡ適用外解約返戻金額（円貨）（円高）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvanonewyensameyenkijyun(), BizCurrency.valueOf(1018),"ＭＶＡ適用外解約返戻金額（円貨）（中央値）" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvanonewyensameyenyasu(), BizCurrency.valueOf(1019),"ＭＶＡ適用外解約返戻金額（円貨）（円安）");
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMvanoneptumitatekin(), BizCurrency.valueOf(1020),"ＭＶＡ適用外保険料積立金" );
        exBizCalcbleEquals(bAK_Suiihyou1.get(0).getMkhyouyensysnikougk(), BizCurrency.valueOf(1021),"目標到達時円建終身保険移行特約目標額");

        exStringEquals(bAK_Suiihyou1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Suiihyou1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Suiihyou1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_TtdkKan> bAK_TtdkKan1 = bAK_KykKihon1.getBAKTtdkKans();
        exStringEquals(bAK_TtdkKan1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TtdkKan1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_TtdkKan1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_TtdkKan1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_TtdkKan1.get(0).getSyoruiCd(), C_SyoruiCdKbn.CM_BATCH_FBFURIKOMIKEI_4, "書類コード");
        exDateEquals(bAK_TtdkKan1.get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exClassificationEquals(bAK_TtdkKan1.get(0).getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
        exClassificationEquals(bAK_TtdkKan1.get(0).getTantousitukbn(), null, "担当室区分");
        exClassificationEquals(bAK_TtdkKan1.get(0).getSyoukendhumukbn(), C_UmuKbn.ARI, "証券同封有無区分");
        exStringEquals(bAK_TtdkKan1.get(0).getShskyno(), "1234567", "送付先郵便番号");
        exStringEquals(bAK_TtdkKan1.get(0).getShsadr1kj(), "送付先住所１（漢字）（３０桁）", "送付先住所１（漢字）（３０桁）");
        exStringEquals(bAK_TtdkKan1.get(0).getShsadr2kj(), "送付先住所２（漢字）（３０桁）", "送付先住所２（漢字）（３０桁）");
        exStringEquals(bAK_TtdkKan1.get(0).getShsadr3kj(), "送付先住所３（漢字）（３０桁）", "送付先住所３（漢字）（３０桁）");
        exStringEquals(bAK_TtdkKan1.get(0).getShsnmkj(), "送付先氏名（漢字）１", "送付先氏名（漢字）");
        exStringEquals(bAK_TtdkKan1.get(0).getToiawasesosikinmkj(), "問合せ先組織名", "問合せ先組織名（漢字）");
        exStringEquals(bAK_TtdkKan1.get(0).getToiawaseyno(), "12345678", "問合せ先郵便番号");
        exStringEquals(bAK_TtdkKan1.get(0).getToiawaseadr1kj(), "問合せ先住所１", "問合せ先住所１（漢字）");
        exStringEquals(bAK_TtdkKan1.get(0).getToiawaseadr2kj(), "問合せ先住所２", "問合せ先住所２（漢字）");
        exStringEquals(bAK_TtdkKan1.get(0).getToiawaseadr3kj(), "問合せ先住所３", "問合せ先住所３（漢字）");
        exStringEquals(bAK_TtdkKan1.get(0).getToiawasekaisyanmkj(), null, "問合せ先会社名（漢字）");
        exStringEquals(bAK_TtdkKan1.get(0).getToiawasetelno(), "12345678901234", "問合せ先電話番号");
        exStringEquals(bAK_TtdkKan1.get(0).getToiawaseteluktkkanou1(), "11", "問合せ先電話受付可能時間１");
        exStringEquals(bAK_TtdkKan1.get(0).getToiawaseteluktkkanou2(), "22", "問合せ先電話受付可能時間２");
        exClassificationEquals(bAK_TtdkKan1.get(0).getTetudukisyukbn(), C_TetudukisyuKbn.KAIYAKU, "手続種類区分");
        exClassificationEquals(bAK_TtdkKan1.get(0).getShrumu(), C_UmuKbn.ARI, "支払有無区分");
        exClassificationEquals(bAK_TtdkKan1.get(0).getSyorikbn(), null, "処理区分");
        exStringEquals(bAK_TtdkKan1.get(0).getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exDateEquals(bAK_TtdkKan1.get(0).getKykymd(), BizDate.valueOf("20150401"), "契約日");
        exStringEquals(bAK_TtdkKan1.get(0).getSyouhnnm(), "商品名１", "商品名");
        exStringEquals(bAK_TtdkKan1.get(0).getHhknnmkj(), "被保険者名（漢字）１", "被保険者名（漢字）");
        exClassificationEquals(bAK_TtdkKan1.get(0).getYenshrtktekiumu(), C_UmuKbn.ARI, "円支払特約適用有無");
        exClassificationEquals(bAK_TtdkKan1.get(0).getTtdknaiyouumukbn(), null, "手続内容有無区分");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou1(), null, "手続内容１");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou2(), null, "手続内容２");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou3(), null, "手続内容３");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou4(), null, "手続内容４");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou5(), null, "手続内容５");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou6(), null, "手続内容６");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou7(), null, "手続内容７");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou8(), null, "手続内容８");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou9(), null, "手続内容９");
        exStringEquals(bAK_TtdkKan1.get(0).getTtdknaiyou10(), null, "手続内容１０");
        exDateEquals(bAK_TtdkKan1.get(0).getShrymd(), BizDate.valueOf("20150410"), "支払日");
        exDateEquals(bAK_TtdkKan1.get(0).getCalckijyunymd(), null, "計算基準日");
        exDateEquals(bAK_TtdkKan1.get(0).getKaiykymd(), null, "解約日");
        exClassificationEquals(bAK_TtdkKan1.get(0).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exStringEquals(bAK_TtdkKan1.get(0).getShrtuukasyuryk(), null, "支払通貨種類略称");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getShrgkkei(), BizCurrency.valueOf(3000001), "支払額合計");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getHnkngk(), null, "返金額");
        exClassificationEquals(bAK_TtdkKan1.get(0).getHnkntuukasyu(), null, "返金通貨種類");
        exDateEquals(bAK_TtdkKan1.get(0).getHnknymd(), null, "返金日");

        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getShrtienrsk(), BizCurrency.valueOf(3000008), "支払遅延利息");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou1(), "摘要１", "摘要１");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou2(), "摘要２", "摘要２");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou3(), "摘要３", "摘要３");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou4(), "摘要４", "摘要４");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou5(), "摘要５", "摘要５");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou6(), "摘要６", "摘要６");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou7(), "摘要７", "摘要７");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou8(), "摘要８", "摘要８");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou9(), null ,"摘要９");
        exStringEquals(bAK_TtdkKan1.get(0).getTekiyou10(), null, "摘要１０");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai1(), BizCurrency.valueOf(1000000001), "金額明細１");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai2(), BizCurrency.valueOf(1000000002), "金額明細２");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai3(), BizCurrency.valueOf(1000000003), "金額明細３");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai4(), BizCurrency.valueOf(1000000004), "金額明細４");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai5(), BizCurrency.valueOf(1000000005), "金額明細５");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai6(), BizCurrency.valueOf(1000000006), "金額明細６");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai7(), BizCurrency.valueOf(1000000007), "金額明細７");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai8(), BizCurrency.valueOf(1000000008), "金額明細８");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai9(), null, "金額明細９");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getKngkmeisai10(), null, "金額明細１０");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu1(), null, "金額明細通貨種類１");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu2(), null, "金額明細通貨種類２");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu3(), null, "金額明細通貨種類３");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu4(), null, "金額明細通貨種類４");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu5(), null, "金額明細通貨種類５");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu6(), null, "金額明細通貨種類６");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu7(), null, "金額明細通貨種類７");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu8(), null, "金額明細通貨種類８");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu9(), null, "金額明細通貨種類９");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKngkmisituukasyu10(), null, "金額明細通貨種類１０");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou1(), null, "備考１");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou2(), null, "備考２");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou3(), null, "備考３");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou4(), null, "備考４");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou5(), null, "備考５");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou6(), null, "備考６");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou7(), null, "備考７");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou8(), null, "備考８");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou9(), null, "備考９");
        exStringEquals(bAK_TtdkKan1.get(0).getBikou10(), null, "備考１０");

        exStringEquals(bAK_TtdkKan1.get(0).getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_TtdkKan1.get(0).getSitencd(), "001", "支店コード");
        exStringEquals(bAK_TtdkKan1.get(0).getBanknmkj(), "銀行名（漢字）１", "銀行名（漢字）");
        exStringEquals(bAK_TtdkKan1.get(0).getSitennmkj(), "支店名（漢字）１", "支店名（漢字）");
        exClassificationEquals(bAK_TtdkKan1.get(0).getYokinkbn(), C_YokinKbn.HUTUUYUTYO, "預金種目区分");
        exStringEquals(bAK_TtdkKan1.get(0).getKouzano(), "1234567", "口座番号");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKzsyuruikbn(), C_KouzasyuruiKbn.YENKOUZA, "口座種類区分");
        exStringEquals(bAK_TtdkKan1.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exClassificationEquals(bAK_TtdkKan1.get(0).getSoukinsakisiteikbn(), null, "送金先指定区分");
        exClassificationEquals(bAK_TtdkKan1.get(0).getHtsiryosyukbn(), null, "法定資料種類区分");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getSynykngk(), BizCurrency.valueOf(1000000001), "収入金額");
        exBizCalcbleEquals(bAK_TtdkKan1.get(0).getHtykeihi(), BizCurrency.valueOf(3000012), "必要経費");
        exClassificationEquals(bAK_TtdkKan1.get(0).getKaiyakujiyuu(), C_Kaiyakujiyuu.TUUJYOU, "解約事由");
        exClassificationEquals(bAK_TtdkKan1.get(0).getZeimumongonoutkbn(), null, "税務文言出力区分");
        exStringEquals(bAK_TtdkKan1.get(0).getZeimumongon1(), null, "税務文言１");
        exStringEquals(bAK_TtdkKan1.get(0).getZeimumongon2(), null, "税務文言２");
        exStringEquals(bAK_TtdkKan1.get(0).getZeimumongon3(), null, "税務文言３");
        exStringEquals(bAK_TtdkKan1.get(0).getZeimumongon4(), null, "税務文言４");
        exStringEquals(bAK_TtdkKan1.get(0).getZeimumongon5(), null, "税務文言５");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongonhyoudai(), null, "お知らせ文言表題");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon1(), null, "お知らせ文言１");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon2(), null, "お知らせ文言２");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon3(), null, "お知らせ文言３");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon4(), null, "お知らせ文言４");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon5(), null, "お知らせ文言５");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon6(), null, "お知らせ文言６");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon7(), null, "お知らせ文言７");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon8(), null, "お知らせ文言８");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon9(), null, "お知らせ文言９");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon10(), null, "お知らせ文言１０");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon11(), null, "お知らせ文言１１");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon12(), null, "お知らせ文言１２");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon13(), null, "お知らせ文言１３");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon14(), null, "お知らせ文言１４");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon15(), null, "お知らせ文言１５");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon16(), null, "お知らせ文言１６");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon17(), null, "お知らせ文言１７");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon18(), null, "お知らせ文言１８");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon19(), null, "お知らせ文言１９");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon20(), null, "お知らせ文言２０");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon21(), null, "お知らせ文言２１");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon22(), null, "お知らせ文言２２");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon23(), null, "お知らせ文言２３");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon24(), null, "お知らせ文言２４");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon25(), null, "お知らせ文言２５");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon26(), null, "お知らせ文言２６");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon27(), null, "お知らせ文言２７");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon28(), null, "お知らせ文言２８");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon29(), null, "お知らせ文言２９");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon30(), null, "お知らせ文言３０");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon31(), null, "お知らせ文言３１");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon32(), null, "お知らせ文言３２");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon33(), null, "お知らせ文言３３");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon34(), null, "お知らせ文言３４");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon35(), null, "お知らせ文言３５");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon36(), null, "お知らせ文言３６");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon37(), null, "お知らせ文言３７");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon38(), null, "お知らせ文言３８");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon39(), null, "お知らせ文言３９");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon40(), null, "お知らせ文言４０");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon41(), null, "お知らせ文言４１");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon42(), null, "お知らせ文言４２");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon43(), null, "お知らせ文言４３");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon44(), null, "お知らせ文言４４");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon45(), null, "お知らせ文言４５");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon46(), null, "お知らせ文言４６");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon47(), null, "お知らせ文言４７");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon48(), null, "お知らせ文言４８");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon49(), null, "お知らせ文言４９");
        exStringEquals(bAK_TtdkKan1.get(0).getOsirasemongon50(), null, "お知らせ文言５０");
        exStringEquals(bAK_TtdkKan1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TtdkKan1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TtdkKan1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        List<IT_BAK_HokenSyouken> bAK_HokenSyouken1 = bAK_KykKihon1.getBAKHokenSyoukens();
        exStringEquals(bAK_HokenSyouken1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HokenSyouken1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_HokenSyouken1.get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exStringEquals(bAK_HokenSyouken1.get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSinsaihkkbn(), C_SinsaihkKbn.SIN, "新規再発行区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukensaihkkbn(), C_SyoukensaihkKbn.SYOUKENSAIHAKKOU, "証券再発行区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getInsizeishryouhikbn(), C_InsizeiShryouhiKbn.HUYOU, "印紙税支払要否区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getHassoukbn(), C_HassouKbn.TYOKUSOU, "発送区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getKoujyosyoumeiumukbn(), C_UmuKbn.ARI, "控除証明書有無区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSuiihyouumukbn(), C_UmuKbn.ARI, "推移表有無区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getKanryoutuutiumukbn(), C_UmuKbn.ARI, "完了通知有無区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getStdrsktirasidouhuukbn(), null, "指定代理請求チラシ同封区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getDstirasidouhuukbn(), null, "ＤＳチラシ同封区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyotnshuyoupostumukbn(), null, "証券転送不要郵便有無区分");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd1(), "1", "表示欄左メッセージコード１");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd2(), "2", "表示欄左メッセージコード２");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd3(), "3", "表示欄左メッセージコード３");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd4(), "4", "表示欄左メッセージコード４");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd5(), "5", "表示欄左メッセージコード５");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd6(), null, "表示欄左メッセージコード６");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd7(), null, "表示欄左メッセージコード７");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd8(), null, "表示欄左メッセージコード８");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd9(), null, "表示欄左メッセージコード９");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd10(), null, "表示欄左メッセージコード１０");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd11(), null, "表示欄左メッセージコード１１");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd12(), null, "表示欄左メッセージコード１２");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd13(), null, "表示欄左メッセージコード１３");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd14(), null, "表示欄左メッセージコード１４");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd15(), null, "表示欄左メッセージコード１５");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd16(), null, "表示欄左メッセージコード１６");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd17(), null, "表示欄左メッセージコード１７");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd18(), null, "表示欄左メッセージコード１８");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd19(), null, "表示欄左メッセージコード１９");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranhidarimsgcd20(), null, "表示欄左メッセージコード２０");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd1(), "1", "表示欄右メッセージコード１");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd2(), "2", "表示欄右メッセージコード２");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd3(), "3", "表示欄右メッセージコード３");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd4(), "4", "表示欄右メッセージコード４");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd5(), "5", "表示欄右メッセージコード５");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd6(), null, "表示欄右メッセージコード６");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd7(), null, "表示欄右メッセージコード７");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd8(), null, "表示欄右メッセージコード８");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd9(), null, "表示欄右メッセージコード９");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd10(), null, "表示欄右メッセージコード１０");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd11(), null, "表示欄右メッセージコード１１");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd12(), null, "表示欄右メッセージコード１２");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd13(), null, "表示欄右メッセージコード１３");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd14(), null, "表示欄右メッセージコード１４");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd15(), null, "表示欄右メッセージコード１５");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd16(), null, "表示欄右メッセージコード１６");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd17(), null, "表示欄右メッセージコード１７");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd18(), null, "表示欄右メッセージコード１８");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd19(), null, "表示欄右メッセージコード１９");
        exStringEquals(bAK_HokenSyouken1.get(0).getHyoujiranmigiimsgcd20(), null, "表示欄右メッセージコード２０");
        exDateEquals(bAK_HokenSyouken1.get(0).getHyoujiransknnkaisiymd(), null, "表示欄責任開始日");
        assertEquals("表示欄予定利率", bAK_HokenSyouken1.get(0).getHyoujiranyoteiriritu(), BizNumber.valueOf(1));
        assertEquals("表示欄市場価格調整用利率", bAK_HokenSyouken1.get(0).getHyoujiransjkkktusirrt(), BizNumber.valueOf(2));
        exStringEquals(bAK_HokenSyouken1.get(0).getHknsyukigou(), "1", "保険種類記号");
        exStringEquals(bAK_HokenSyouken1.get(0).getHanbainm(), "販売名称", "販売名称");
        exStringEquals(bAK_HokenSyouken1.get(0).getSeisikihknnm(), "正式保険名称", "正式保険名称");
        exDateEquals(bAK_HokenSyouken1.get(0).getKouryokukaisiymd(),null, "効力開始年月日");
        exStringEquals(bAK_HokenSyouken1.get(0).getKyknmkj(), "契約者名", "契約者名（漢字）");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getKyknmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "契約者名漢字化不可区分");
        exStringEquals(bAK_HokenSyouken1.get(0).getHhknnmkj(), "被保険者名", "被保険者名（漢字）");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getHhknnmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "被保険者名漢字化不可区分");
        exDateEquals(bAK_HokenSyouken1.get(0).getHhknseiymd(), BizDate.valueOf("20150101"), "被保険者生年月日");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exNumericEquals(bAK_HokenSyouken1.get(0).getHhknnen(), 11, "被保険者年齢");

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn1(), null, "（証券）受取人見出し区分１");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn1(), null, "（証券）受取人区分１");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm1(),null, "（証券）受取人名１");
        assertEquals("（証券）受取人分割割合１", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari1(), BizNumber.valueOf(1));

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn2(), null, "（証券）受取人見出し区分２");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn2(), null, "（証券）受取人区分２");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm2(),null, "（証券）受取人名２");
        assertEquals("（証券）受取人分割割合２", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari2(), BizNumber.valueOf(2));

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn3(), null, "（証券）受取人見出し区分３");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn3(), null, "（証券）受取人区分３");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm3(),null, "（証券）受取人名３");
        assertEquals("（証券）受取人分割割合３", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari3(), BizNumber.valueOf(3));

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn4(), null, "（証券）受取人見出し区分４");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn4(), null, "（証券）受取人区分４");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm4(),null, "（証券）受取人名４");
        assertEquals("（証券）受取人分割割合４", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari4(), BizNumber.valueOf(4));

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn5(), null, "（証券）受取人見出し区分５");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn5(), null, "（証券）受取人区分５");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm5(),null, "（証券）受取人名５");
        assertEquals("（証券）受取人分割割合５", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari5(), BizNumber.valueOf(5));

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn6(), null, "（証券）受取人見出し区分６");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn6(), null, "（証券）受取人区分６");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm6(),null, "（証券）受取人名６");
        assertEquals("（証券）受取人分割割合６", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari6(), BizNumber.valueOf(6));

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn7(), null, "（証券）受取人見出し区分７");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn7(), null, "（証券）受取人区分７");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm7(),null, "（証券）受取人名７");
        assertEquals("（証券）受取人分割割合７", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari7(), BizNumber.valueOf(7));

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn8(), null, "（証券）受取人見出し区分８");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn8(), null, "（証券）受取人区分８");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm8(),null, "（証券）受取人名８");
        assertEquals("（証券）受取人分割割合８", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari8(), BizNumber.valueOf(8));

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn9(), null, "（証券）受取人見出し区分９");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn9(), null, "（証券）受取人区分９");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm9(),null, "（証券）受取人名９");
        assertEquals("（証券）受取人分割割合９", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari9(), BizNumber.valueOf(9));

        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktmidasikbn10(), null, "（証券）受取人見出し区分１０");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getSyoukenuktkbn10(), null, "（証券）受取人区分１０");
        exStringEquals(bAK_HokenSyouken1.get(0).getSyoukenuktnm10(),null, "（証券）受取人名１０");
        assertEquals("（証券）受取人分割割合１０", bAK_HokenSyouken1.get(0).getSyoukenuktbnwari10(), BizNumber.valueOf(10));
        exStringEquals(bAK_HokenSyouken1.get(0).getPmsgcd1(),null, "保険料メッセージコード１");
        exStringEquals(bAK_HokenSyouken1.get(0).getPmsgcd2(),null, "保険料メッセージコード２");
        exStringEquals(bAK_HokenSyouken1.get(0).getPmsgcd3(),null, "保険料メッセージコード３");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getPtuukatype(),null, "保険料通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken1.get(0).getHokenryou(), null, "保険料");
        exStringEquals(bAK_HokenSyouken1.get(0).getPtuuka(),null, "保険料通貨");
        exStringEquals(bAK_HokenSyouken1.get(0).getPtokuyakumsgcd(),null, "保険料特約メッセージコード");
        exDateEquals(bAK_HokenSyouken1.get(0).getKykymd(), BizDate.valueOf("20150101"), "契約日");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd1(), "1", "その他内容欄メッセージコード１");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd2(), "2", "その他内容欄メッセージコード２");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd3(), "3", "その他内容欄メッセージコード３");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd4(), "4", "その他内容欄メッセージコード４");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd5(), "5", "その他内容欄メッセージコード５");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd6(), "6", "その他内容欄メッセージコード６");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd7(), "7", "その他内容欄メッセージコード７");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd8(), "8", "その他内容欄メッセージコード８");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd9(), "9", "その他内容欄メッセージコード９");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd10(), "10", "その他内容欄メッセージコード１０");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd11(), "11", "その他内容欄メッセージコード１１");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd12(), "12", "その他内容欄メッセージコード１２");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd13(), "13", "その他内容欄メッセージコード１３");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd14(), "14", "その他内容欄メッセージコード１４");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd15(), "15", "その他内容欄メッセージコード１５");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd16(), "16", "その他内容欄メッセージコード１６");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd17(), "17", "その他内容欄メッセージコード１７");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd18(), "18", "その他内容欄メッセージコード１８");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd19(), "19", "その他内容欄メッセージコード１９");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyouranmsgcd20(), "20", "その他内容欄メッセージコード２０");
        exStringEquals(bAK_HokenSyouken1.get(0).getStnaiyourangaimsgcd(), "1", "その他内容欄外メッセージコード");
        exStringEquals(bAK_HokenSyouken1.get(0).getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_HokenSyouken1.get(0).getTsinadr1kj(), "通信先住所１", "通信先住所１（漢字）");
        exStringEquals(bAK_HokenSyouken1.get(0).getTsinadr2kj(), "通信先住所２", "通信先住所２（漢字）");
        exStringEquals(bAK_HokenSyouken1.get(0).getTsinadr3kj(), "通信先住所３", "通信先住所３（漢字）");
        exStringEquals(bAK_HokenSyouken1.get(0).getSisyacd(), "123", "支社コード");
        exStringEquals(bAK_HokenSyouken1.get(0).getCcmsgcd(), "1", "コールセンターメッセージコード");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getChannelcd(), C_Channelcd.SMBC, "チャネルコード");
        exStringEquals(bAK_HokenSyouken1.get(0).getDrtennm1kj(), "代理店名１", "代理店名１（漢字）");
        exStringEquals(bAK_HokenSyouken1.get(0).getDrtennm2kj(), "代理店名２", "代理店名２（漢字）");
        exStringEquals(bAK_HokenSyouken1.get(0).getAisatumsgcd(), "1", "挨拶メッセージコード");
        exStringEquals(bAK_HokenSyouken1.get(0).getHskmsgcd(), "1", "補足メッセージコード");
        exDateEquals(bAK_HokenSyouken1.get(0).getSyohakkouymd(), BizDate.valueOf("20150101"), "証券発行年月日");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn1(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn2(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分２");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn3(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分３");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn4(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分４");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn5(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分５");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn6(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分６");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn7(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分７");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn8(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分８");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn9(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分９");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn10(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１０");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn11(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１１");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn12(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１２");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn13(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１３");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn14(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１４");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn15(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１５");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn16(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１６");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getTokusyusyorinaiyoukbn17(), C_TokusyuSyoriNaiyouKbn.HHKNKANJIMEINASI, "特殊処理内容区分１７");
        exStringEquals(bAK_HokenSyouken1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HokenSyouken1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HokenSyouken1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfo().getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfo().getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfo().getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfo().getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");

        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTyouhyouymd(), BizDate.valueOf("20150101"), "帳票作成日");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getHenkousikibetukey(), "123", "変更識別キー");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getNksyuruinmsyouken(), "年金種類名称", "年金種類名称（証券用）");
        exNumericEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTeikiikkatubaraitukisuu(), 1, "定期一括払月数");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getZnntikiktbriyhrkgktuktype(), C_Tuukasyu.JPY, "前納定期一括払円貨払込額通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getZnntikiktbriyenhrkgk(), BizCurrency.valueOf(5566), "前納定期一括払円貨払込額");
        exNumericEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getZnnkai2(), 12, "前納回数（２桁）");
        assertEquals("ご負担費用説明欄解約控除率最小", bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getHutanhiyustmkyakkjrtmin(), BizNumber.valueOf(0.1));
        assertEquals("ご負担費用説明欄解約控除率最大", bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getHutanhiyustmkyakkjrtmax(), BizNumber.valueOf(0.2));
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getFstpznnkngktuktype(), C_Tuukasyu.USD, "初回Ｐご確認欄前納金額通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getFstpznnkngk(), BizCurrency.valueOf(7788), "初回Ｐご確認欄前納金額");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getDskjnkngkktuktype(), C_Tuukasyu.JPY, "ＤＳ基準金額通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getDskjnkngk(), BizCurrency.valueOf(8899), "ＤＳ基準金額");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTikiktbriyhrkgktuktype(), C_Tuukasyu.JPY, "定期一括払円貨払込額通貨タイプ");
        exBizCalcbleEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTikiktbriyenhrkgk(), BizCurrency.valueOf(1122), "定期一括払円貨払込額");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktirasidouhuukbn1(), C_UmuKbn.ARI, "ご家族登録チラシ１同封区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktirasidouhuukbn2(), C_UmuKbn.ARI, "ご家族登録チラシ２同封区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKykdairitirasidouhuukbn(), C_UmuKbn.ARI, "保険契約者代理人チラシ同封区分");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getSkhtirasidouhuukbn(), C_UmuKbn.ARI, "債権法チラシ同封区分");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getYakkannewoldkbn(), "1", "約款新旧区分");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg1(), "001", "ご家族登録サービスメッセージコード１");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg2(), "002", "ご家族登録サービスメッセージコード２");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg3(), "003", "ご家族登録サービスメッセージコード３");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg4(), "004", "ご家族登録サービスメッセージコード４");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg5(), "005", "ご家族登録サービスメッセージコード５");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg6(), "006", "ご家族登録サービスメッセージコード６");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg7(), "007", "ご家族登録サービスメッセージコード７");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKzktourokuservicemsg8(), "008", "ご家族登録サービスメッセージコード８");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzknmkj118(), "家族名１", "登録家族名１（１８桁）");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzksei1(), C_Seibetu.MALE, "登録家族性別１");
        exDateEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkseiymd1(), BizDate.valueOf("20180101"), "登録家族生年月日１");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkyno1(), "1234567", "登録家族郵便番号１");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr1kj1(), "住所１漢字１", "登録家族住所１（漢字）１");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr2kj1(), "住所２漢字１", "登録家族住所２（漢字）１");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr3kj1(), "住所３漢字１", "登録家族住所３（漢字）１");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzktelno1(), null, "登録家族電話番号１");
        exClassificationEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzksei2(), C_Seibetu.MALE, "登録家族性別２");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzknmkj218(), "家族名２", "登録家族名２（１８桁）");
        exDateEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkseiymd2(), BizDate.valueOf("20180201"), "登録家族生年月日２");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkyno2(), "2345678", "登録家族郵便番号２");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr1kj2(), "住所１漢字２", "登録家族住所１（漢字）２");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr2kj2(), "住所２漢字２", "登録家族住所２（漢字）２");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzkadr3kj2(), "住所３漢字２", "登録家族住所３（漢字）２");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getTrkkzktelno2(), null, "登録家族電話番号２");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getKykdairinm18(), "契約者代理人名", "契約者代理人名（１８桁）");
        exStringEquals(bAK_HokenSyouken1.get(0).getBAKHokenSyoukenHukaInfos().get(0).getHhkndairinm(), "被保険者代理人氏名", "被保険者代理人氏名");

        List<IT_BAK_TrkKzk> bAK_TrkKzk1 = bAK_KykKihon.getBAKTrkKzks();
        exStringEquals(bAK_TrkKzk1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_TrkKzk1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_TrkKzk1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_TrkKzk1.get(0).getTrkkzkkbn(), C_TrkKzkKbn.TRKKZK1, "登録家族区分");
        exDateEquals(bAK_TrkKzk1.get(0).getTrkkzksetteiymd(), BizDate.valueOf("20190102"), "登録家族設定年月日");
        exStringEquals(bAK_TrkKzk1.get(0).getTrkkzknmkn(), "登録家族名カナ", "登録家族名（カナ）");
        exStringEquals(bAK_TrkKzk1.get(0).getTrkkzknmkj(), "登録家族名漢字", "登録家族名（漢字）");
        exClassificationEquals(bAK_TrkKzk1.get(0).getTrkkzknmkjkhukakbn(), C_KjkhukaKbn.KJKHUKA, "登録家族名漢字化不可区分");
        exDateEquals(bAK_TrkKzk1.get(0).getTrkkzkseiymd(), BizDate.valueOf("20180101"), "登録家族生年月日");
        exClassificationEquals(bAK_TrkKzk1.get(0).getTrkkzksei(), C_Seibetu.MALE, "登録家族性別");
        exClassificationEquals(bAK_TrkKzk1.get(0).getTrkkzktdk(), C_Tdk.HONNIN, "登録家族続柄");
        exStringEquals(bAK_TrkKzk1.get(0).getTrkkzkyno(), "1234567", "登録家族郵便番号");
        exStringEquals(bAK_TrkKzk1.get(0).getTrkkzkadr1kj(), null, "登録家族住所１（漢字）");
        exStringEquals(bAK_TrkKzk1.get(0).getTrkkzkadr2kj(), "住所１漢字", "登録家族住所２（漢字）");
        exStringEquals(bAK_TrkKzk1.get(0).getTrkkzkadr3kj(), "住所２漢字", "登録家族住所３（漢字）");
        exStringEquals(bAK_TrkKzk1.get(0).getTrkkzktelno(), "010-1234-2598", "登録家族電話番号");
        exStringEquals(bAK_TrkKzk1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_TrkKzk1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_TrkKzk1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_CreditCardInfo> bAK_CreditCardInfo1 = bAK_KykKihon.getBAKCreditCardInfos();
        exStringEquals(bAK_CreditCardInfo1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_CreditCardInfo1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_CreditCardInfo1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_CreditCardInfo1.get(0).getCreditkessaiyouno(), "123-456-789", "クレジットカード決済用番号");
        exDateYMEquals(bAK_CreditCardInfo1.get(0).getCredityuukoukakym(), BizDateYM.valueOf("201901"), "クレジットカード有効確認年月");
        exClassificationEquals(bAK_CreditCardInfo1.get(0).getCredityuukoukakkekka(), C_Yuukoukakkekka.YUUKOUKAK_OK, "クレジットカード有効確認結果");
        exStringEquals(bAK_CreditCardInfo1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_CreditCardInfo1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_CreditCardInfo1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KoujyoSymNaiyouD> bAK_KoujyoSymNaiyouD1 = bAK_KykKihon.getBAKKoujyoSymNaiyouDs();
        exStringEquals(bAK_KoujyoSymNaiyouD1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KoujyoSymNaiyouD1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KoujyoSymNaiyouD1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KoujyoSymNaiyouD1.get(0).getSyouhncd(), "0001", "商品コード");
        exNumericEquals(bAK_KoujyoSymNaiyouD1.get(0).getRenno3keta(), 1, "連番（３桁）");
        exStringEquals(bAK_KoujyoSymNaiyouD1.get(0).getKoujyosyoumeinnd(), "2019", "控除証明年度");
        exBizCalcbleEquals(bAK_KoujyoSymNaiyouD1.get(0).getKoujyosyoumeid(), BizCurrency.valueOf(12345), "控除証明Ｄ");
        exDateYEquals(bAK_KoujyoSymNaiyouD1.get(0).getHaitounendo(), BizDateY.valueOf("2020"), "配当年度");
        exNumericEquals(bAK_KoujyoSymNaiyouD1.get(0).getHaitoukanrirenno(), 1, "配当管理連番");
        exClassificationEquals(bAK_KoujyoSymNaiyouD1.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE1, "配当金作成区分");
        exClassificationEquals(bAK_KoujyoSymNaiyouD1.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exClassificationEquals(bAK_KoujyoSymNaiyouD1.get(0).getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.SUMI, "控除証明書発行済フラグ");
        exClassificationEquals(bAK_KoujyoSymNaiyouD1.get(0).getSakujyoflg(), C_Delflag.SAKUJYO, "削除フラグ");
        exStringEquals(bAK_KoujyoSymNaiyouD1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KoujyoSymNaiyouD1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KoujyoSymNaiyouD1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhDenpyoData1.get(0).getDenrenno(), "12345678907", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData1.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhDenpyoData1.get(0).getHuridenatesakicd(), "102", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getTantocd(), C_TantouCdKbn.KIKAKUIMU, "担当コード");
        exDateEquals(bAK_KhDenpyoData1.get(0).getDenymd(), BizDate.valueOf("20150414"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getTaisyakukbn(), C_TaisyakuKbn.KASIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_SYOKAI_GAIHO_JPY, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData1.get(0).getSuitoubumoncd(), "102", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(0).getDengaikagk(), BizCurrency.valueOf(20001), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData1.get(0).getDenkawaserate(), BizNumber.valueOf(102));
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(0).getDenyenkagk(), BizCurrency.valueOf(1000000002), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getHuridenskskbn(), C_HuridensksKbn.GYOUMUIGAI, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getDenhnknhoukbn(), C_DenhnknhouKbn.YUBINHARAIDASI, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getDenshrhoukbn(), C_DenshrhouKbn.FBSOUKINYOKU, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData1.get(0).getSyoriYmd(), BizDate.valueOf("20150202"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData1.get(0).getSyoricd(), "1002", "処理コード");
        exStringEquals(bAK_KhDenpyoData1.get(0).getSyorisosikicd(), "1000002", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getSeg1cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getSeg2cd(), C_Segcd.BLNK, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData1.get(0).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData1.get(0).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(0).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        exStringEquals(bAK_KhFBSoukinData1.get(0).getFbsoukindatasikibetukey(), "12345678906", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getDenrenno(), "12345678901", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData1.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getSyoricd(), "1002", "処理コード");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getSyorisosikicd(), "1000002", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData1.get(0).getSyoriYmd(), BizDate.valueOf("20160202"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData1.get(0).getDenymd(), BizDate.valueOf("20150405"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getSyono(), "12806345672", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getBankcd(), "1212", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getKouzano(), "7654321", "口座番号");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData1.get(0).getSoukingk(), BizCurrency.valueOf(1000000002), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData1.get(0).getGaikataikagk(), BizCurrency.valueOf(1000000002), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData1.get(0).getSoukinkwsrate(), BizNumber.valueOf(2));


        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getFbsoukindatasikibetukey(), "12345678906", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getDenrenno(), "12345678901", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData1.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSyoricd(), "1002", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSyorisosikicd(), "1000002", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData1.get(0).getSyoriYmd(), BizDate.valueOf("20160202"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData1.get(0).getDenymd(), BizDate.valueOf("20150405"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSyono(), "12806345672", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getBankcd(), "1212", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getBanknmej(), "bank2", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSitencd(), "123", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSitennmej(), "siten2", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getKouzano(), "7654321", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData1.get(0).getGaikashrgk(), BizCurrency.valueOf(2), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData1.get(0).getCrossrateshrgk(), BizCurrency.valueOf(2), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData1.get(0).getSoukinkwsrate(), BizNumber.valueOf(2));
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getIrninnmei(), "irni1", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(0).getRenno(), 1, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoriYmd(), BizDate.valueOf("20150101"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getHuho2kykno(), "1000000002", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getHuho2kyknokbn(), C_Huho2kyknoKbn.MOSNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getSyouhncd(), "1002", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getTaisyounmkn(), "タイショウシャシメイ２", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getTaisyounmkj(), "タイショウシャシメイ２", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(0).getTaisyouseiymd(), BizDate.valueOf("20160202"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(0).getKetymd(), BizDate.valueOf("20150101"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getKetsyacd(), "22", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getPalketsyacd(), "22", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(0).getSintyou(), 110, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(0).getTaijyuu(), 50, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(0).getKktymd(), BizDate.valueOf("20150101"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoubyoucd1(), "11", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku1.get(0).getKantiym1(), BizDateYM.valueOf("201501"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoubyoucd2(), "11", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku1.get(0).getKantiym2(), BizDateYM.valueOf("201501"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        exStringEquals(bAK_AnsyuKihon1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_AnsyuKihon1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_AnsyuKihon1.getTrkssikibetukey(), "12345", "取消識別キー");
        exDateYMEquals(bAK_AnsyuKihon1.getJkipjytym(), BizDateYM.valueOf("201501"), "次回Ｐ充当年月");
        exClassificationEquals(bAK_AnsyuKihon1.getTkiktannaitukisuu(), C_Tkiktannaitukisuu.SIXMONTHS, "定期一括案内月数");
        exClassificationEquals(bAK_AnsyuKihon1.getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.SUMI, "控除証明書発行済フラグ");
        exDateEquals(bAK_AnsyuKihon1.getSyuharaimanymd(), BizDate.valueOf("20150401"), "主契約払満日");
        exStringEquals(bAK_AnsyuKihon1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuKihon1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuKihon1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_AnsyuCreditCard bAK_AnsyuCreditCard1 = bAK_AnsyuKihon1.getBAKAnsyuCreditCard();
        exStringEquals(bAK_AnsyuCreditCard1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_AnsyuCreditCard1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_AnsyuCreditCard1.getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_AnsyuCreditCard1.getYukoukachkymd(), BizDate.valueOf("20151001"), "有効性確認日");
        exClassificationEquals(bAK_AnsyuCreditCard1.getYuukoukakujkkbn(), C_YuukoukakujkKbn.SUMI, "有効性確認状況区分");
        exClassificationEquals(bAK_AnsyuCreditCard1.getAuthorijkkbn(), C_AuthorijkKbn.NG, "オーソリ状況区分");
        exClassificationEquals(bAK_AnsyuCreditCard1.getAuthoritrkkbn(), C_AuthoritrkKbn.ITIYEN, "オーソリ登録区分");
        exBizCalcbleEquals(bAK_AnsyuCreditCard1.getAuthorigk(), BizCurrency.valueOf(100001), "オーソリ金額");
        exDateEquals(bAK_AnsyuCreditCard1.getAuthorikanryoymd(), BizDate.valueOf("20151002"), "オーソリ完了日");
        exStringEquals(bAK_AnsyuCreditCard1.getSyouninno(), "123456", "承認番号");
        exStringEquals(bAK_AnsyuCreditCard1.getTanmatusyorino(), "7654321", "端末処理通番");
        exDateEquals(bAK_AnsyuCreditCard1.getUriageymd(), BizDate.valueOf("20151003"), "売上日");
        exStringEquals(bAK_AnsyuCreditCard1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuCreditCard1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuCreditCard1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_AnsyuRireki> bAK_AnsyuRireki1 = bAK_AnsyuKihon1.getBAKAnsyuRirekis();
        exStringEquals(bAK_AnsyuRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_AnsyuRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_AnsyuRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.OTHER, "入金内容区分");
        exDateYMEquals(bAK_AnsyuRireki1.get(0).getJyuutouym(), BizDateYM.valueOf("201502"), "充当年月");
        exNumericEquals(bAK_AnsyuRireki1.get(0).getAnnaino(), 1, "案内番号");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getNykkeiro(), C_Nykkeiro.KYHKIN, "入金経路");
        exNumericEquals(bAK_AnsyuRireki1.get(0).getJyutoukaisuuy(), 12, "充当回数（年）");
        exNumericEquals(bAK_AnsyuRireki1.get(0).getJyutoukaisuum(), 3, "充当回数（月）");
        exBizCalcbleEquals(bAK_AnsyuRireki1.get(0).getHrkp(), BizCurrency.valueOf(300002), "払込保険料");
        exBizCalcbleEquals(bAK_AnsyuRireki1.get(0).getIktwaribikikgk(), BizCurrency.valueOf(300003), "一括割引料");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getAnnaijkkbn(), C_AnnaijkKbn.SONOTAKETTYAKU, "案内状況区分");
        exDateEquals(bAK_AnsyuRireki1.get(0).getAnnaisakuseiymd(), BizDate.valueOf("20150601"), "案内作成日");
        exDateEquals(bAK_AnsyuRireki1.get(0).getNyksyoriymd(), BizDate.valueOf("20150602"), "入金処理日");
        exDateEquals(bAK_AnsyuRireki1.get(0).getMinyusyoriymd(), BizDate.valueOf("20150603"), "未入処理日");
        exDateEquals(bAK_AnsyuRireki1.get(0).getDattaiuktkymd(), BizDate.valueOf("20150604"), "脱退受付日");
        exDateEquals(bAK_AnsyuRireki1.get(0).getHurikaeymd(), BizDate.valueOf("20150605"), "振替日");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getHurihunokbn(), C_HurihunoKbn.ITKTUGOU, "振替不能理由区分");
        exDateEquals(bAK_AnsyuRireki1.get(0).getUriageymdkon(), BizDate.valueOf("20150606"), "売上日（今回）");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getKrkkeijyoflg(), C_UmuKbn.ARI, "仮受計上フラグ");
        exDateEquals(bAK_AnsyuRireki1.get(0).getKrkkeijyoymd(), BizDate.valueOf("20150607"), "仮受計上処理日");
        exNumericEquals(bAK_AnsyuRireki1.get(0).getKrkno(), 12345, "仮受番号");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getHrkkeiro(), C_Hrkkeiro.CREDIT, "払込経路");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exDateYMEquals(bAK_AnsyuRireki1.get(0).getJkipjytym(), BizDateYM.valueOf("201504"), "次回Ｐ充当年月");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getSyuudaikocd(), C_Syuudaikocd.ZENSINKYOU, "収納代行社コード");
        exStringEquals(bAK_AnsyuRireki1.get(0).getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_AnsyuRireki1.get(0).getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_AnsyuRireki1.get(0).getKouzano(), "1234567", "口座番号");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getSinkeizkkbn(), C_SinkeizkKbn.HENKOU, "新規継続区分");
        exClassificationEquals(bAK_AnsyuRireki1.get(0).getSyuyakukyohikbn(), C_SyuyakukyohiKbn.SYUYAKUKYOHI, "集約拒否区分");
        exStringEquals(bAK_AnsyuRireki1.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exStringEquals(bAK_AnsyuRireki1.get(0).getCardkaisyacd(), "11", "カード会社コード");
        exStringEquals(bAK_AnsyuRireki1.get(0).getCreditcardno1(), "12345678901", "クレジットカード番号１");
        exStringEquals(bAK_AnsyuRireki1.get(0).getCreditcardno2(), "12345678902", "クレジットカード番号２");
        exStringEquals(bAK_AnsyuRireki1.get(0).getCreditcardno3(), "12345678903", "クレジットカード番号３");
        exStringEquals(bAK_AnsyuRireki1.get(0).getCreditcardno4(), "12345678904", "クレジットカード番号４");
        exDateEquals(bAK_AnsyuRireki1.get(0).getYukoukachkymd(), BizDate.valueOf("20150709"), "有効性確認日");
        exDateEquals(bAK_AnsyuRireki1.get(0).getAuthorikanryoymd(), BizDate.valueOf("20150710"), "オーソリ完了日");
        exDateEquals(bAK_AnsyuRireki1.get(0).getUriageymdzen(), BizDate.valueOf("20150711"), "売上日（前回）");
        exDateEquals(bAK_AnsyuRireki1.get(0).getHrkkigen(), BizDate.valueOf("20150712"), "払込期限");
        exStringEquals(bAK_AnsyuRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_DattaiUktk bAK_DattaiUktk1 = bAK_AnsyuKihon1.getBAKDattaiUktk();
        exStringEquals(bAK_DattaiUktk1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_DattaiUktk1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_DattaiUktk1.getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_DattaiUktk1.getSyoriYmd(), BizDate.valueOf("20151001"), "処理年月日");
        exClassificationEquals(bAK_DattaiUktk1.getDattaikeiro(), C_Dattaikeiro.CREDIT, "脱退経路");
        exClassificationEquals(bAK_DattaiUktk1.getDattairiyuukbn(), C_DattairiyuuKbn.OTHER, "脱退理由区分");
        exDateYMEquals(bAK_DattaiUktk1.getDattaiym(), BizDateYM.valueOf("201510"), "脱退年月");
        exStringEquals(bAK_DattaiUktk1.getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_DattaiUktk1.getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_DattaiUktk1.getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_DattaiUktk1.getKouzano(), "1234567", "口座番号");
        exClassificationEquals(bAK_DattaiUktk1.getHurihunokbn(), C_HurihunoKbn.ITKTUGOU, "振替不能理由区分");
        exDateEquals(bAK_DattaiUktk1.getHurikaeymd(), BizDate.valueOf("20150604"), "振替日");
        exClassificationEquals(bAK_DattaiUktk1.getCreditdatakbn(), C_CreditdataKbn.URIAGE, "クレジットデータ区分");
        exStringEquals(bAK_DattaiUktk1.getCreditcardno1(), "12345678901", "クレジットカード番号１");
        exStringEquals(bAK_DattaiUktk1.getCreditcardno2(), "12345678902", "クレジットカード番号２");
        exStringEquals(bAK_DattaiUktk1.getCreditcardno3(), "12345678903", "クレジットカード番号３");
        exStringEquals(bAK_DattaiUktk1.getCreditcardno4(), "12345678904", "クレジットカード番号４");
        exClassificationEquals(bAK_DattaiUktk1.getCreditbrerrorcd(), C_Creditbrerrorcd.G97, "クレジット払エラーコード");
        exDateYMEquals(bAK_DattaiUktk1.getJkipjytym(), BizDateYM.valueOf("201512"), "次回Ｐ充当年月");
        exStringEquals(bAK_DattaiUktk1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_DattaiUktk1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_DattaiUktk1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_SyuunouHenknRireki> bAK_SyuunouHenknRireki1 = bAK_AnsyuKihon1.getBAKSyuunouHenknRirekis();
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getDenrenno(), "9999999999", "伝票データ連番");
        exNumericEquals(bAK_SyuunouHenknRireki1.get(0).getEdano(), 1, "枝番号");
        exDateEquals(bAK_SyuunouHenknRireki1.get(0).getDenkihyouymd(), BizDate.valueOf("20150101"), "伝票起票日");
        exDateEquals(bAK_SyuunouHenknRireki1.get(0).getShrymd(), BizDate.valueOf("20150102"), "支払日");
        exClassificationEquals(bAK_SyuunouHenknRireki1.get(0).getKanjyoukmkcd(), C_Kanjyoukmkcd.SONOTAKARIBARAIKIN_GAIHO, "勘定科目コード");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getBankcd(), "1234", "銀行コード");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getSitencd(), "123", "支店コード");
        exClassificationEquals(bAK_SyuunouHenknRireki1.get(0).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getKouzano(), "1234567", "口座番号");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）１", "口座名義人氏名（カナ）");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getCreditcardno1(), "9999999901", "クレジットカード番号１");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getCreditcardno2(), "9999999902", "クレジットカード番号２");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getCreditcardno3(), "9999999903", "クレジットカード番号３");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getCreditcardno4(), "9999999904", "クレジットカード番号４");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_SyuunouHenknRireki1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_Tokusin bAK_Tokusin1 = bAK_AnsyuKihon1.getBAKTokusin();
        exStringEquals(bAK_Tokusin1.getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_Tokusin1.getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_Tokusin1.getTrkssikibetukey(), "12345", "取消識別キー");
        exClassificationEquals(bAK_Tokusin1.getTokusinkbn(), C_TokusinKbn.HISAIGAI, "特伸区分");
        exDateEquals(bAK_Tokusin1.getTokusinsyoriymd(), BizDate.valueOf("20151101"), "特伸処理年月日");
        exDateEquals(bAK_Tokusin1.getTokusinendymd(), BizDate.valueOf("20151102"), "特伸終了日");
        exStringEquals(bAK_Tokusin1.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_Tokusin1.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_Tokusin1.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exDateEquals(bAK_SmbcStyKanri1.get(0).getDatarenymd(), BizDate.valueOf("20151016"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri1.get(0).getDatasakuseirenno(), BizNumber.valueOf(1234567));
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri1.get(0).getRendouflg(), C_Rendouflg.RENDOUZUMI, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcdatakbn(), "7", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcdatasakuseiymd(), "20151011", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbchknkaisyacd(), "55", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcuktkkanriid(), "1234567890", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihouktkzmymd(), "20151012", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihohbymd(), "20151013", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcbankhnkykflg(), "1", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihohbksyymd(), "20151014", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihohjyttykymd(), "20151015", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihonyknzmymd(), "20151016", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihosnszmymd(), "20151017", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihosyknhkkzmymd(), "20151018", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihosyumoku(), "15", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihosyurui(), "16", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcsyono(), "12806345672", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcsyonoedaban(), "00001", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcjktkflg(), "0", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihotrksymd(), "20151019", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihohktymd(), "20151020", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbckykseiymd(), "20151021", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）１", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcmosuktymd(), "20151022", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbckosyaareastyknr(), "12121212121212", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        exStringEquals(bAK_KhHenkouUktk1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk1.get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk1.get(0).getUktkymd(), BizDate.valueOf("20180102"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getTourokuroute(), C_TourokuRouteKbn.DS, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getUktksyorikbn(), C_UktkSyoriKbn.KAIYAKU, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk1.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20180202"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk1.get(0).getSyoriyoteiymd(), BizDate.valueOf("20180302"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.MISYORI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getInputshrhousiteikbn(), C_InputShrhousiteiKbn.FBSOUKIN, "入力用支払方法指定区分");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getBankcd(), "1002", "銀行コード");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getSitencd(), "102", "支店コード");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getYokinkbn(), C_YokinKbn.HUTUU, "預金種目区分");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKouzano(), "201801250002", "口座番号");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKzdoukbn(), C_Kzdou.DOUITU, "口座名義人同一区分");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKzmeiginmkn(), "テスト名義人２", "口座名義人氏名（カナ）");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkymd(), BizDate.valueOf("20180102"), "円建変更日");
        exDateEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttymd(), BizDate.valueOf("20180202"), "目標額到達日");
        exBizCalcbleEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttkaiyakuhr(), BizCurrency.valueOf(112000), "目標額到達時解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewkaiyakuhr(), BizCurrency.valueOf(122000), "変更後解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkhr(), BizCurrency.valueOf(132000), "円建変更時返戻金");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNyuuryokuhassoukbn(), C_HassouKbn.TYOKUSOU, "入力発送区分");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu1(), C_HnskariyuuKbn.YENDTHNKHR_ARI, "本社回送理由１");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu2(), C_HnskariyuuKbn.JIMU_ARI, "本社回送理由２");
        exBizCalcbleEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhrgaika(), BizCurrency.valueOf(142000), "円建変更時解約返戻金（外貨）");
        exBizCalcbleEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhryen(), BizCurrency.valueOf(152000), "円建変更時解約返戻金（円貨）");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhncd(), "1002", "変更後商品コード");
        exNumericEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhnsdno(), 12, "変更後商品世代番号");
        exBizCalcbleEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkihons(), BizCurrency.valueOf(162000), "円建変更後基本Ｓ");
        exBizCalcbleEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewhokenryou(), BizCurrency.valueOf(172000), "変更後保険料");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewkyktuukasyu(), C_Tuukasyu.USD, "変更後契約通貨種類");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewryouritusdno(), "102", "変更後料率世代番号");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri1.get(0).getRenno(), 2, "連番");
        exClassificationEquals(bAK_KhHaitouKanri1.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE1, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri1.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri1.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2010"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(0).getTounendod(), BizCurrency.valueOf(20000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri1.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri1.get(0).getKariwariatedshrymd(), BizDate.valueOf("20180102"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(0).getKariwariatedruigk(), BizCurrency.valueOf(30000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(2000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(6000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getGyoumuKousinTime(), "20181018111111112", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri1.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20180102"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri1.get(0).getRenno(), 2, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri1.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.RISOKUKURIIRE, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri1.get(0).getTumitated(), BizCurrency.valueOf(30000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri1.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20180202"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri1.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getGyoumuKousinTime(), "20181018111111112", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getKbnkey(), "07", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getNyuukinkakusyouno(), "12312432315223341232", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData1.get(0).getNyksyoriymd(), BizDate.valueOf("20180102"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData1.get(0).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180202"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getNykkeiro(), C_Nykkeiro.KZHRK, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getHrkkaisuu(), C_Hrkkaisuu.TUKI, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.KEIZOKUP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData1.get(0).getJyuutouym(), BizDateYM.valueOf("201802"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData1.get(0).getJyutoukaisuuy(), 2, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData1.get(0).getJyutoukaisuum(), 9, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData1.get(0).getRsgaku(), BizCurrency.valueOf(20000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData1.get(0).getRyosyuymd(), BizDate.valueOf("20180302"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getDenrenno(), "10000000000000000002", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData1.get(0).getNykdenymd(), BizDate.valueOf("20180402"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getSuitoubumoncd(), "102", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getKzhurikaebankcd(), "1002", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getKzhurikaesitencd(), "202", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getTabakarikanjyono(), "02", "束仮勘定番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getNyuukinkakusyounrkno(), "10000002", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.EGSYOKUIN, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getSuitososhikicd(), "1000002", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getGyoumuKousinTime(), "20181018111111112", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki1.get(0).getDshrtoukeisikibetukey(), "12312432315223341232", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki1.get(0).getSyono(), "12806345672", "証券番号");
        exStringEquals(bAK_KhDshrTuki1.get(0).getTrkssikibetukey(), "12345", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki1.get(0).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki1.get(0).getHenkousikibetukey(), "101", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki1.get(0).getSyoriYmd(), BizDate.valueOf("20190102"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getSyorikbn(), C_SyoriKbn.CLGOFF, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exStringEquals(bAK_KhDshrTuki1.get(0).getSyouhncd(), "1001", "商品コード");
        exNumericEquals(bAK_KhDshrTuki1.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getKykjyoutai(), C_Kykjyoutai.HRKMTYUU, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.CLGOFF, "消滅事由");
        exDateEquals(bAK_KhDshrTuki1.get(0).getKykymd(), BizDate.valueOf("20190402"), "契約日");
        exDateEquals(bAK_KhDshrTuki1.get(0).getYendthnkymd(), BizDate.valueOf("20190502"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKihons(), BizCurrency.valueOf(999992), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki1.get(0).getYoteiriritu(), BizNumber.valueOf(1.22));
        exDateEquals(bAK_KhDshrTuki1.get(0).getDenymd(), BizDate.valueOf("20190602"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getSiharaid(), BizCurrency.valueOf(888882), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki1.get(0).getCalckijyunymd(), BizDate.valueOf("20190702"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki1.get(0).getSyoriymd2(), BizDate.valueOf("20190802"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki1.get(0).getJkipjytym(), BizDateYM.valueOf("201904"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki1.get(0).getKinoubetukijyunymd(), BizDate.valueOf("20190902"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki1.get(0).getGengkwari(), BizNumber.valueOf(0.12));
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getItibushrgk(), BizCurrency.valueOf(112), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getHaitoushrkin(), BizCurrency.valueOf(222), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedruigk(), BizCurrency.valueOf(332), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(442), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(552), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getDkeisanhaitoukin(), BizCurrency.valueOf(662), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki1.get(0).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getHaitoushrkingk(), BizCurrency.valueOf(12), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedganrikindshr(), BizCurrency.valueOf(23), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTumitated(), BizCurrency.valueOf(34), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTumitatedmodosimae(), BizCurrency.valueOf(45), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTumitatedmodosigo(), BizCurrency.valueOf(56), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTkbthaitou(), BizCurrency.valueOf(67), "特別配当");
        exDateYEquals(bAK_KhDshrTuki1.get(0).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE1, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki1.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTounendod(), BizCurrency.valueOf(442), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki1.get(0).getKariwariatedshrymd(), BizDate.valueOf("20201002"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedruigk2(), BizCurrency.valueOf(552), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedgngkkngk2(), BizCurrency.valueOf(662), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedshrgk2(), BizCurrency.valueOf(772), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20201102"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.RISOKUKURIIRE, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTumitated2(), BizCurrency.valueOf(882), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki1.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20191202"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getHaitouganrikincalckari(), BizCurrency.valueOf(992), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki1.get(0).getKariwariatedriritu1(), BizNumber.valueOf(0.212));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki1.get(0).getKariwariatedriritu2(), BizNumber.valueOf(0.112));
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getHaitouganrikincalctumi(), BizCurrency.valueOf(22222), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki1.get(0).getTumitatedriritu1(), BizNumber.valueOf(0.132));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki1.get(0).getTumitatedriritu2(), BizNumber.valueOf(0.142));
        exStringEquals(bAK_KhDshrTuki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki1.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki1.get(0).getGyoumuKousinTime(), "20181018111111112", "業務用更新時間");
    }

    @Test
    @Transactional
    @TestOrder(30)
    public void testTableMaintenanceUtil_backUp_1_3() {

        newData();

        deleteBackupData();

        kinou.setKinouKbn(C_KinouKbn.BATCH);

        tableMaintenanceUtil.backUp("12806345683", "12346");

        bAK_KykKihon = tableMaintenanceUtil.getBakKykKihon();

        bAK_AnsyuKihon = tableMaintenanceUtil.getBakAnsyuKihon();

        bAK_KhDenpyoData = tableMaintenanceUtil.getBakKhDenpyoDataList();

        bAK_KhFBSoukinData = tableMaintenanceUtil.getBakKhFBSoukinDataList();

        bAK_KhGaikaFBSoukinData = tableMaintenanceUtil.getBakKhGaikaFBSoukinDataList();

        bAK_KhSntkInfoTouroku = tableMaintenanceUtil.getBakKhSntkInfoTourokuList();

        bAK_SmbcStyKanri = tableMaintenanceUtil.getBakSmbcStyKanriList();

        bAK_KhHenkouUktk = tableMaintenanceUtil.getBakKhHenkouUktkList();

        bAK_KhHaitouKanri = tableMaintenanceUtil.getBakKhHaitouKanriList();

        bAK_KhTumitateDKanri = tableMaintenanceUtil.getBakKhTumitateDKanriList();

        bAK_NyuukinKakusyouData = tableMaintenanceUtil.getBakNyuukinKakusyouDataList();

        bAK_KhDshrTuki = tableMaintenanceUtil.getBakKhDshrTukiList();

        exStringEquals(bAK_KykKihon.getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_KykKihon.getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KykKihon.getTrkssikibetukey(), "12346", "取消識別キー");
        exStringEquals(bAK_KykKihon.getAitesyono(), "12806345683", "相手証券番号");
        exClassificationEquals(bAK_KykKihon.getHaitoukbn(), C_HaitouKbn.YUUHAI, "配当区分");
        exClassificationEquals(bAK_KykKihon.getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(bAK_KykKihon.getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exClassificationEquals(bAK_KykKihon.getSdpdkbn(), C_Sdpd.SD, "Ｓ建Ｐ建区分");
        exClassificationEquals(bAK_KykKihon.getDntryouritukbn(), C_DntryourituKbn.B, "団体料率区分");
        exStringEquals(bAK_KykKihon.getDntcd(), "002", "団体コード");
        exClassificationEquals(bAK_KykKihon.getSntkhoukbn(), C_SntkhouKbn.KKT, "選択方法区分");
        exClassificationEquals(bAK_KykKihon.getSinsakbn(), C_SinsaKbn.KNKSINDANKEKKATUUTIS, "診査区分");
        exDateEquals(bAK_KykKihon.getMosymd(), BizDate.valueOf("20150201"), "申込日");
        exDateEquals(bAK_KykKihon.getKktymd(), BizDate.valueOf("20150302"), "告知日");
        exDateEquals(bAK_KykKihon.getFstpnyknymd(), BizDate.valueOf("20150403"), "初回保険料入金日");
        exDateEquals(bAK_KykKihon.getMosukeymd(), BizDate.valueOf("20150504"), "申込書受付日");
        exDateEquals(bAK_KykKihon.getMosjimosuktymd(), BizDate.valueOf("20150605"), "申込時申込書受付日");
        exDateEquals(bAK_KykKihon.getSeirituymd(), BizDate.valueOf("20150706"), "成立日");
        exDateEquals(bAK_KykKihon.getItiprsymd(), BizDate.valueOf("20150807"), "１Ｐ領収予定日");
        exBizCalcbleEquals(bAK_KykKihon.getHrkp(), BizCurrency.valueOf(10001), "払込保険料");
        exDateYMEquals(bAK_KykKihon.getBosyuuym(), BizDateYM.valueOf("201502"), "募集年月");
        exDateYMEquals(bAK_KykKihon.getSeisekiym(), BizDateYM.valueOf("201504"), "成績計上年月");
        exDateYMEquals(bAK_KykKihon.getSkeikeijyouym(), BizDateYM.valueOf("201506"), "新契約計上年月");
        exStringEquals(bAK_KykKihon.getPlancd(), "003", "プランコード");
        exNumericEquals(bAK_KykKihon.getPlanrenno(), 02, "プラン連番");
        exClassificationEquals(bAK_KykKihon.getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exClassificationEquals(bAK_KykKihon.getSyusaiumu(), C_UmuKbn.NONE, "出再有無");
        exClassificationEquals(bAK_KykKihon.getStknsetkbn(), C_StknsetKbn.ARI, "質権設定区分");
        exClassificationEquals(bAK_KykKihon.getKykksykjyumu(), C_UmuKbn.ARI, "契約者貸付約定有無");
        exClassificationEquals(bAK_KykKihon.getKykksumu(), C_UmuKbn.NONE, "契約者貸付有無");
        exClassificationEquals(bAK_KykKihon.getAplkahikbn(), C_Aplkahi.KIBOU, "ＡＰＬ可否区分");
        exClassificationEquals(bAK_KykKihon.getAplumu(), C_UmuKbn.ARI, "ＡＰＬ有無");
        exClassificationEquals(bAK_KykKihon.getFstphrkkeirokbn(), C_FstphrkkeiroKbn.KOUHURI, "初回保険料払込経路区分");
        exDateYEquals(bAK_KykKihon.getHaitounendo(), BizDateY.valueOf("2015"), "配当年度");
        exClassificationEquals(bAK_KykKihon.getHaitoukinuketorihoukbn(), C_HaitoukinuketorihouKbn.TUMIHAI, "配当金受取方法区分");
        exClassificationEquals(bAK_KykKihon.getTratkityuiumu(), C_UmuKbn.NONE, "取扱注意有無");
        exStringEquals(bAK_KykKihon.getTratkityuiuny(), "取扱注意内容２", "取扱注意内容");
        exNumericEquals(bAK_KykKihon.getSbuktnin(), 3, "死亡受取人人数");
        exStringEquals(bAK_KykKihon.getGansindankakuteiymd(), "20150908", "がん診断確定日");
        exClassificationEquals(bAK_KykKihon.getMosuketukekbn(), C_MosUketukeKbn.SEIHOWEB, "申込受付区分");
        exClassificationEquals(bAK_KykKihon.getKijikbn(), C_KijiKbn.ARI, "記事区分");
        exStringEquals(bAK_KykKihon.getHhknsykgycd(), "102", "被保険者職業コード");
        exClassificationEquals(bAK_KykKihon.getHhknnensyuukbn(), C_NensyuuKbn.UNDER700, "被保険者年収区分");
        exStringEquals(bAK_KykKihon.getDrtenkanritodoufukencd(), "35", "代理店管理都道府県コード");
        exStringEquals(bAK_KykKihon.getCifcd(), "004", "ＣＩＦコード");
        exStringEquals(bAK_KykKihon.getSmbckanriid(), "006", "ＳＭＢＣ受付管理ＩＤ");
        exClassificationEquals(bAK_KykKihon.getTsryhshrkykumukbn(), C_UmuKbn.ARI, "手数料不支払契約有無区分");
        exClassificationEquals(bAK_KykKihon.getKykhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.PASSPORT, "契約者本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getSkskknhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.PASSPORT, "親権者後見人本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getBoskykjyoutai(), C_Boskykjyoutai.KOUSEIINKYK, "募集契約状態");
        exNumericEquals(bAK_KykKihon.getKanyuusyano(), 8, "加入者番号");
        exClassificationEquals(bAK_KykKihon.getDrctservicemoskbn(), C_DirectServiceMosKbn.ENTRY, "ダイレクトサービス申込区分");
        exClassificationEquals(bAK_KykKihon.getSksyoukenskskbn(), C_SkSyoukenSksKbn.SINKISAKUSEI, "新契約証券作成区分");
        exDateEquals(bAK_KykKihon.getSinkyksyokensakuseiymd(), BizDate.valueOf("20200101"), "新契約証券作成日");
        exDateEquals(bAK_KykKihon.getSyoyousinkyksyohakkouymd(), BizDate.valueOf("20210101"), "証券用新契約証券発行日");
        exStringEquals(bAK_KykKihon.getSkjmosno(), "1000002", "新契約時申込番号");
        exClassificationEquals(bAK_KykKihon.getNkuikosumikbn(), C_NkIkouzumiKbn.BLNK, "年金移行済区分");
        exDateEquals(bAK_KykKihon.getSyhenkouymd(), BizDate.valueOf("20151009"), "最終変更日");
        exDateEquals(bAK_KykKihon.getLastsyosaihkymd(), BizDate.valueOf("20151110"), "最終証券再発行日");
        exDateEquals(bAK_KykKihon.getLastmeihenymd(), BizDate.valueOf("20151211"), "最終名義変更日");
        exDateEquals(bAK_KykKihon.getLastkykmeighnkymd(), BizDate.valueOf("20151211"), "最終契約者名義変更日");
        exDateEquals(bAK_KykKihon.getLastsbukthenymd(), BizDate.valueOf("20151211"), "最終死亡受取人変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmseiymdhenkouymd(), null, "最終契約者名生年月日変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmkanakjteiymd(), BizDate.valueOf("20150113"), "最終契約者名仮名漢字訂正日");
        exDateEquals(bAK_KykKihon.getLasttsinynohenkouymd(), BizDate.valueOf("20150114"), "最終通信先郵便番号変更日");
        exDateEquals(bAK_KykKihon.getLastjyuuhenymd(), BizDate.valueOf("20151213"), "最終住所変更日");
        exStringEquals(bAK_KykKihon.getGyoumuKousinKinou(), "test2", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinsyaId(), "testuser2", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinTime(), "20150714111111101", "業務用更新時間");

        IT_BAK_CreditCard bAK_CreditCard = bAK_KykKihon.getBAKCreditCard();
        assertNull(bAK_CreditCard);
        List<IT_BAK_FatcaInfo> bAK_FatcaInfo = bAK_KykKihon.getBAKFatcaInfos();
        exNumericEquals(bAK_FatcaInfo.size(), 0, "件数");
        IT_BAK_HhknSya bAK_HhknSya = bAK_KykKihon.getBAKHhknSya();
        exStringEquals(bAK_HhknSya.getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_HhknSya.getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_HhknSya.getTrkssikibetukey(), "12346", "取消識別キー");
        exStringEquals(bAK_HhknSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_HhknSya.getHhknsakuinmeino(), "1000000001", "被保険者索引名番号");
        exStringEquals(bAK_HhknSya.getHhknnmkn(), "被保険者名（本ＴＢＬ）", "被保険者名（カナ）");
        exStringEquals(bAK_HhknSya.getHhknnmkj(), "被保険者名漢字１", "被保険者名（漢字）");
        exClassificationEquals(bAK_HhknSya.getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(bAK_HhknSya.getHhknseiymd(), BizDate.valueOf("20150301"), "被保険者生年月日");
        exClassificationEquals(bAK_HhknSya.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exStringEquals(bAK_HhknSya.getHhknyno(), "3334444", "被保険者郵便番号");
        exStringEquals(bAK_HhknSya.getHhknadr1kn(), "被保険者住所１カナ１", "被保険者住所１（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr1kj(), "被保険者住所１漢字１", "被保険者住所１（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr2kn(), "被保険者住所２カナ１", "被保険者住所２（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr2kj(), "被保険者住所２漢字１", "被保険者住所２（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr3kn(), "被保険者住所３カナ１", "被保険者住所３（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr3kj(), "被保険者住所３漢字１", "被保険者住所３（漢字）");
        exStringEquals(bAK_HhknSya.getHhkntelno(), null, "被保険者電話番号");
        exStringEquals(bAK_HhknSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        List<IT_BAK_Kariukekin> bAK_Kariukekin = bAK_KykKihon.getBAKKariukekins();
        exNumericEquals(bAK_Kariukekin.size(), 0, "件数");
        List<IT_BAK_KhLincSousinInfo> bAK_KhLincSousinInfo = bAK_KykKihon.getBAKKhLincSousinInfos();
        exNumericEquals(bAK_KhLincSousinInfo.size(), 0, "件数");
        IT_BAK_KhTtdkTyuui bAK_KhTtdkTyuui = bAK_KykKihon.getBAKKhTtdkTyuui();
        assertNull(bAK_KhTtdkTyuui);
        List<IT_BAK_KihrkmpSeisanRireki> bAK_KihrkmpSeisanRireki = bAK_KykKihon.getBAKKihrkmpSeisanRirekis();
        exNumericEquals(bAK_KihrkmpSeisanRireki.size(), 0, "件数");
        List<IT_BAK_KoujyoSymKanri> bAK_KoujyoSymKanri = bAK_KykKihon.getBAKKoujyoSymKanris();
        exNumericEquals(bAK_KoujyoSymKanri.size(), 0, "件数");
        List<IT_BAK_KoujyoSymNaiyou> bAK_KoujyoSymNaiyou = bAK_KykKihon.getBAKKoujyoSymNaiyous();
        exNumericEquals(bAK_KoujyoSymNaiyou.size(), 0, "件数");
        IT_BAK_Kouza bAK_Kouza = bAK_KykKihon.getBAKKouza();
        assertNull(bAK_Kouza);
        IT_BAK_TeikikinKouza bAK_TeikikinKouza = bAK_KykKihon.getBAKTeikikinKouza();
        assertNull(bAK_TeikikinKouza);
        List<IT_BAK_KykDairiten> bAK_KykDairiten = bAK_KykKihon.getBAKKykDairitens();
        exNumericEquals(bAK_KykDairiten.size(), 0, "件数");
        IT_BAK_KykSonotaTkyk bAK_KykSonotaTkyk = bAK_KykKihon.getBAKKykSonotaTkyk();
        exStringEquals(bAK_KykSonotaTkyk.getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_KykSonotaTkyk.getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KykSonotaTkyk.getTrkssikibetukey(), "12346", "取消識別キー");
        exClassificationEquals(bAK_KykSonotaTkyk.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getStdrsktkyhkumu(), C_UmuKbn.NONE, "指定代理請求特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getStdrsktkyhkymd(), BizDate.valueOf("20150101"), "指定代理請求特約付加日");
        exClassificationEquals(bAK_KykSonotaTkyk.getYennykntkhkumu(), C_UmuKbn.ARI, "円入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getGaikanykntkhkumu(), C_UmuKbn.ARI, "外貨入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getYenshrkykkykhenkoymd(), BizDate.valueOf("20100101"), "円支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkgkkateitkumu(), C_UmuKbn.NONE, "年金額確定特約有無");
        assertEquals("年金総額保証割合", bAK_KykSonotaTkyk.getNksgkhosyuwari(), BizNumber.valueOf(25));
        exClassificationEquals(bAK_KykSonotaTkyk.getSkjbrnktsumu(), C_UmuKbn.NONE, "即時払年金特則有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku8waritkumu(), C_UmuKbn.ARI, "年金額８割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku9waritkumu(), C_UmuKbn.NONE, "年金額９割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkyentkhukaumu(), C_UmuKbn.ARI, "年金円支払特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getKwsttkhukaumu(), C_UmuKbn.NONE, "為替ターゲット特約付加有無");
        exNumericEquals(bAK_KykSonotaTkyk.getKwstargetrate(), 19, "為替ターゲットレート");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkhkumu(), C_UmuKbn.ARI, "ターゲット特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getTargettkykkykhenkoymd(), BizDate.valueOf("20100101"), "ターゲット特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkkbn(), C_TargetTkKbn.SYUUSIN, "ターゲット特約区分");
        exNumericEquals(bAK_KykSonotaTkyk.getTargettkmokuhyouti(), 123, "ターゲット特約目標値");
        exClassificationEquals(bAK_KykSonotaTkyk.getYsknkshtkumu(), C_UmuKbn.ARI, "新遺族年金支払特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkkykymd(), BizDate.valueOf("20150104"), "保険料免除特約契約日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtksknnkaisiymd(), BizDate.valueOf("20150105"), "保険料免除特約責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkgansknnkaisiymd(), BizDate.valueOf("20150106"), "保険料免除特約がん責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmhktsknnkaisiymd(), BizDate.valueOf("20150107"), "保険料免除特約復活責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjhktgansknnkaisiymd(), BizDate.valueOf("20150108"), "保険料免除特約復活がん責任開始日");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd1(), "111", "保険料免除特約不担保部位コード１");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn1(), C_Htnpkkn.ONE, "保険料免除特約不担保期間１");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd2(), "222", "保険料免除特約不担保部位コード２");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn2(), C_Htnpkkn.TOW, "保険料免除特約不担保期間２");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd3(), "333", "保険料免除特約不担保部位コード３");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn3(), C_Htnpkkn.THREE, "保険料免除特約不担保期間３");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd4(), "444", "保険料免除特約不担保部位コード４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn4(), C_Htnpkkn.FOUR, "保険料免除特約不担保期間４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "保険料免除特約特定高度障害不担保区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getSknnkaisikitkkbn(), C_SknnkaisikitkKbn.SKNNKAISIKITK, "責任開始期特約区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getNkshrtkykhenkoymd(), BizDate.valueOf("20100101"), "年金支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukkn(), 10, "年金支払特約年金期間");

        exClassificationEquals(bAK_KykSonotaTkyk.getInitsbjiyensitihsytkhukaumu(), null, "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(bAK_KykSonotaTkyk.getInitsbjiyenkasaiteihsygk(), null, "初期死亡時円換算最低保証額");
        exClassificationEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaumu(), null, "重度介護前払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaymd(),  null, "重度介護前払特約付加日");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        IT_BAK_KykSya bAK_KykSya = bAK_KykKihon.getBAKKykSya();
        exStringEquals(bAK_KykSya.getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_KykSya.getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KykSya.getTrkssikibetukey(), "12346", "取消識別キー");
        exStringEquals(bAK_KykSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_KykSya.getKyksakuinmeino(), "1000000001", "契約者索引名番号");
        exStringEquals(bAK_KykSya.getKyknmkn(), "契約名カナ（本ＴＢＬ）", "契約者名（カナ）");
        exStringEquals(bAK_KykSya.getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exClassificationEquals(bAK_KykSya.getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exDateEquals(bAK_KykSya.getKykseiymd(), BizDate.valueOf("20150201"), "契約者生年月日");
        exClassificationEquals(bAK_KykSya.getKyksei(), C_Kyksei.FEMALE, "契約者性別");
        exClassificationEquals(bAK_KykSya.getKkkyktdk(), C_Tdk.SONOTA, "契約管理契約者続柄");
        exStringEquals(bAK_KykSya.getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_KykSya.getTsinadr1kn(), "通信先住所１カナ１", "通信先住所１（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr1kj(), "通信先住所１漢字１", "通信先住所１（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr2kn(), "通信先住所２カナ１", "通信先住所２（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr2kj(), "通信先住所２漢字１", "通信先住所２（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr3kn(), "通信先住所３カナ１", "通信先住所３（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr3kj(), "通信先住所３漢字１", "通信先住所３（漢字）");
        exStringEquals(bAK_KykSya.getTsintelno(), null, "通信先電話番号");
        exStringEquals(bAK_KykSya.getDai2tsintelno(), null, "第２通信先電話番号");
        exStringEquals(bAK_KykSya.getTsinmailaddress(), "test1@test.com", "通信先メールアドレス");
        exStringEquals(bAK_KykSya.getKinmusakinm(), "勤務先名１", "勤務先名");
        exClassificationEquals(bAK_KykSya.getHjndaiykkbn(), C_HjndaiykKbn.SYOTYOU, "法人代表者役職区分");
        exStringEquals(bAK_KykSya.getHjndaiyknm(), "法人代表者役職名１", "法人代表者役職名");
        exStringEquals(bAK_KykSya.getHjndainmkn(), "法人代表者名カナ１", "法人代表者名（カナ）");
        exStringEquals(bAK_KykSya.getHjndainmkj(), "法人代表者名漢字１", "法人代表者名（漢字）");
        exStringEquals(bAK_KykSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        List<IT_BAK_KykSyouhn> bAK_KykSyouhn = bAK_KykKihon.getBAKKykSyouhns();
        exNumericEquals(bAK_KykSyouhn.size(), 0, "件数");
        List<IT_BAK_KykUkt> bAK_KykUkt = bAK_KykKihon.getBAKKykUkts();
        exNumericEquals(bAK_KykUkt.size(), 0, "件数");
        List<IT_BAK_NyknJissekiRireki> bAK_NyknJissekiRireki = bAK_KykKihon.getBAKNyknJissekiRirekis();
        exNumericEquals(bAK_NyknJissekiRireki.size(), 0, "件数");
        List<IT_BAK_SyouhnTokujou> bAK_SyouhnTokujou = bAK_KykKihon.getBAKSyouhnTokujous();
        exNumericEquals(bAK_SyouhnTokujou.size(), 0, "件数");
        List<IT_BAK_YykIdouAnsyuCreditCard> bAK_YykIdouAnsyuCreditCard = bAK_KykKihon.getBAKYykIdouAnsyuCreditCards();
        exNumericEquals(bAK_YykIdouAnsyuCreditCard.size(), 0, "件数");
        List<IT_BAK_YykIdouNaiyoHrhnk> bAK_YykIdouNaiyoHrhnk = bAK_KykKihon.getBAKYykIdouNaiyoHrhnks();
        exNumericEquals(bAK_YykIdouNaiyoHrhnk.size(), 0, "件数");
        List<IT_BAK_YykIdouUktk> bAK_YykIdouUktk = bAK_KykKihon.getBAKYykIdouUktks();
        exNumericEquals(bAK_YykIdouUktk.size(), 0, "件数");
        List<IT_BAK_HengakuUnit> bAK_HengakuUnit = bAK_KykKihon.getBAKHengakuUnits();
        exNumericEquals(bAK_HengakuUnit.size(), 0, "件数");
        List<IT_BAK_KhTtdkRireki> bAK_KhTtdkRireki = bAK_KykKihon.getBAKKhTtdkRirekis();
        exNumericEquals(bAK_KhTtdkRireki.size(), 0, "件数");
        List<IT_BAK_Tesuuryou> bAK_Tesuuryou = bAK_KykKihon.getBAKTesuuryous();
        exNumericEquals(bAK_Tesuuryou.size(), 0, "件数");
        List<IT_BAK_KoujyoSym> bAK_KoujyoSym = bAK_KykKihon.getBAKKoujyoSyms();
        exNumericEquals(bAK_KoujyoSym.size(), 0, "件数");
        List<IT_BAK_Suiihyou> bAK_Suiihyou = bAK_KykKihon.getBAKSuiihyous();
        exNumericEquals(bAK_Suiihyou.size(), 0, "件数");
        List<IT_BAK_TtdkKan> bAK_TtdkKan = bAK_KykKihon.getBAKTtdkKans();
        exNumericEquals(bAK_TtdkKan.size(), 0, "件数");
        List<IT_BAK_HokenSyouken> bAK_HokenSyouken = bAK_KykKihon.getBAKHokenSyoukens();
        exNumericEquals(bAK_HokenSyouken.size(), 0, "件数");
        exNumericEquals(bAK_KykKihon.getBAKTrkKzks().size(), 0, "件数");
        exNumericEquals(bAK_KykKihon.getBAKCreditCardInfos().size(), 0, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKoujyoSymNaiyouDs().size(), 0, "件数");

        exStringEquals(bAK_KhDenpyoData.get(0).getDenrenno(), "12345678902", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(0).getHuridenatesakicd(), "103", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTantocd(), C_TantouCdKbn.IMUIMU, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(0).getDenymd(), BizDate.valueOf("20150415"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTaisyakukbn(), C_TaisyakuKbn.KARIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_SYOKAI_GAIHO_USD, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSuitoubumoncd(), "103", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDengaikagk(), BizCurrency.valueOf(20011), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(0).getDenkawaserate(), BizNumber.valueOf(103));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDenyenkagk(), BizCurrency.valueOf(1000000003), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getHuridenskskbn(), C_HuridensksKbn.HOZENYAKAN, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenhnknhoukbn(), C_DenhnknhouKbn.TUKEKAETUUTI, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenshrhoukbn(), C_DenshrhouKbn.FBSOUKIN, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(0).getSyoriYmd(), BizDate.valueOf("20150303"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyoricd(), "1003", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyorisosikicd(), "1000003", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg1cd(), C_Segcd.BLNK, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg2cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinsyaId(), "testuser2", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinTime(), "20150714111111112", "業務用更新時間");

        exStringEquals(bAK_KhDenpyoData.get(1).getDenrenno(), "12345678903", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(1).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(1).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(1).getHuridenatesakicd(), "104", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getTantocd(), C_TantouCdKbn.SOUKATU1, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(1).getDenymd(), BizDate.valueOf("20150416"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getTaisyakukbn(), C_TaisyakuKbn.KASIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_SYOKAI_GAIHO_AUD, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(1).getSuitoubumoncd(), "104", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(1).getDengaikagk(), BizCurrency.valueOf(20012), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(1).getDenkawaserate(), BizNumber.valueOf(104));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(1).getDenyenkagk(), BizCurrency.valueOf(1000000004), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getHuridenskskbn(), C_HuridensksKbn.KOBETU, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getDenhnknhoukbn(), C_DenhnknhouKbn.KOUZAHURIKOMI, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getDenshrhoukbn(), C_DenshrhouKbn.KARIUKERSKARI, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(1).getSyoriYmd(), BizDate.valueOf("20150404"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(1).getSyoricd(), "1004", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(1).getSyorisosikicd(), "1000004", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getSeg1cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getSeg2cd(), C_Segcd.BLNK, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(1).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(1).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(1).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData.get(1).getGyoumuKousinsyaId(), "testuser3", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(1).getGyoumuKousinTime(), "20150714111111113", "業務用更新時間");

        exStringEquals(bAK_KhFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678901", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getDenrenno(), "12345678902", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(0).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyoricd(), "1003", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyorisosikicd(), "1000003", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160303"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150425"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyono(), "12806345683", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_YOKUJITU, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getBankcd(), "1213", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSitencd(), "124", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getYokinkbn(), C_YokinKbn.HUTUU, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKouzano(), "7654322", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）２", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getSoukingk(), BizCurrency.valueOf(1000000003), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getGaikataikagk(), BizCurrency.valueOf(1000000003), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(3));

        exStringEquals(bAK_KhFBSoukinData.get(1).getFbsoukindatasikibetukey(), "12345678902", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(1).getDenrenno(), "12345678903", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(1).getEdano(), 3, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSyoricd(), "1004", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSyorisosikicd(), "1000004", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(1).getSyoriYmd(), BizDate.valueOf("20160404"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(1).getDenymd(), BizDate.valueOf("20150426"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSyono(), "12806345683", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_2EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(1).getBankcd(), "1214", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSitencd(), "125", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(1).getKouzano(), "7654323", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(1).getKzmeiginmkn(), "口座名義人氏名（カナ）３", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(1).getSoukingk(), BizCurrency.valueOf(1000000004), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(1).getGaikataikagk(), BizCurrency.valueOf(1000000004), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(1).getSoukinkwsrate(), BizNumber.valueOf(4));

        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678901", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getDenrenno(), "12345678902", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(0).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoricd(), "1003", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyorisosikicd(), "1000003", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160303"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150425"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyono(), "12806345683", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_YOKUJITU, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBankcd(), "1213", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBanknmej(), "bank3", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitencd(), "124", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitennmej(), "siten3", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKouzano(), "7654322", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getGaikashrgk(), BizCurrency.valueOf(3), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getCrossrateshrgk(), BizCurrency.valueOf(3), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(3));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getIrninnmei(), "irni2", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinKinou(), "test2", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinsyaId(), "testuser2", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinTime(), "20150714111111112", "業務用更新時間");

        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getFbsoukindatasikibetukey(), "12345678902", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getDenrenno(), "12345678903", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(1).getEdano(), 3, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSyoricd(), "1004", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSyorisosikicd(), "1000004", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(1).getSyoriYmd(), BizDate.valueOf("20160404"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(1).getDenymd(), BizDate.valueOf("20150426"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSyono(), "12806345683", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_2EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getBankcd(), "1214", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getBanknmej(), "bank4", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSitencd(), "125", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSitennmej(), "siten4", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getKouzano(), "7654323", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(1).getGaikashrgk(), BizCurrency.valueOf(4), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(1).getCrossrateshrgk(), BizCurrency.valueOf(4), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(1).getSoukinkwsrate(), BizNumber.valueOf(4));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getIrninnmei(), "irni3", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getGyoumuKousinKinou(), "test3", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getGyoumuKousinsyaId(), "testuser3", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getGyoumuKousinTime(), "20150714111111113", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getRenno(), 2, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getSyoriYmd(), BizDate.valueOf("20150102"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kykno(), "1000000003", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kyknokbn(), C_Huho2kyknoKbn.SYONO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyouhncd(), "1003", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkn(), "タイショウシャシメイ３", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkj(), "タイショウシャシメイ３", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseiymd(), BizDate.valueOf("20160303"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKetymd(), BizDate.valueOf("20150202"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getKetsyacd(), "33", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getPalketsyacd(), "33", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getSintyou(), 120, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getTaijyuu(), 60, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKktymd(), BizDate.valueOf("20150202"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd1(), "22", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym1(), BizDateYM.valueOf("201502"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd2(), "22", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym2(), BizDateYM.valueOf("201502"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinKinou(), "test2", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinsyaId(), "testuser2", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinTime(), "20150714111111112", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(1).getRenno(), 3, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getSyoriYmd(), BizDate.valueOf("20150103"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getHuho2kykno(), "1000000004", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getHuho2kyknokbn(), C_Huho2kyknoKbn.NKSYSYNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyouhncd(), "1004", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyounmkn(), "タイショウシャシメイ４", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyounmkj(), "タイショウシャシメイ４", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyouseiymd(), BizDate.valueOf("20160404"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getKetymd(), BizDate.valueOf("20150303"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getKetsyacd(), "44", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getPalketsyacd(), "44", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(1).getSintyou(), 130, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(1).getTaijyuu(), 70, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getKktymd(), BizDate.valueOf("20150303"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoucd1(), "33", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(1).getKantiym1(), BizDateYM.valueOf("201503"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoucd2(), "33", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(1).getKantiym2(), BizDateYM.valueOf("201503"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getGyoumuKousinKinou(), "test3", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getGyoumuKousinsyaId(), "testuser3", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getGyoumuKousinTime(), "20150714111111113", "業務用更新時間");


        exStringEquals(bAK_AnsyuKihon.getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_AnsyuKihon.getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_AnsyuKihon.getTrkssikibetukey(), "12346", "取消識別キー");
        exDateYMEquals(bAK_AnsyuKihon.getJkipjytym(), BizDateYM.valueOf("201502"), "次回Ｐ充当年月");
        exClassificationEquals(bAK_AnsyuKihon.getTkiktannaitukisuu(), C_Tkiktannaitukisuu.TWELVEMONTHS, "定期一括案内月数");
        exClassificationEquals(bAK_AnsyuKihon.getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.BLNK, "控除証明書発行済フラグ");
        exDateEquals(bAK_AnsyuKihon.getSyuharaimanymd(), BizDate.valueOf("20150402"), "主契約払満日");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinKinou(), "test2", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinsyaId(), "testuser2", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinTime(), "20150714111111101", "業務用更新時間");

        IT_BAK_AnsyuCreditCard bAK_AnsyuCreditCard = bAK_AnsyuKihon.getBAKAnsyuCreditCard();
        assertNull(bAK_AnsyuCreditCard);
        List<IT_BAK_AnsyuRireki> bAK_AnsyuRireki = bAK_AnsyuKihon.getBAKAnsyuRirekis();
        exNumericEquals(bAK_AnsyuRireki.size(), 0, "件数");
        IT_BAK_DattaiUktk bAK_DattaiUktk = bAK_AnsyuKihon.getBAKDattaiUktk();
        assertNull(bAK_DattaiUktk);
        List<IT_BAK_SyuunouHenknRireki> bAK_SyuunouHenknRireki = bAK_AnsyuKihon.getBAKSyuunouHenknRirekis();
        exNumericEquals(bAK_SyuunouHenknRireki.size(), 0, "件数");
        IT_BAK_Tokusin bAK_Tokusin = bAK_AnsyuKihon.getBAKTokusin();
        assertNull(bAK_Tokusin);

        exDateEquals(bAK_SmbcStyKanri.get(0).getDatarenymd(), BizDate.valueOf("20151011"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(0).getDatasakuseirenno(), BizNumber.valueOf(1234568));
        exStringEquals(bAK_SmbcStyKanri.get(0).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getMosno(),null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(0).getRendouflg(), C_Rendouflg.MIRENDOU, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatakbn(), "5", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatasakuseiymd(), "20151012", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbchknkaisyacd(), "56", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcuktkkanriid(), "1234567891", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihouktkzmymd(), "20151112", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbymd(), "20151213", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcbankhnkykflg(), "2", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbksyymd(), "20150114", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohjyttykymd(), "20150215", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihonyknzmymd(), "20150316", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosnszmymd(), "20150417", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyknhkkzmymd(), "20150518", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyumoku(), "20", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyurui(), "30", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyono(), "12806345683", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyonoedaban(), "00002", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcjktkflg(), "1", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihotrksymd(), "20150619", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohktymd(), "20150720", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckykseiymd(), "20150821", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）２", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmosuktymd(), "20150922", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckosyaareastyknr(), "12121212121201", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinKinou(), "test2", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinsyaId(), "testuser2", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinTime(), "20150714111111112", "業務用更新時間");

        exDateEquals(bAK_SmbcStyKanri.get(1).getDatarenymd(), BizDate.valueOf("20151012"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(1).getDatasakuseirenno(), BizNumber.valueOf(1234569));
        exStringEquals(bAK_SmbcStyKanri.get(1).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(1).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(1).getRendouflg(), C_Rendouflg.RENDOUZUMI, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcdatakbn(), "6", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcdatasakuseiymd(), "20151013", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbchknkaisyacd(), "57", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcuktkkanriid(), "1234567892", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihouktkzmymd(), "20151113", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohbymd(), "20151214", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcbankhnkykflg(), "3", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohbksyymd(), "20150115", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohjyttykymd(), "20150216", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihonyknzmymd(), "20150317", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosnszmymd(), "20150418", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosyknhkkzmymd(), "20150519", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosyumoku(), "21", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosyurui(), "31", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcsyono(), "12806345683", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcsyonoedaban(), "00003", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcjktkflg(), "2", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihotrksymd(), "20150620", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohktymd(), "20150721", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbckykseiymd(), "20150822", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）３", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcmosuktymd(), "20150923", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbckosyaareastyknr(), "12121212121202", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(1).getGyoumuKousinKinou(), "test3", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getGyoumuKousinsyaId(), "testuser3", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getGyoumuKousinTime(), "20150714111111113", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(0).getUktkymd(), BizDate.valueOf("20180103"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getTourokuroute(), C_TourokuRouteKbn.TEL, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktksyorikbn(), C_UktkSyoriKbn.BLNK, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20180203"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(0).getSyoriyoteiymd(), BizDate.valueOf("20180303"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.SYORIZUMI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(1).getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(1).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(1).getHozenhenkouuktkrenno(), 2, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(1).getUktkymd(), BizDate.valueOf("20180104"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getTourokuroute(), C_TourokuRouteKbn.BLNK, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getUktksyorikbn(), C_UktkSyoriKbn.KAIYAKU, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(1).getKouryokuhasseiymd(), BizDate.valueOf("20180204"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(1).getSyoriyoteiymd(), BizDate.valueOf("20180304"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.TORIKESI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KhHenkouUktkKaiyaku> bAK_KhHenkouUktkKaiyakuLst1 = bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus();
        exNumericEquals(bAK_KhHenkouUktkKaiyakuLst1.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkKaiyaku> bAK_KhHenkouUktkKaiyakuLst2 = bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus();
        exNumericEquals(bAK_KhHenkouUktkKaiyakuLst2.size(), 0, "件数");

        List<IT_BAK_KhHenkouUktkYendtHnk> bAK_KhHenkouUktkYendtHnkLst1 = bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks();
        exNumericEquals(bAK_KhHenkouUktkYendtHnkLst1.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkYendtHnk> bAK_KhHenkouUktkYendtHnkLst2 = bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks();
        exNumericEquals(bAK_KhHenkouUktkYendtHnkLst2.size(), 0, "件数");

        exStringEquals(bAK_KhHaitouKanri.get(0).getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(0).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(0).getRenno(), 3, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE2, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2011"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getTounendod(), BizCurrency.valueOf(30000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.NAITEI, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrymd(), BizDate.valueOf("20180103"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedruigk(), BizCurrency.valueOf(40000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(3000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(7000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinTime(), "20181018111111113", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri.get(1).getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(1).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(1).getRenno(), 4, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(1).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE3, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(1).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(1).getFstkariwariatednendo(), BizDateY.valueOf("2012"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getTounendod(), BizCurrency.valueOf(40000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(1).getKariwariatedshrymd(), BizDate.valueOf("20180104"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getKariwariatedruigk(), BizCurrency.valueOf(50000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getKariwariatedgngkkngk(), BizCurrency.valueOf(4000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getKariwariatedshrgk(), BizCurrency.valueOf(8000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(1).getGyoumuKousinTime(), "20181018111111114", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(0).getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20180103"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(0).getRenno(), 3, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.SEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(0).getTumitated(), BizCurrency.valueOf(40000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20180203"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.NAITEI, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinTime(), "20181018111111113", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(1).getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(1).getTumitatedtumitateymd(), BizDate.valueOf("20180104"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(1).getRenno(), 4, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(1).getTumitatedskskbn(), C_TumitateDSakuseiKbn.YENDTHNKSEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(1).getTumitated(), BizCurrency.valueOf(50000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(1).getTumitatedshrkrkymd(), BizDate.valueOf("20180204"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getGyoumuKousinTime(), "20181018111111114", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyouno(), "31241336214311243413", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyksyoriymd(), BizDate.valueOf("20180103"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180203"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNykkeiro(), C_Nykkeiro.CREDIT, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.ZENNOUP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getIktnyuukinnumu(), C_UmuKbn.NONE, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(0).getJyuutouym(), BizDateYM.valueOf("201803"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuuy(), 3, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuum(), 8, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(0).getRsgaku(), BizCurrency.valueOf(30000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getRyosyuymd(), BizDate.valueOf("20180303"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getDenrenno(), "10000000000000000003", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNykdenymd(), BizDate.valueOf("20180403"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitoubumoncd(), "103", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaebankcd(), "1003", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaesitencd(), "203", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTabakarikanjyono(), "03", "");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkno(), "10000003", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.OKYKSM_NYUUKIN, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitososhikicd(), "1000003", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinTime(), "20181018111111113", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(1).getKbnkey(), "08", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getNyuukinkakusyouno(), "31254123321523342152", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getNyksyoriymd(), BizDate.valueOf("20180104"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180204"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getNykkeiro(), C_Nykkeiro.CONVENI, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getNyknaiyoukbn(), C_NyknaiyouKbn.HENKOUGOP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(1).getJyuutouym(), BizDateYM.valueOf("201804"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(1).getJyutoukaisuuy(), 4, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(1).getJyutoukaisuum(), 7, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(1).getRsgaku(), BizCurrency.valueOf(40000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getRyosyuymd(), BizDate.valueOf("20180304"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getDenrenno(), "10000000000000000004", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getNykdenymd(), BizDate.valueOf("20180404"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getSuitoubumoncd(), "104", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getKzhurikaebankcd(), "1004", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getKzhurikaesitencd(), "204", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getTabakarikanjyono(), "04", "");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getNyuukinkakusyounrkno(), "10000004", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.OKYKSM_IKKATU, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getSuitososhikicd(), "1000004", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getGyoumuKousinTime(), "20181018111111114", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(0).getDshrtoukeisikibetukey(), "31241336214311243413", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(0).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(0).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(0).getHenkousikibetukey(), "102", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriYmd(), BizDate.valueOf("20190103"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyorikbn(), C_SyoriKbn.KAIJO, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHrkkeiro(), C_Hrkkeiro.DANTAI, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyouhncd(), "1002", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getKykjyoutai(), C_Kykjyoutai.HARAIMAN, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.KAIJO, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(0).getKykymd(), BizDate.valueOf("20190403"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(0).getYendthnkymd(), BizDate.valueOf("20190503"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKihons(), BizCurrency.valueOf(999993), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(0).getYoteiriritu(), BizNumber.valueOf(1.23));
        exDateEquals(bAK_KhDshrTuki.get(0).getDenymd(), BizDate.valueOf("20190603"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getSiharaid(), BizCurrency.valueOf(888883), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(0).getCalckijyunymd(), BizDate.valueOf("20190703"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriymd2(), BizDate.valueOf("20190803"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(0).getJkipjytym(), BizDateYM.valueOf("201905"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(0).getKinoubetukijyunymd(), BizDate.valueOf("20190903"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(0).getGengkwari(), BizNumber.valueOf(0.13));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getItibushrgk(), BizCurrency.valueOf(113), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkin(), BizCurrency.valueOf(223), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk(), BizCurrency.valueOf(333), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(443), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(553), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getDkeisanhaitoukin(), BizCurrency.valueOf(663), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkingk(), BizCurrency.valueOf(13), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedganrikindshr(), BizCurrency.valueOf(24), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated(), BizCurrency.valueOf(35), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosimae(), BizCurrency.valueOf(46), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosigo(), BizCurrency.valueOf(57), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTkbthaitou(), BizCurrency.valueOf(68), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE2, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTounendod(), BizCurrency.valueOf(443), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrymd(), BizDate.valueOf("20201003"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk2(), BizCurrency.valueOf(553), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk2(), BizCurrency.valueOf(663), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk2(), BizCurrency.valueOf(773), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20201103"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.SEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated2(), BizCurrency.valueOf(883), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20191203"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalckari(), BizCurrency.valueOf(993), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(0).getKariwariatedriritu1(), BizNumber.valueOf(0.213));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(0).getKariwariatedriritu2(), BizNumber.valueOf(0.113));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalctumi(), BizCurrency.valueOf(22223), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(0).getTumitatedriritu1(), BizNumber.valueOf(0.133));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(0).getTumitatedriritu2(), BizNumber.valueOf(0.143));
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinTime(), "20181018111111113", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(1).getDshrtoukeisikibetukey(), "31254123321523342152", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(1).getSyono(), "12806345683", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(1).getTrkssikibetukey(), "12346", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(1).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(1).getHenkousikibetukey(), "103", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(1).getSyoriYmd(), BizDate.valueOf("20190104"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getSyorikbn(), C_SyoriKbn.MENSEKI, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getHrkkeiro(), C_Hrkkeiro.SYUUDAN, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(1).getSyouhncd(), "1003", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(1).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getKykjyoutai(), C_Kykjyoutai.HARAIZUMI, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getSyoumetujiyuu(), C_Syoumetujiyuu.MENSEKI, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(1).getKykymd(), BizDate.valueOf("20190404"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(1).getYendthnkymd(), BizDate.valueOf("20190504"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKihons(), BizCurrency.valueOf(999994), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(1).getYoteiriritu(), BizNumber.valueOf(1.24));
        exDateEquals(bAK_KhDshrTuki.get(1).getDenymd(), BizDate.valueOf("20190604"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getSiharaid(), BizCurrency.valueOf(888884), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(1).getCalckijyunymd(), BizDate.valueOf("20190704"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(1).getSyoriymd2(), BizDate.valueOf("20190804"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(1).getJkipjytym(), BizDateYM.valueOf("201906"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(1).getKinoubetukijyunymd(), BizDate.valueOf("20190904"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(1).getGengkwari(), BizNumber.valueOf(0.14));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getItibushrgk(), BizCurrency.valueOf(114), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitoushrkin(), BizCurrency.valueOf(224), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedruigk(), BizCurrency.valueOf(334), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedgngkkngk(), BizCurrency.valueOf(444), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedshrgk(), BizCurrency.valueOf(554), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getDkeisanhaitoukin(), BizCurrency.valueOf(664), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(1).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitoushrkingk(), BizCurrency.valueOf(14), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedganrikindshr(), BizCurrency.valueOf(25), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitated(), BizCurrency.valueOf(36), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitatedmodosimae(), BizCurrency.valueOf(47), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitatedmodosigo(), BizCurrency.valueOf(58), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTkbthaitou(), BizCurrency.valueOf(69), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(1).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE3, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(1).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTounendod(), BizCurrency.valueOf(444), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(1).getKariwariatedshrymd(), BizDate.valueOf("20201004"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedruigk2(), BizCurrency.valueOf(554), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedgngkkngk2(), BizCurrency.valueOf(664), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedshrgk2(), BizCurrency.valueOf(774), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(1).getTumitatedtumitateymd(), BizDate.valueOf("20201104"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getTumitatedskskbn(), C_TumitateDSakuseiKbn.YENDTHNKSEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitated2(), BizCurrency.valueOf(884), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(1).getTumitatedshrkrkymd(), BizDate.valueOf("20191204"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitouganrikincalckari(), BizCurrency.valueOf(994), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(1).getKariwariatedriritu1(), BizNumber.valueOf(0.214));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(1).getKariwariatedriritu2(), BizNumber.valueOf(0.114));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitouganrikincalctumi(), BizCurrency.valueOf(22224), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(1).getTumitatedriritu1(), BizNumber.valueOf(0.134));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(1).getTumitatedriritu2(), BizNumber.valueOf(0.144));
        exStringEquals(bAK_KhDshrTuki.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(1).getGyoumuKousinTime(), "20181018111111114", "業務用更新時間");

    }

    @Test
    @Transactional
    @TestOrder(40)
    public void testTableMaintenanceUtil_backUp_1_4() {

        newData();

        deleteBackupData();

        kinou.setKinouKbn(C_KinouKbn.BATCH);

        tableMaintenanceUtil.backUp("12806345694", "12347");

        bAK_KykKihon = tableMaintenanceUtil.getBakKykKihon();

        bAK_AnsyuKihon = tableMaintenanceUtil.getBakAnsyuKihon();

        bAK_KhDenpyoData = tableMaintenanceUtil.getBakKhDenpyoDataList();

        bAK_KhFBSoukinData = tableMaintenanceUtil.getBakKhFBSoukinDataList();

        bAK_KhGaikaFBSoukinData = tableMaintenanceUtil.getBakKhGaikaFBSoukinDataList();

        bAK_KhSntkInfoTouroku = tableMaintenanceUtil.getBakKhSntkInfoTourokuList();

        bAK_SmbcStyKanri = tableMaintenanceUtil.getBakSmbcStyKanriList();

        bAK_KhHenkouUktk = tableMaintenanceUtil.getBakKhHenkouUktkList();

        bAK_KhHaitouKanri = tableMaintenanceUtil.getBakKhHaitouKanriList();

        bAK_KhTumitateDKanri = tableMaintenanceUtil.getBakKhTumitateDKanriList();

        bAK_NyuukinKakusyouData = tableMaintenanceUtil.getBakNyuukinKakusyouDataList();

        bAK_KhDshrTuki = tableMaintenanceUtil.getBakKhDshrTukiList();

        exStringEquals(bAK_KykKihon.getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KykKihon.getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KykKihon.getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KykKihon.getAitesyono(), "12806345694", "相手証券番号");
        exClassificationEquals(bAK_KykKihon.getHaitoukbn(), C_HaitouKbn.RISAHAI, "配当区分");
        exClassificationEquals(bAK_KykKihon.getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exClassificationEquals(bAK_KykKihon.getHrkkeiro(), C_Hrkkeiro.DANTAI, "払込経路");
        exClassificationEquals(bAK_KykKihon.getSdpdkbn(), C_Sdpd.GIJIPD, "Ｓ建Ｐ建区分");
        exClassificationEquals(bAK_KykKihon.getDntryouritukbn(), C_DntryourituKbn.A, "団体料率区分");
        exStringEquals(bAK_KykKihon.getDntcd(), "003", "団体コード");
        exClassificationEquals(bAK_KykKihon.getSntkhoukbn(), C_SntkhouKbn.HJY, "選択方法区分");
        exClassificationEquals(bAK_KykKihon.getSinsakbn(), C_SinsaKbn.KENKOUKANRISYOUMEISY, "診査区分");
        exDateEquals(bAK_KykKihon.getMosymd(), BizDate.valueOf("20150202"), "申込日");
        exDateEquals(bAK_KykKihon.getKktymd(), BizDate.valueOf("20150303"), "告知日");
        exDateEquals(bAK_KykKihon.getFstpnyknymd(), BizDate.valueOf("20150404"), "初回保険料入金日");
        exDateEquals(bAK_KykKihon.getMosukeymd(), BizDate.valueOf("20150505"), "申込書受付日");
        exDateEquals(bAK_KykKihon.getMosjimosuktymd(), BizDate.valueOf("20150606"), "申込時申込書受付日");
        exDateEquals(bAK_KykKihon.getSeirituymd(), BizDate.valueOf("20150707"), "成立日");
        exDateEquals(bAK_KykKihon.getItiprsymd(), BizDate.valueOf("20150808"), "１Ｐ領収予定日");
        exBizCalcbleEquals(bAK_KykKihon.getHrkp(), BizCurrency.valueOf(10002), "払込保険料");
        exDateYMEquals(bAK_KykKihon.getBosyuuym(), BizDateYM.valueOf("201503"), "募集年月");
        exDateYMEquals(bAK_KykKihon.getSeisekiym(), BizDateYM.valueOf("201505"), "成績計上年月");
        exDateYMEquals(bAK_KykKihon.getSkeikeijyouym(), BizDateYM.valueOf("201507"), "新契約計上年月");
        exStringEquals(bAK_KykKihon.getPlancd(), "004", "プランコード");
        exNumericEquals(bAK_KykKihon.getPlanrenno(), 03, "プラン連番");
        exClassificationEquals(bAK_KykKihon.getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exClassificationEquals(bAK_KykKihon.getSyusaiumu(), C_UmuKbn.ARI, "出再有無");
        exClassificationEquals(bAK_KykKihon.getStknsetkbn(), C_StknsetKbn.NONE, "質権設定区分");
        exClassificationEquals(bAK_KykKihon.getKykksykjyumu(), C_UmuKbn.NONE, "契約者貸付約定有無");
        exClassificationEquals(bAK_KykKihon.getKykksumu(), C_UmuKbn.ARI, "契約者貸付有無");
        exClassificationEquals(bAK_KykKihon.getAplkahikbn(), C_Aplkahi.NONE, "ＡＰＬ可否区分");
        exClassificationEquals(bAK_KykKihon.getAplumu(), C_UmuKbn.NONE, "ＡＰＬ有無");
        exClassificationEquals(bAK_KykKihon.getFstphrkkeirokbn(), C_FstphrkkeiroKbn.CREDIT, "初回保険料払込経路区分");
        exDateYEquals(bAK_KykKihon.getHaitounendo(), BizDateY.valueOf("2015"), "配当年度");
        exClassificationEquals(bAK_KykKihon.getHaitoukinuketorihoukbn(), C_HaitoukinuketorihouKbn.TUMIHAI, "配当金受取方法区分");
        exClassificationEquals(bAK_KykKihon.getTratkityuiumu(), C_UmuKbn.ARI, "取扱注意有無");
        exStringEquals(bAK_KykKihon.getTratkityuiuny(), "取扱注意内容３", "取扱注意内容");
        exNumericEquals(bAK_KykKihon.getSbuktnin(), 4, "死亡受取人人数");
        exStringEquals(bAK_KykKihon.getGansindankakuteiymd(), "20150909", "がん診断確定日");
        exClassificationEquals(bAK_KykKihon.getMosuketukekbn(), C_MosUketukeKbn.PAPERLESS, "申込受付区分");
        exClassificationEquals(bAK_KykKihon.getKijikbn(), C_KijiKbn.NONE, "記事区分");
        exStringEquals(bAK_KykKihon.getHhknsykgycd(), "103", "被保険者職業コード");
        exClassificationEquals(bAK_KykKihon.getHhknnensyuukbn(), C_NensyuuKbn.UNDER1000, "被保険者年収区分");
        exStringEquals(bAK_KykKihon.getDrtenkanritodoufukencd(), "36", "代理店管理都道府県コード");
        exStringEquals(bAK_KykKihon.getCifcd(), "005", "ＣＩＦコード");
        exStringEquals(bAK_KykKihon.getSmbckanriid(), "007", "ＳＭＢＣ受付管理ＩＤ");
        exClassificationEquals(bAK_KykKihon.getTsryhshrkykumukbn(), C_UmuKbn.NONE, "手数料不支払契約有無区分");
        exClassificationEquals(bAK_KykKihon.getKykhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.ZAIRYUUCARD, "契約者本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getSkskknhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.ZAIRYUUCARD, "親権者後見人本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getBoskykjyoutai(), C_Boskykjyoutai.TOKKYK, "募集契約状態");
        exNumericEquals(bAK_KykKihon.getKanyuusyano(), 9, "加入者番号");
        exClassificationEquals(bAK_KykKihon.getDrctservicemoskbn(), C_DirectServiceMosKbn.CHECK, "ダイレクトサービス申込区分");
        exClassificationEquals(bAK_KykKihon.getSksyoukenskskbn(), C_SkSyoukenSksKbn.SAISAKUSEI, "新契約証券作成区分");
        exDateEquals(bAK_KykKihon.getSinkyksyokensakuseiymd(), BizDate.valueOf("20300101"), "新契約証券作成日");
        exDateEquals(bAK_KykKihon.getSyoyousinkyksyohakkouymd(), BizDate.valueOf("20310101"), "証券用新契約証券発行日");
        exStringEquals(bAK_KykKihon.getSkjmosno(), "1000003", "新契約時申込番号");
        exClassificationEquals(bAK_KykKihon.getNkuikosumikbn(), C_NkIkouzumiKbn.NKIKOUZUMI, "年金移行済区分");
        exDateEquals(bAK_KykKihon.getSyhenkouymd(), BizDate.valueOf("20151010"), "最終変更日");
        exDateEquals(bAK_KykKihon.getLastsyosaihkymd(), BizDate.valueOf("20151111"), "最終証券再発行日");
        exDateEquals(bAK_KykKihon.getLastmeihenymd(), BizDate.valueOf("20151212"), "最終名義変更日");
        exDateEquals(bAK_KykKihon.getLastkykmeighnkymd(), BizDate.valueOf("20151212"), "最終契約者名義変更日");
        exDateEquals(bAK_KykKihon.getLastsbukthenymd(), BizDate.valueOf("20151212"), "最終死亡受取人変更日");

        exDateEquals(bAK_KykKihon.getLastkyknmseiymdhenkouymd(),null, "最終契約者名生年月日変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmkanakjteiymd(), BizDate.valueOf("20150113"), "最終契約者名仮名漢字訂正日");
        exDateEquals(bAK_KykKihon.getLasttsinynohenkouymd(), BizDate.valueOf("20150114"), "最終通信先郵便番号変更日");

        exDateEquals(bAK_KykKihon.getLastjyuuhenymd(), BizDate.valueOf("20151214"), "最終住所変更日");
        exStringEquals(bAK_KykKihon.getGyoumuKousinKinou(), "test3", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinsyaId(), "testuser3", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinTime(), "20150714111111102", "業務用更新時間");

        IT_BAK_CreditCard bAK_CreditCard = bAK_KykKihon.getBAKCreditCard();
        assertNull(bAK_CreditCard);
        List<IT_BAK_FatcaInfo> bAK_FatcaInfo = bAK_KykKihon.getBAKFatcaInfos();
        exNumericEquals(bAK_FatcaInfo.size(), 0, "件数");
        IT_BAK_HhknSya bAK_HhknSya = bAK_KykKihon.getBAKHhknSya();
        exStringEquals(bAK_HhknSya.getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_HhknSya.getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_HhknSya.getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_HhknSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_HhknSya.getHhknsakuinmeino(), "1000000001", "被保険者索引名番号");
        exStringEquals(bAK_HhknSya.getHhknnmkn(), "被保険者名（本ＴＢＬ）", "被保険者名（カナ）");
        exStringEquals(bAK_HhknSya.getHhknnmkj(), "被保険者名漢字１", "被保険者名（漢字）");
        exClassificationEquals(bAK_HhknSya.getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(bAK_HhknSya.getHhknseiymd(), BizDate.valueOf("20150301"), "被保険者生年月日");
        exClassificationEquals(bAK_HhknSya.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exStringEquals(bAK_HhknSya.getHhknyno(), "3334444", "被保険者郵便番号");
        exStringEquals(bAK_HhknSya.getHhknadr1kn(), "被保険者住所１カナ１", "被保険者住所１（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr1kj(), "被保険者住所１漢字１", "被保険者住所１（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr2kn(), "被保険者住所２カナ１", "被保険者住所２（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr2kj(), "被保険者住所２漢字１", "被保険者住所２（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr3kn(), "被保険者住所３カナ１", "被保険者住所３（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr3kj(), "被保険者住所３漢字１", "被保険者住所３（漢字）");
        exStringEquals(bAK_HhknSya.getHhkntelno(),null, "被保険者電話番号");
        exStringEquals(bAK_HhknSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        List<IT_BAK_Kariukekin> bAK_Kariukekin = bAK_KykKihon.getBAKKariukekins();
        exNumericEquals(bAK_Kariukekin.size(), 0, "件数");
        List<IT_BAK_KhLincSousinInfo> bAK_KhLincSousinInfo = bAK_KykKihon.getBAKKhLincSousinInfos();
        exNumericEquals(bAK_KhLincSousinInfo.size(), 0, "件数");
        IT_BAK_KhTtdkTyuui bAK_KhTtdkTyuui = bAK_KykKihon.getBAKKhTtdkTyuui();
        assertNull(bAK_KhTtdkTyuui);
        List<IT_BAK_KihrkmpSeisanRireki> bAK_KihrkmpSeisanRireki = bAK_KykKihon.getBAKKihrkmpSeisanRirekis();
        exNumericEquals(bAK_KihrkmpSeisanRireki.size(), 0, "件数");
        List<IT_BAK_KoujyoSymKanri> bAK_KoujyoSymKanri = bAK_KykKihon.getBAKKoujyoSymKanris();
        exNumericEquals(bAK_KoujyoSymKanri.size(), 0, "件数");
        List<IT_BAK_KoujyoSymNaiyou> bAK_KoujyoSymNaiyou = bAK_KykKihon.getBAKKoujyoSymNaiyous();
        exNumericEquals(bAK_KoujyoSymNaiyou.size(), 0, "件数");
        IT_BAK_Kouza bAK_Kouza = bAK_KykKihon.getBAKKouza();
        assertNull(bAK_Kouza);
        IT_BAK_TeikikinKouza bAK_TeikikinKouza = bAK_KykKihon.getBAKTeikikinKouza();
        assertNull(bAK_TeikikinKouza);
        List<IT_BAK_KykDairiten> bAK_KykDairiten = bAK_KykKihon.getBAKKykDairitens();
        exNumericEquals(bAK_KykDairiten.size(), 0, "件数");
        IT_BAK_KykSonotaTkyk bAK_KykSonotaTkyk = bAK_KykKihon.getBAKKykSonotaTkyk();
        exStringEquals(bAK_KykSonotaTkyk.getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KykSonotaTkyk.getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KykSonotaTkyk.getTrkssikibetukey(), "12347", "取消識別キー");
        exClassificationEquals(bAK_KykSonotaTkyk.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getStdrsktkyhkumu(), C_UmuKbn.NONE, "指定代理請求特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getStdrsktkyhkymd(), BizDate.valueOf("20150101"), "指定代理請求特約付加日");
        exClassificationEquals(bAK_KykSonotaTkyk.getYennykntkhkumu(), C_UmuKbn.ARI, "円入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getGaikanykntkhkumu(), C_UmuKbn.ARI, "外貨入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getYenshrkykkykhenkoymd(), BizDate.valueOf("20100101"), "円支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkgkkateitkumu(), C_UmuKbn.NONE, "年金額確定特約有無");
        assertEquals("年金総額保証割合", bAK_KykSonotaTkyk.getNksgkhosyuwari(), BizNumber.valueOf(25));
        exClassificationEquals(bAK_KykSonotaTkyk.getSkjbrnktsumu(), C_UmuKbn.NONE, "即時払年金特則有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku8waritkumu(), C_UmuKbn.ARI, "年金額８割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku9waritkumu(), C_UmuKbn.NONE, "年金額９割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkyentkhukaumu(), C_UmuKbn.ARI, "年金円支払特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getKwsttkhukaumu(), C_UmuKbn.NONE, "為替ターゲット特約付加有無");
        exNumericEquals(bAK_KykSonotaTkyk.getKwstargetrate(), 19, "為替ターゲットレート");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkhkumu(), C_UmuKbn.ARI, "ターゲット特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getTargettkykkykhenkoymd(), BizDate.valueOf("20100101"), "ターゲット特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkkbn(), C_TargetTkKbn.SYUUSIN, "ターゲット特約区分");
        exNumericEquals(bAK_KykSonotaTkyk.getTargettkmokuhyouti(), 123, "ターゲット特約目標値");
        exClassificationEquals(bAK_KykSonotaTkyk.getYsknkshtkumu(), C_UmuKbn.ARI, "新遺族年金支払特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkkykymd(), BizDate.valueOf("20150104"), "保険料免除特約契約日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtksknnkaisiymd(), BizDate.valueOf("20150105"), "保険料免除特約責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkgansknnkaisiymd(), BizDate.valueOf("20150106"), "保険料免除特約がん責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmhktsknnkaisiymd(), BizDate.valueOf("20150107"), "保険料免除特約復活責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjhktgansknnkaisiymd(), BizDate.valueOf("20150108"), "保険料免除特約復活がん責任開始日");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd1(), "111", "保険料免除特約不担保部位コード１");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn1(), C_Htnpkkn.ONE, "保険料免除特約不担保期間１");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd2(), "222", "保険料免除特約不担保部位コード２");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn2(), C_Htnpkkn.TOW, "保険料免除特約不担保期間２");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd3(), "333", "保険料免除特約不担保部位コード３");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn3(), C_Htnpkkn.THREE, "保険料免除特約不担保期間３");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd4(), "444", "保険料免除特約不担保部位コード４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn4(), C_Htnpkkn.FOUR, "保険料免除特約不担保期間４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "保険料免除特約特定高度障害不担保区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getSknnkaisikitkkbn(), C_SknnkaisikitkKbn.SKNNKAISIKITK, "責任開始期特約区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getNkshrtkykhenkoymd(), BizDate.valueOf("20100101"), "年金支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukkn(), 10, "年金支払特約年金期間");

        exClassificationEquals(bAK_KykSonotaTkyk.getInitsbjiyensitihsytkhukaumu(), null, "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(bAK_KykSonotaTkyk.getInitsbjiyenkasaiteihsygk(), null, "初期死亡時円換算最低保証額");
        exClassificationEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaumu(), null, "重度介護前払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaymd(),  null, "重度介護前払特約付加日");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        IT_BAK_KykSya bAK_KykSya = bAK_KykKihon.getBAKKykSya();
        exStringEquals(bAK_KykSya.getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KykSya.getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KykSya.getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KykSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_KykSya.getKyksakuinmeino(), "1000000001", "契約者索引名番号");
        exStringEquals(bAK_KykSya.getKyknmkn(), "契約名カナ（本ＴＢＬ）", "契約者名（カナ）");
        exStringEquals(bAK_KykSya.getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exClassificationEquals(bAK_KykSya.getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exDateEquals(bAK_KykSya.getKykseiymd(), BizDate.valueOf("20150201"), "契約者生年月日");
        exClassificationEquals(bAK_KykSya.getKyksei(), C_Kyksei.FEMALE, "契約者性別");
        exClassificationEquals(bAK_KykSya.getKkkyktdk(), C_Tdk.SONOTA, "契約管理契約者続柄");
        exStringEquals(bAK_KykSya.getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_KykSya.getTsinadr1kn(), "通信先住所１カナ１", "通信先住所１（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr1kj(), "通信先住所１漢字１", "通信先住所１（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr2kn(), "通信先住所２カナ１", "通信先住所２（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr2kj(), "通信先住所２漢字１", "通信先住所２（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr3kn(), "通信先住所３カナ１", "通信先住所３（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr3kj(), "通信先住所３漢字１", "通信先住所３（漢字）");
        exStringEquals(bAK_KykSya.getTsintelno(), null, "通信先電話番号");
        exStringEquals(bAK_KykSya.getDai2tsintelno(), null, "第２通信先電話番号");
        exStringEquals(bAK_KykSya.getTsinmailaddress(), "test1@test.com", "通信先メールアドレス");
        exStringEquals(bAK_KykSya.getKinmusakinm(), "勤務先名１", "勤務先名");
        exClassificationEquals(bAK_KykSya.getHjndaiykkbn(), C_HjndaiykKbn.SYOTYOU, "法人代表者役職区分");
        exStringEquals(bAK_KykSya.getHjndaiyknm(), "法人代表者役職名１", "法人代表者役職名");
        exStringEquals(bAK_KykSya.getHjndainmkn(), "法人代表者名カナ１", "法人代表者名（カナ）");
        exStringEquals(bAK_KykSya.getHjndainmkj(), "法人代表者名漢字１", "法人代表者名（漢字）");
        exStringEquals(bAK_KykSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        List<IT_BAK_KykSyouhn> bAK_KykSyouhn = bAK_KykKihon.getBAKKykSyouhns();
        exNumericEquals(bAK_KykSyouhn.size(), 0, "件数");
        List<IT_BAK_KykUkt> bAK_KykUkt = bAK_KykKihon.getBAKKykUkts();
        exNumericEquals(bAK_KykUkt.size(), 0, "件数");
        List<IT_BAK_NyknJissekiRireki> bAK_NyknJissekiRireki = bAK_KykKihon.getBAKNyknJissekiRirekis();
        exNumericEquals(bAK_NyknJissekiRireki.size(), 0, "件数");
        List<IT_BAK_SyouhnTokujou> bAK_SyouhnTokujou = bAK_KykKihon.getBAKSyouhnTokujous();
        exNumericEquals(bAK_SyouhnTokujou.size(), 0, "件数");
        List<IT_BAK_YykIdouAnsyuCreditCard> bAK_YykIdouAnsyuCreditCard = bAK_KykKihon.getBAKYykIdouAnsyuCreditCards();
        exNumericEquals(bAK_YykIdouAnsyuCreditCard.size(), 0, "件数");
        List<IT_BAK_YykIdouNaiyoHrhnk> bAK_YykIdouNaiyoHrhnk = bAK_KykKihon.getBAKYykIdouNaiyoHrhnks();
        exNumericEquals(bAK_YykIdouNaiyoHrhnk.size(), 0, "件数");
        List<IT_BAK_YykIdouUktk> bAK_YykIdouUktk = bAK_KykKihon.getBAKYykIdouUktks();
        exNumericEquals(bAK_YykIdouUktk.size(), 0, "件数");
        List<IT_BAK_HengakuUnit> bAK_HengakuUnit = bAK_KykKihon.getBAKHengakuUnits();
        exNumericEquals(bAK_HengakuUnit.size(), 0, "件数");
        List<IT_BAK_KhTtdkRireki> bAK_KhTtdkRireki = bAK_KykKihon.getBAKKhTtdkRirekis();
        exNumericEquals(bAK_KhTtdkRireki.size(), 0, "件数");
        List<IT_BAK_Tesuuryou> bAK_Tesuuryou = bAK_KykKihon.getBAKTesuuryous();
        exNumericEquals(bAK_Tesuuryou.size(), 0, "件数");
        List<IT_BAK_KoujyoSym> bAK_KoujyoSym = bAK_KykKihon.getBAKKoujyoSyms();
        exNumericEquals(bAK_KoujyoSym.size(), 0, "件数");
        List<IT_BAK_Suiihyou> bAK_Suiihyou = bAK_KykKihon.getBAKSuiihyous();
        exNumericEquals(bAK_Suiihyou.size(), 0, "件数");
        List<IT_BAK_TtdkKan> bAK_TtdkKan = bAK_KykKihon.getBAKTtdkKans();
        exNumericEquals(bAK_TtdkKan.size(), 0, "件数");
        List<IT_BAK_HokenSyouken> bAK_HokenSyouken = bAK_KykKihon.getBAKHokenSyoukens();
        exNumericEquals(bAK_HokenSyouken.size(), 0, "件数");
        exNumericEquals(bAK_KykKihon.getBAKTrkKzks().size(), 0, "件数");
        exNumericEquals(bAK_KykKihon.getBAKCreditCardInfos().size(), 0, "件数");
        exNumericEquals(bAK_KykKihon.getBAKKoujyoSymNaiyouDs().size(), 0, "件数");

        exStringEquals(bAK_KhDenpyoData.get(0).getDenrenno(), "12345678904", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(0).getHuridenatesakicd(), "105", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTantocd(), C_TantouCdKbn.SENTAKUINFO, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(0).getDenymd(), BizDate.valueOf("20150417"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTaisyakukbn(), C_TaisyakuKbn.KARIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_PKAKIN_GAIHO_JPY, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSuitoubumoncd(), "105", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDengaikagk(), BizCurrency.valueOf(20013), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(0).getDenkawaserate(), BizNumber.valueOf(105));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDenyenkagk(), BizCurrency.valueOf(1000000005), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getHuridenskskbn(), C_HuridensksKbn.ONLINEFB, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenhnknhoukbn(), C_DenhnknhouKbn.SONOTAHENKIN, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenshrhoukbn(), C_DenshrhouKbn.KARIUKERSKNASI, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(0).getSyoriYmd(), BizDate.valueOf("20150505"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyoricd(), "1005", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyorisosikicd(), "1000005", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg1cd(), C_Segcd.BLNK, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg2cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exStringEquals(bAK_KhDenpyoData.get(1).getDenrenno(), "12345678905", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(1).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(1).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(1).getHuridenatesakicd(), "106", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getTantocd(), C_TantouCdKbn.KETTEI, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(1).getDenymd(), BizDate.valueOf("20150418"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getTaisyakukbn(), C_TaisyakuKbn.KASIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_PKAKIN_GAIHO_USD, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(1).getSuitoubumoncd(), "106", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(1).getDengaikagk(), BizCurrency.valueOf(20014), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(1).getDenkawaserate(), BizNumber.valueOf(106));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(1).getDenyenkagk(), BizCurrency.valueOf(1000000006), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getHuridenskskbn(), C_HuridensksKbn.BLNK, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getDenhnknhoukbn(), C_DenhnknhouKbn.BLNK, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getDenshrhoukbn(), C_DenshrhouKbn.BLNK, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(1).getSyoriYmd(), BizDate.valueOf("20150606"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(1).getSyoricd(), "1006", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(1).getSyorisosikicd(), "1000006", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getSeg1cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getSeg2cd(), C_Segcd.BLNK, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(1).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(1).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(1).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exStringEquals(bAK_KhDenpyoData.get(2).getDenrenno(), "12345678906", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(2).getEdano(), 3, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getDensyskbn(), C_DensysKbn.HKSIHARAI, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(2).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(2).getHuridenatesakicd(), "107", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getTantocd(), C_TantouCdKbn.SYOUKENTYOUSEI, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(2).getDenymd(), BizDate.valueOf("20150419"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getTaisyakukbn(), C_TaisyakuKbn.KARIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_PKAKIN_GAIHO_AUD, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(2).getSuitoubumoncd(), "107", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(2).getDengaikagk(), BizCurrency.valueOf(20015), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(2).getDenkawaserate(), BizNumber.valueOf(107));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(2).getDenyenkagk(), BizCurrency.valueOf(1000000007), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getHuridenskskbn(), C_HuridensksKbn.GYOUMUIGAI, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getDenhnknhoukbn(), C_DenhnknhouKbn.YUBINHARAIDASI, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getDenshrhoukbn(), C_DenshrhouKbn.FBSOUKINYOKU, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(2).getSyoriYmd(), BizDate.valueOf("20150707"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(2).getSyoricd(), "1007", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(2).getSyorisosikicd(), "1000007", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getSeg1cd(), C_Segcd.BLNK, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getSeg2cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(2).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(2).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(2).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");

        exStringEquals(bAK_KhDenpyoData.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exStringEquals(bAK_KhFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678903", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getDenrenno(), "12345678904", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(0).getEdano(), 4, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyoricd(), "1005", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyorisosikicd(), "1000005", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160505"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150427"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyono(), "12806345694", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_YOKUJITU, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getBankcd(), "1215", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSitencd(), "126", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getYokinkbn(), C_YokinKbn.HUTUU, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKouzano(), "7654324", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）４", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getSoukingk(), BizCurrency.valueOf(1000000005), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getGaikataikagk(), BizCurrency.valueOf(1000000005), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(5));

        exStringEquals(bAK_KhFBSoukinData.get(1).getFbsoukindatasikibetukey(), "12345678904", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(1).getDenrenno(), "12345678905", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(1).getEdano(), 5, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSyoricd(), "1006", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSyorisosikicd(), "1000006", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(1).getSyoriYmd(), BizDate.valueOf("20160606"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(1).getDenymd(), BizDate.valueOf("20150428"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSyono(), "12806345694", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_2EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(1).getBankcd(), "1216", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSitencd(), "127", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(1).getKouzano(), "7654325", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(1).getKzmeiginmkn(), "口座名義人氏名（カナ）５", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(1).getSoukingk(), BizCurrency.valueOf(1000000006), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(1).getGaikataikagk(), BizCurrency.valueOf(1000000006), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(1).getSoukinkwsrate(), BizNumber.valueOf(6));

        exStringEquals(bAK_KhFBSoukinData.get(2).getFbsoukindatasikibetukey(), "12345678905", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(2).getDenrenno(), "12345678906", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(2).getEdano(), 6, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getDensyskbn(), C_DensysKbn.HKSIHARAI, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(2).getSyoricd(), "1007", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(2).getSyorisosikicd(), "1000007", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(2).getSyoriYmd(), BizDate.valueOf("20160707"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(2).getDenymd(), BizDate.valueOf("20150429"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(2).getSyono(), "12806345694", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(2).getBankcd(), "1217", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(2).getSitencd(), "128", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getYokinkbn(), C_YokinKbn.TTYOKIN, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(2).getKouzano(), "7654326", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(2).getKzmeiginmkn(), "口座名義人氏名（カナ）６", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(2).getSoukingk(), BizCurrency.valueOf(1000000007), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(2).getGaikataikagk(), BizCurrency.valueOf(1000000007), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(2).getSoukinkwsrate(), BizNumber.valueOf(7));

        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678903", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getDenrenno(), "12345678904", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(0).getEdano(), 4, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoricd(), "1005", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyorisosikicd(), "1000005", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160505"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150427"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyono(), "12806345694", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_YOKUJITU, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBankcd(), "1215", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBanknmej(), "bank5", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitencd(), "126", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitennmej(), "siten5", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKouzano(), "7654324", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getGaikashrgk(), BizCurrency.valueOf(5), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getCrossrateshrgk(), BizCurrency.valueOf(5), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(5));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getIrninnmei(), "irni4", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinKinou(), "test4", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getFbsoukindatasikibetukey(), "12345678904", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getDenrenno(), "12345678905", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(1).getEdano(), 5, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSyoricd(), "1006", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSyorisosikicd(), "1000006", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(1).getSyoriYmd(), BizDate.valueOf("20160606"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(1).getDenymd(), BizDate.valueOf("20150428"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSyono(), "12806345694", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_2EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getBankcd(), "1216", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getBanknmej(), "bank6", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSitencd(), "127", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSitennmej(), "siten6", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getKouzano(), "7654325", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(1).getGaikashrgk(), BizCurrency.valueOf(6), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(1).getCrossrateshrgk(), BizCurrency.valueOf(6), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(1).getSoukinkwsrate(), BizNumber.valueOf(6));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getIrninnmei(), "irni5", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getFbsoukindatasikibetukey(), "12345678905", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getDenrenno(), "12345678906", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(2).getEdano(), 6, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getDensyskbn(), C_DensysKbn.HKSIHARAI, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSyoricd(), "1007", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSyorisosikicd(), "1000007", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(2).getSyoriYmd(), BizDate.valueOf("20160707"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(2).getDenymd(), BizDate.valueOf("20150429"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSyono(), "12806345694", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getBankcd(), "1217", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getBanknmej(), "bank7", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSitencd(), "128", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSitennmej(), "siten7", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getKouzano(), "7654326", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(2).getGaikashrgk(), BizCurrency.valueOf(7), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(2).getCrossrateshrgk(), BizCurrency.valueOf(7), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(2).getSoukinkwsrate(), BizNumber.valueOf(7));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getIrninnmei(), "irni6", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getGyoumuKousinKinou(), "test6", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getRenno(), 4, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getSyoriYmd(), BizDate.valueOf("20150104"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kykno(), "1000000005", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kyknokbn(), C_Huho2kyknoKbn.MOSNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyouhncd(), "1005", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkn(), "タイショウシャシメイ５", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkj(), "タイショウシャシメイ５", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseiymd(), BizDate.valueOf("20160505"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKetymd(), BizDate.valueOf("20150404"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getKetsyacd(), "55", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getPalketsyacd(), "55", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getSintyou(), 140, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getTaijyuu(), 80, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKktymd(), BizDate.valueOf("20150404"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd1(), "44", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym1(), BizDateYM.valueOf("201504"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd2(), "44", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym2(), BizDateYM.valueOf("201504"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinKinou(), "test4", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(1).getRenno(), 5, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getSyoriYmd(), BizDate.valueOf("20150105"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getHuho2kykno(), "1000000006", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getHuho2kyknokbn(), C_Huho2kyknoKbn.SYONO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyouhncd(), "1006", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyounmkn(), "タイショウシャシメイ６", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyounmkj(), "タイショウシャシメイ６", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyouseiymd(), BizDate.valueOf("20160606"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getKetymd(), BizDate.valueOf("20150505"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getKetsyacd(), "66", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getPalketsyacd(), "66", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(1).getSintyou(), 150, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(1).getTaijyuu(), 90, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getKktymd(), BizDate.valueOf("20150505"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoucd1(), "55", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(1).getKantiym1(), BizDateYM.valueOf("201505"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoucd2(), "55", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(1).getKantiym2(), BizDateYM.valueOf("201505"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(2).getRenno(), 6, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(2).getSyoriYmd(), BizDate.valueOf("20150106"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getHuho2kykno(), "1000000007", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getHuho2kyknokbn(), C_Huho2kyknoKbn.NKSYSYNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getSyouhncd(), "1007", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getTaisyounmkn(), "タイショウシャシメイ７", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getTaisyounmkj(), "タイショウシャシメイ７", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(2).getTaisyouseiymd(), BizDate.valueOf("20160707"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(2).getKetymd(), BizDate.valueOf("20150606"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getKetsyacd(), "77", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getPalketsyacd(), "77", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(2).getSintyou(), 160, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(2).getTaijyuu(), 100, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(2).getKktymd(), BizDate.valueOf("20150606"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getSyoubyoucd1(), "66", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(2).getKantiym1(), BizDateYM.valueOf("201506"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getSyoubyoucd2(), "66", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(2).getKantiym2(), BizDateYM.valueOf("201506"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getGyoumuKousinKinou(), "test6", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exStringEquals(bAK_AnsyuKihon.getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_AnsyuKihon.getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_AnsyuKihon.getTrkssikibetukey(), "12347", "取消識別キー");
        exDateYMEquals(bAK_AnsyuKihon.getJkipjytym(), BizDateYM.valueOf("201503"), "次回Ｐ充当年月");
        exClassificationEquals(bAK_AnsyuKihon.getTkiktannaitukisuu(), C_Tkiktannaitukisuu.SIXMONTHS, "定期一括案内月数");
        exClassificationEquals(bAK_AnsyuKihon.getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.SUMI, "控除証明書発行済フラグ");
        exDateEquals(bAK_AnsyuKihon.getSyuharaimanymd(), BizDate.valueOf("20150403"), "主契約払満日");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinKinou(), "test3", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinsyaId(), "testuser3", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinTime(), "20150714111111102", "業務用更新時間");

        IT_BAK_AnsyuCreditCard bAK_AnsyuCreditCard = bAK_AnsyuKihon.getBAKAnsyuCreditCard();
        assertNull(bAK_AnsyuCreditCard);
        List<IT_BAK_AnsyuRireki> bAK_AnsyuRireki = bAK_AnsyuKihon.getBAKAnsyuRirekis();
        exNumericEquals(bAK_AnsyuRireki.size(), 0, "件数");
        IT_BAK_DattaiUktk bAK_DattaiUktk = bAK_AnsyuKihon.getBAKDattaiUktk();
        assertNull(bAK_DattaiUktk);
        List<IT_BAK_SyuunouHenknRireki> bAK_SyuunouHenknRireki = bAK_AnsyuKihon.getBAKSyuunouHenknRirekis();
        exNumericEquals(bAK_SyuunouHenknRireki.size(), 0, "件数");
        IT_BAK_Tokusin bAK_Tokusin = bAK_AnsyuKihon.getBAKTokusin();
        assertNull(bAK_Tokusin);

        exDateEquals(bAK_SmbcStyKanri.get(0).getDatarenymd(), BizDate.valueOf("20151013"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(0).getDatasakuseirenno(), BizNumber.valueOf(1234570));
        exStringEquals(bAK_SmbcStyKanri.get(0).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(0).getRendouflg(), C_Rendouflg.MIRENDOU, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatakbn(), "7", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatasakuseiymd(), "20151014", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbchknkaisyacd(), "58", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcuktkkanriid(), "1234567893", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihouktkzmymd(), "20151114", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbymd(), "20151215", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcbankhnkykflg(), "4", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbksyymd(), "20150116", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohjyttykymd(), "20150217", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihonyknzmymd(), "20150318", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosnszmymd(), "20150419", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyknhkkzmymd(), "20150520", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyumoku(), "22", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyurui(), "32", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyono(), "12806345694", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyonoedaban(), "00004", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcjktkflg(), "3", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihotrksymd(), "20150621", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohktymd(), "20150722", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckykseiymd(), "20150823", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）４", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmosuktymd(), "20150924", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckosyaareastyknr(), "12121212121203", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinKinou(), "test4", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exDateEquals(bAK_SmbcStyKanri.get(1).getDatarenymd(), BizDate.valueOf("20151014"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(1).getDatasakuseirenno(), BizNumber.valueOf(1234571));
        exStringEquals(bAK_SmbcStyKanri.get(1).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(1).getMosno(),null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(1).getRendouflg(), C_Rendouflg.RENDOUZUMI, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcdatakbn(), "8", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcdatasakuseiymd(), "20151015", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbchknkaisyacd(), "59", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcuktkkanriid(), "1234567894", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihouktkzmymd(), "20151115", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohbymd(), "20151216", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcbankhnkykflg(), "5", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohbksyymd(), "20150117", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohjyttykymd(), "20150218", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihonyknzmymd(), "20150319", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosnszmymd(), "20150420", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosyknhkkzmymd(), "20150521", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosyumoku(), "23", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosyurui(), "33", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcsyono(), "12806345694", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcsyonoedaban(), "00005", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcjktkflg(), "4", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihotrksymd(), "20150622", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohktymd(), "20150723", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbckykseiymd(), "20150824", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）５", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcmosuktymd(), "20150925", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbckosyaareastyknr(), "12121212121204", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(1).getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exDateEquals(bAK_SmbcStyKanri.get(2).getDatarenymd(), BizDate.valueOf("20151015"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(2).getDatasakuseirenno(), BizNumber.valueOf(1234572));
        exStringEquals(bAK_SmbcStyKanri.get(2).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(2).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(2).getRendouflg(), C_Rendouflg.MIRENDOU, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcdatakbn(), "9", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcdatasakuseiymd(), "20151016", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbchknkaisyacd(), "60", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcuktkkanriid(), "1234567895", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihouktkzmymd(), "20151116", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihohbymd(), "20151217", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcbankhnkykflg(), "6", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihohbksyymd(), "20150118", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihohjyttykymd(), "20150219", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihonyknzmymd(), "20150320", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihosnszmymd(), "20150421", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihosyknhkkzmymd(), "20150522", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihosyumoku(), "24", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihosyurui(), "34", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcsyono(), "12806345694", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcsyonoedaban(), "00006", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcjktkflg(), "5", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihotrksymd(), "20150623", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihohktymd(), "20150724", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbckykseiymd(), "20150825", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）６", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcmosuktymd(), "20150926", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbckosyaareastyknr(), "12121212121205", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(2).getGyoumuKousinKinou(), "test6", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(0).getUktkymd(), BizDate.valueOf("20180105"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getTourokuroute(), C_TourokuRouteKbn.DS, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktksyorikbn(), C_UktkSyoriKbn.BLNK, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20180205"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(0).getSyoriyoteiymd(), BizDate.valueOf("20180305"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.ERROR, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(1).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(1).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(1).getHozenhenkouuktkrenno(), 2, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(1).getUktkymd(), BizDate.valueOf("20180106"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getTourokuroute(), C_TourokuRouteKbn.TEL, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getUktksyorikbn(), C_UktkSyoriKbn.KAIYAKU, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(1).getKouryokuhasseiymd(), BizDate.valueOf("20180206"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(1).getSyoriyoteiymd(), BizDate.valueOf("20180306"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.BLNK, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(2).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(2).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(2).getHozenhenkouuktkrenno(), 3, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(2).getUktkymd(), BizDate.valueOf("20180107"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(2).getTourokuroute(), C_TourokuRouteKbn.BLNK, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(2).getUktksyorikbn(), C_UktkSyoriKbn.BLNK, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(2).getKouryokuhasseiymd(), BizDate.valueOf("20180207"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(2).getSyoriyoteiymd(), BizDate.valueOf("20180307"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(2).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.MISYORI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(2).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(2).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KhHenkouUktkKaiyaku> bAK_KhHenkouUktkKaiyakuLst1 = bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus();
        exNumericEquals(bAK_KhHenkouUktkKaiyakuLst1.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkKaiyaku> bAK_KhHenkouUktkKaiyakuLst2 = bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus();
        exNumericEquals(bAK_KhHenkouUktkKaiyakuLst2.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkKaiyaku> bAK_KhHenkouUktkKaiyakuLst3 = bAK_KhHenkouUktk.get(2).getBAKKhHenkouUktkKaiyakus();
        exNumericEquals(bAK_KhHenkouUktkKaiyakuLst3.size(), 0, "件数");

        List<IT_BAK_KhHenkouUktkYendtHnk> bAK_KhHenkouUktkYendtHnkLst1 = bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks();
        exNumericEquals(bAK_KhHenkouUktkYendtHnkLst1.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkYendtHnk> bAK_KhHenkouUktkYendtHnkLst2 = bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks();
        exNumericEquals(bAK_KhHenkouUktkYendtHnkLst2.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkYendtHnk> bAK_KhHenkouUktkYendtHnkLst3 = bAK_KhHenkouUktk.get(2).getBAKKhHenkouUktkYendtHnks();
        exNumericEquals(bAK_KhHenkouUktkYendtHnkLst3.size(), 0, "件数");

        exStringEquals(bAK_KhHaitouKanri.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(0).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(0).getRenno(), 5, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE4, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2013"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getTounendod(), BizCurrency.valueOf(50000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrymd(), BizDate.valueOf("20180105"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedruigk(), BizCurrency.valueOf(60000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(5000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(9000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinTime(), "20181018111111115", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri.get(1).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(1).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(1).getRenno(), 6, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(1).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE5, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(1).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(1).getFstkariwariatednendo(), BizDateY.valueOf("2014"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getTounendod(), BizCurrency.valueOf(60000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.NAITEI, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(1).getKariwariatedshrymd(), BizDate.valueOf("20180106"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getKariwariatedruigk(), BizCurrency.valueOf(70000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getKariwariatedgngkkngk(), BizCurrency.valueOf(6000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getKariwariatedshrgk(), BizCurrency.valueOf(10000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(1).getGyoumuKousinTime(), "20181018111111116", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri.get(2).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(2).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(2).getRenno(), 7, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(2).getHaitoukinskskbn(), C_HaitoukinsksKbn.YENDTHNKKARIWARIATE, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(2).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(2).getFstkariwariatednendo(), BizDateY.valueOf("2015"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(2).getTounendod(), BizCurrency.valueOf(70000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(2).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(2).getKariwariatedshrymd(), BizDate.valueOf("20180107"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(2).getKariwariatedruigk(), BizCurrency.valueOf(80000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(2).getKariwariatedgngkkngk(), BizCurrency.valueOf(7000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(2).getKariwariatedshrgk(), BizCurrency.valueOf(11000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(2).getGyoumuKousinTime(), "20181018111111117", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20180105"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(0).getRenno(), 5, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.ZENHIKIDASI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(0).getTumitated(), BizCurrency.valueOf(60000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20180205"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinTime(), "20181018111111115", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(1).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(1).getTumitatedtumitateymd(), BizDate.valueOf("20180106"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(1).getRenno(), 6, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(1).getTumitatedskskbn(), C_TumitateDSakuseiKbn.ITIBUHIKIDASI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(1).getTumitated(), BizCurrency.valueOf(70000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(1).getTumitatedshrkrkymd(), BizDate.valueOf("20180206"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.NAITEI, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getGyoumuKousinTime(), "20181018111111116", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(2).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(2).getTumitatedtumitateymd(), BizDate.valueOf("20180107"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(2).getRenno(), 7, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(2).getTumitatedskskbn(), C_TumitateDSakuseiKbn.BLNK, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(2).getTumitated(), BizCurrency.valueOf(80000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(2).getTumitatedshrkrkymd(), BizDate.valueOf("20180207"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(2).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getGyoumuKousinTime(), "20181018111111117", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyouno(), "45532412323214233121", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyksyoriymd(), BizDate.valueOf("20180105"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180205"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNykkeiro(), C_Nykkeiro.BANK, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkkaisuu(), C_Hrkkaisuu.ITIJI, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.HUKKATUYOUP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getIktnyuukinnumu(), C_UmuKbn.NONE, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(0).getJyuutouym(), BizDateYM.valueOf("201805"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuuy(), 5, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuum(), 6, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(0).getRsgaku(), BizCurrency.valueOf(50000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getRyosyuymd(), BizDate.valueOf("20180305"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getDenrenno(), "10000000000000000005", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNykdenymd(), BizDate.valueOf("20180405"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitoubumoncd(), "105", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaebankcd(), "1005", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaesitencd(), "205", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTabakarikanjyono(), "05", "");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkno(), "10000005", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.TAISYOUGAI, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitososhikicd(), "1000005", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinTime(), "20181018111111115", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(1).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getNyuukinkakusyouno(), "32231523412523412352", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getNyksyoriymd(), BizDate.valueOf("20180106"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180206"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getNykkeiro(), C_Nykkeiro.KYHKIN, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getHrkkaisuu(), C_Hrkkaisuu.BLNK, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getNyknaiyoukbn(), C_NyknaiyouKbn.SYOKAIP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(1).getJyuutouym(), BizDateYM.valueOf("201806"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(1).getJyutoukaisuuy(), 6, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(1).getJyutoukaisuum(), 5, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(1).getRsgaku(), BizCurrency.valueOf(60000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getRyosyuymd(), BizDate.valueOf("20180306"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getDenrenno(), "10000000000000000006", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getNykdenymd(), BizDate.valueOf("20180406"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getSuitoubumoncd(), "106", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getKzhurikaebankcd(), "1006", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getKzhurikaesitencd(), "206", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getTabakarikanjyono(), "06", "");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getNyuukinkakusyounrkno(), "10000006", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.EGSYOKUIN, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getSuitososhikicd(), "1000006", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getGyoumuKousinTime(), "20181018111111116", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(2).getKbnkey(), "09", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getNyuukinkakusyouno(), "87432413241233214122", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(2).getNyksyoriymd(), BizDate.valueOf("20180107"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(2).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180207"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getNykkeiro(), C_Nykkeiro.HKNKIN, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getHrkkaisuu(), C_Hrkkaisuu.TUKI, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getNyknaiyoukbn(), C_NyknaiyouKbn.HARAIHENYOUP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getIktnyuukinnumu(), C_UmuKbn.NONE, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(2).getJyuutouym(), BizDateYM.valueOf("201807"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(2).getJyutoukaisuuy(), 7, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(2).getJyutoukaisuum(), 4, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(2).getRsgaku(), BizCurrency.valueOf(70000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(2).getRyosyuymd(), BizDate.valueOf("20180307"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getDenrenno(), "10000000000000000007", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(2).getNykdenymd(), BizDate.valueOf("20180407"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getSuitoubumoncd(), "107", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getKzhurikaebankcd(), "1007", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getKzhurikaesitencd(), "207", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getTabakarikanjyono(), "07", "");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getNyuukinkakusyounrkno(), "10000007", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.OKYKSM_NYUUKIN, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getSuitososhikicd(), "1000007", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getGyoumuKousinTime(), "20181018111111117", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(0).getDshrtoukeisikibetukey(), "45532412323214233121", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(0).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(0).getHenkousikibetukey(), "104", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriYmd(), BizDate.valueOf("20190105"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyorikbn(), C_SyoriKbn.MUKOU, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHrkkeiro(), C_Hrkkeiro.HURIKAE, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyouhncd(), "1004", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getKykjyoutai(), C_Kykjyoutai.ENTYOU, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.MUKOU, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(0).getKykymd(), BizDate.valueOf("20190405"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(0).getYendthnkymd(), BizDate.valueOf("20190505"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKihons(), BizCurrency.valueOf(999995), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(0).getYoteiriritu(), BizNumber.valueOf(1.25));
        exDateEquals(bAK_KhDshrTuki.get(0).getDenymd(), BizDate.valueOf("20190605"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getSiharaid(), BizCurrency.valueOf(888885), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(0).getCalckijyunymd(), BizDate.valueOf("20190705"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriymd2(), BizDate.valueOf("20190805"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(0).getJkipjytym(), BizDateYM.valueOf("201907"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(0).getKinoubetukijyunymd(), BizDate.valueOf("20190905"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(0).getGengkwari(), BizNumber.valueOf(0.15));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getItibushrgk(), BizCurrency.valueOf(115), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkin(), BizCurrency.valueOf(225), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk(), BizCurrency.valueOf(335), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(445), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(555), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getDkeisanhaitoukin(), BizCurrency.valueOf(665), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkingk(), BizCurrency.valueOf(15), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedganrikindshr(), BizCurrency.valueOf(26), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated(), BizCurrency.valueOf(37), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosimae(), BizCurrency.valueOf(48), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosigo(), BizCurrency.valueOf(59), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTkbthaitou(), BizCurrency.valueOf(70), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE4, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTounendod(), BizCurrency.valueOf(445), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrymd(), BizDate.valueOf("20201005"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk2(), BizCurrency.valueOf(555), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk2(), BizCurrency.valueOf(665), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk2(), BizCurrency.valueOf(775), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20201105"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.ZENHIKIDASI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated2(), BizCurrency.valueOf(885), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20191205"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalckari(), BizCurrency.valueOf(995), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(0).getKariwariatedriritu1(), BizNumber.valueOf(0.215));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(0).getKariwariatedriritu2(), BizNumber.valueOf(0.115));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalctumi(), BizCurrency.valueOf(22225), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(0).getTumitatedriritu1(), BizNumber.valueOf(0.135));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(0).getTumitatedriritu2(), BizNumber.valueOf(0.145));
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinTime(), "20181018111111115", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(1).getDshrtoukeisikibetukey(), "32231523412523412352", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(1).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(1).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(1).getHenkousikibetukey(), "105", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(1).getSyoriYmd(), BizDate.valueOf("20190106"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getSyorikbn(), C_SyoriKbn.SBMUKOU_KIHRKPSHR, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getHrkkeiro(), C_Hrkkeiro.CREDIT, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(1).getSyouhncd(), "1005", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(1).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getKykjyoutai(), C_Kykjyoutai.PMEN, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getSyoumetujiyuu(), C_Syoumetujiyuu.SBMUKOU, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(1).getKykymd(), BizDate.valueOf("20190406"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(1).getYendthnkymd(), BizDate.valueOf("20190506"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKihons(), BizCurrency.valueOf(999996), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(1).getYoteiriritu(), BizNumber.valueOf(1.26));
        exDateEquals(bAK_KhDshrTuki.get(1).getDenymd(), BizDate.valueOf("20190606"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getSiharaid(), BizCurrency.valueOf(888886), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(1).getCalckijyunymd(), BizDate.valueOf("20190706"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(1).getSyoriymd2(), BizDate.valueOf("20190806"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(1).getJkipjytym(), BizDateYM.valueOf("201908"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(1).getKinoubetukijyunymd(), BizDate.valueOf("20190906"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(1).getGengkwari(), BizNumber.valueOf(0.16));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getItibushrgk(), BizCurrency.valueOf(116), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitoushrkin(), BizCurrency.valueOf(226), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedruigk(), BizCurrency.valueOf(336), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedgngkkngk(), BizCurrency.valueOf(446), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedshrgk(), BizCurrency.valueOf(556), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getDkeisanhaitoukin(), BizCurrency.valueOf(666), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(1).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitoushrkingk(), BizCurrency.valueOf(16), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedganrikindshr(), BizCurrency.valueOf(27), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitated(), BizCurrency.valueOf(38), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitatedmodosimae(), BizCurrency.valueOf(49), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitatedmodosigo(), BizCurrency.valueOf(60), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTkbthaitou(), BizCurrency.valueOf(71), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(1).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIWARIATE5, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(1).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTounendod(), BizCurrency.valueOf(446), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(1).getKariwariatedshrymd(), BizDate.valueOf("20201006"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedruigk2(), BizCurrency.valueOf(556), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedgngkkngk2(), BizCurrency.valueOf(666), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedshrgk2(), BizCurrency.valueOf(776), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(1).getTumitatedtumitateymd(), BizDate.valueOf("20201106"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getTumitatedskskbn(), C_TumitateDSakuseiKbn.ITIBUHIKIDASI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitated2(), BizCurrency.valueOf(886), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(1).getTumitatedshrkrkymd(), BizDate.valueOf("20191206"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitouganrikincalckari(), BizCurrency.valueOf(996), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(1).getKariwariatedriritu1(), BizNumber.valueOf(0.216));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(1).getKariwariatedriritu2(), BizNumber.valueOf(0.116));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitouganrikincalctumi(), BizCurrency.valueOf(22226), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(1).getTumitatedriritu1(), BizNumber.valueOf(0.136));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(1).getTumitatedriritu2(), BizNumber.valueOf(0.146));
        exStringEquals(bAK_KhDshrTuki.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(1).getGyoumuKousinTime(), "20181018111111116", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(2).getDshrtoukeisikibetukey(), "87432413241233214122", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(2).getSyono(), "12806345694", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(2).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(2).getHenkousikibetukey(), "106", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(2).getSyoriYmd(), BizDate.valueOf("20190107"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getSyorikbn(), C_SyoriKbn.SBMUKOU_SHRNASI, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getHrkkeiro(), C_Hrkkeiro.BLNK, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(2).getSyouhncd(), "1006", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(2).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getKykjyoutai(), C_Kykjyoutai.ZENNOU, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getSyoumetujiyuu(), C_Syoumetujiyuu.SBKAIJO, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(2).getKykymd(), BizDate.valueOf("20190407"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(2).getYendthnkymd(), BizDate.valueOf("20190507"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKihons(), BizCurrency.valueOf(999997), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(2).getYoteiriritu(), BizNumber.valueOf(1.27));
        exDateEquals(bAK_KhDshrTuki.get(2).getDenymd(), BizDate.valueOf("20190607"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getSiharaid(), BizCurrency.valueOf(888887), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(2).getCalckijyunymd(), BizDate.valueOf("20190707"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(2).getSyoriymd2(), BizDate.valueOf("20190807"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(2).getJkipjytym(), BizDateYM.valueOf("201909"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(2).getKinoubetukijyunymd(), BizDate.valueOf("20190907"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(2).getGengkwari(), BizNumber.valueOf(0.17));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getItibushrgk(), BizCurrency.valueOf(117), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getHaitoushrkin(), BizCurrency.valueOf(227), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedruigk(), BizCurrency.valueOf(337), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedgngkkngk(), BizCurrency.valueOf(447), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedshrgk(), BizCurrency.valueOf(557), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getDkeisanhaitoukin(), BizCurrency.valueOf(667), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(2).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getHaitoushrkingk(), BizCurrency.valueOf(17), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedganrikindshr(), BizCurrency.valueOf(28), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTumitated(), BizCurrency.valueOf(39), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTumitatedmodosimae(), BizCurrency.valueOf(50), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTumitatedmodosigo(), BizCurrency.valueOf(61), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTkbthaitou(), BizCurrency.valueOf(72), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(2).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getHaitoukinskskbn(), C_HaitoukinsksKbn.YENDTHNKKARIWARIATE, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(2).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTounendod(), BizCurrency.valueOf(447), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(2).getKariwariatedshrymd(), BizDate.valueOf("20201007"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedruigk2(), BizCurrency.valueOf(557), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedgngkkngk2(), BizCurrency.valueOf(667), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedshrgk2(), BizCurrency.valueOf(777), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(2).getTumitatedtumitateymd(), BizDate.valueOf("20201107"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getTumitatedskskbn(), C_TumitateDSakuseiKbn.SEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTumitated2(), BizCurrency.valueOf(887), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(2).getTumitatedshrkrkymd(), BizDate.valueOf("20191207"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getHaitouganrikincalckari(), BizCurrency.valueOf(997), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(2).getKariwariatedriritu1(), BizNumber.valueOf(0.217));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(2).getKariwariatedriritu2(), BizNumber.valueOf(0.117));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getHaitouganrikincalctumi(), BizCurrency.valueOf(22227), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(2).getTumitatedriritu1(), BizNumber.valueOf(0.137));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(2).getTumitatedriritu2(), BizNumber.valueOf(0.147));
        exStringEquals(bAK_KhDshrTuki.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(2).getGyoumuKousinTime(), "20181018111111117", "業務用更新時間");

    }

    @Test
    @Transactional
    @TestOrder(50)
    public void testTableMaintenanceUtil_backUp_1_5() {

        newData();

        deleteBackupData();

        kinou.setKinouKbn(C_KinouKbn.BATCH);

        tableMaintenanceUtil.backUp("12806345708", "12348");

        bAK_KykKihon = tableMaintenanceUtil.getBakKykKihon();

        bAK_AnsyuKihon = tableMaintenanceUtil.getBakAnsyuKihon();

        bAK_KhDenpyoData = tableMaintenanceUtil.getBakKhDenpyoDataList();

        bAK_KhFBSoukinData = tableMaintenanceUtil.getBakKhFBSoukinDataList();

        bAK_KhGaikaFBSoukinData = tableMaintenanceUtil.getBakKhGaikaFBSoukinDataList();

        bAK_KhSntkInfoTouroku = tableMaintenanceUtil.getBakKhSntkInfoTourokuList();

        bAK_SmbcStyKanri = tableMaintenanceUtil.getBakSmbcStyKanriList();

        bAK_KhHenkouUktk = tableMaintenanceUtil.getBakKhHenkouUktkList();

        bAK_KhHaitouKanri = tableMaintenanceUtil.getBakKhHaitouKanriList();

        bAK_KhTumitateDKanri = tableMaintenanceUtil.getBakKhTumitateDKanriList();

        bAK_NyuukinKakusyouData = tableMaintenanceUtil.getBakNyuukinKakusyouDataList();

        bAK_KhDshrTuki = tableMaintenanceUtil.getBakKhDshrTukiList();

        exStringEquals(bAK_KykKihon.getKbnkey(), "00", "区分キー");
        exStringEquals(bAK_KykKihon.getSyono(), "12806345708", "証券番号");
        exStringEquals(bAK_KykKihon.getTrkssikibetukey(), "12348", "取消識別キー");
        exStringEquals(bAK_KykKihon.getAitesyono(), "12806345708", "相手証券番号");
        exClassificationEquals(bAK_KykKihon.getHaitoukbn(), C_HaitouKbn.RISAHAI, "配当区分");
        exClassificationEquals(bAK_KykKihon.getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exClassificationEquals(bAK_KykKihon.getHrkkeiro(), C_Hrkkeiro.DANTAI, "払込経路");
        exClassificationEquals(bAK_KykKihon.getSdpdkbn(), C_Sdpd.GIJIPD, "Ｓ建Ｐ建区分");
        exClassificationEquals(bAK_KykKihon.getDntryouritukbn(), C_DntryourituKbn.A, "団体料率区分");
        exStringEquals(bAK_KykKihon.getDntcd(), "003", "団体コード");
        exClassificationEquals(bAK_KykKihon.getSntkhoukbn(), C_SntkhouKbn.HJY, "選択方法区分");
        exClassificationEquals(bAK_KykKihon.getSinsakbn(), C_SinsaKbn.KENKOUKANRISYOUMEISY, "診査区分");
        exDateEquals(bAK_KykKihon.getMosymd(), BizDate.valueOf("20150202"), "申込日");
        exDateEquals(bAK_KykKihon.getKktymd(), BizDate.valueOf("20150303"), "告知日");
        exDateEquals(bAK_KykKihon.getFstpnyknymd(), BizDate.valueOf("20150404"), "初回保険料入金日");
        exDateEquals(bAK_KykKihon.getMosukeymd(), BizDate.valueOf("20150505"), "申込書受付日");
        exDateEquals(bAK_KykKihon.getMosjimosuktymd(), BizDate.valueOf("20150606"), "申込時申込書受付日");
        exDateEquals(bAK_KykKihon.getSeirituymd(), BizDate.valueOf("20150707"), "成立日");
        exDateEquals(bAK_KykKihon.getItiprsymd(), BizDate.valueOf("20150808"), "１Ｐ領収予定日");
        exBizCalcbleEquals(bAK_KykKihon.getHrkp(), BizCurrency.valueOf(10002), "払込保険料");
        exDateYMEquals(bAK_KykKihon.getBosyuuym(), BizDateYM.valueOf("201503"), "募集年月");
        exDateYMEquals(bAK_KykKihon.getSeisekiym(), BizDateYM.valueOf("201505"), "成績計上年月");
        exDateYMEquals(bAK_KykKihon.getSkeikeijyouym(), BizDateYM.valueOf("201507"), "新契約計上年月");
        exStringEquals(bAK_KykKihon.getPlancd(), "004", "プランコード");
        exNumericEquals(bAK_KykKihon.getPlanrenno(), 03, "プラン連番");
        exClassificationEquals(bAK_KykKihon.getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exClassificationEquals(bAK_KykKihon.getSyusaiumu(), C_UmuKbn.ARI, "出再有無");
        exClassificationEquals(bAK_KykKihon.getStknsetkbn(), C_StknsetKbn.NONE, "質権設定区分");
        exClassificationEquals(bAK_KykKihon.getKykksykjyumu(), C_UmuKbn.NONE, "契約者貸付約定有無");
        exClassificationEquals(bAK_KykKihon.getKykksumu(), C_UmuKbn.ARI, "契約者貸付有無");
        exClassificationEquals(bAK_KykKihon.getAplkahikbn(), C_Aplkahi.NONE, "ＡＰＬ可否区分");
        exClassificationEquals(bAK_KykKihon.getAplumu(), C_UmuKbn.NONE, "ＡＰＬ有無");
        exClassificationEquals(bAK_KykKihon.getFstphrkkeirokbn(), C_FstphrkkeiroKbn.CREDIT, "初回保険料払込経路区分");
        exDateYEquals(bAK_KykKihon.getHaitounendo(), BizDateY.valueOf("2015"), "配当年度");
        exClassificationEquals(bAK_KykKihon.getHaitoukinuketorihoukbn(), C_HaitoukinuketorihouKbn.TUMIHAI, "配当金受取方法区分");
        exClassificationEquals(bAK_KykKihon.getTratkityuiumu(), C_UmuKbn.ARI, "取扱注意有無");
        exStringEquals(bAK_KykKihon.getTratkityuiuny(), "取扱注意内容４", "取扱注意内容");
        exNumericEquals(bAK_KykKihon.getSbuktnin(), 4, "死亡受取人人数");
        exStringEquals(bAK_KykKihon.getGansindankakuteiymd(), "20150909", "がん診断確定日");
        exClassificationEquals(bAK_KykKihon.getMosuketukekbn(), C_MosUketukeKbn.PAPERLESS, "申込受付区分");
        exClassificationEquals(bAK_KykKihon.getKijikbn(), C_KijiKbn.NONE, "記事区分");
        exStringEquals(bAK_KykKihon.getHhknsykgycd(), "104", "被保険者職業コード");
        exClassificationEquals(bAK_KykKihon.getHhknnensyuukbn(), C_NensyuuKbn.UNDER1000, "被保険者年収区分");
        exStringEquals(bAK_KykKihon.getDrtenkanritodoufukencd(), "36", "代理店管理都道府県コード");
        exStringEquals(bAK_KykKihon.getCifcd(), "005", "ＣＩＦコード");
        exStringEquals(bAK_KykKihon.getSmbckanriid(), "007", "ＳＭＢＣ受付管理ＩＤ");
        exClassificationEquals(bAK_KykKihon.getTsryhshrkykumukbn(), C_UmuKbn.ARI, "手数料不支払契約有無区分");
        exClassificationEquals(bAK_KykKihon.getKykhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.KOKUMINKENKOUHOKEN, "契約者本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getSkskknhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.KOKUMINKENKOUHOKEN, "親権者後見人本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getBoskykjyoutai(), C_Boskykjyoutai.TOKKYK, "募集契約状態");
        exNumericEquals(bAK_KykKihon.getKanyuusyano(), 9, "加入者番号");
        exClassificationEquals(bAK_KykKihon.getDrctservicemoskbn(), C_DirectServiceMosKbn.ENTRY, "ダイレクトサービス申込区分");
        exClassificationEquals(bAK_KykKihon.getSksyoukenskskbn(), C_SkSyoukenSksKbn.SINKISAKUSEI, "新契約証券作成区分");
        exDateEquals(bAK_KykKihon.getSinkyksyokensakuseiymd(), BizDate.valueOf("20400101"), "新契約証券作成日");
        exDateEquals(bAK_KykKihon.getSyoyousinkyksyohakkouymd(), BizDate.valueOf("20410101"), "証券用新契約証券発行日");
        exStringEquals(bAK_KykKihon.getSkjmosno(), "1000004", "新契約時申込番号");
        exClassificationEquals(bAK_KykKihon.getNkuikosumikbn(), C_NkIkouzumiKbn.BLNK, "年金移行済区分");
        exDateEquals(bAK_KykKihon.getSyhenkouymd(), BizDate.valueOf("20151010"), "最終変更日");
        exDateEquals(bAK_KykKihon.getLastsyosaihkymd(), BizDate.valueOf("20151111"), "最終証券再発行日");
        exDateEquals(bAK_KykKihon.getLastmeihenymd(), BizDate.valueOf("20151212"), "最終名義変更日");
        exDateEquals(bAK_KykKihon.getLastkykmeighnkymd(), BizDate.valueOf("20151212"), "最終契約者名義変更日");
        exDateEquals(bAK_KykKihon.getLastsbukthenymd(), BizDate.valueOf("20151212"), "最終死亡受取人変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmseiymdhenkouymd(),null, "最終契約者名生年月日変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmkanakjteiymd(), BizDate.valueOf("20150113"), "最終契約者名仮名漢字訂正日");
        exDateEquals(bAK_KykKihon.getLasttsinynohenkouymd(), BizDate.valueOf("20150114"), "最終通信先郵便番号変更日");
        exDateEquals(bAK_KykKihon.getLastjyuuhenymd(), BizDate.valueOf("20151214"), "最終住所変更日");
        exStringEquals(bAK_KykKihon.getGyoumuKousinKinou(), "test3", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinsyaId(), "testuser3", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinTime(), "20150714111111102", "業務用更新時間");

        IT_BAK_CreditCard bAK_CreditCard = bAK_KykKihon.getBAKCreditCard();
        assertNull(bAK_CreditCard);
        List<IT_BAK_FatcaInfo> bAK_FatcaInfo = bAK_KykKihon.getBAKFatcaInfos();
        exNumericEquals(bAK_FatcaInfo.size(), 0, "件数");
        IT_BAK_HhknSya bAK_HhknSya = bAK_KykKihon.getBAKHhknSya();
        exStringEquals(bAK_HhknSya.getKbnkey(), "00", "区分キー");
        exStringEquals(bAK_HhknSya.getSyono(), "12806345708", "証券番号");
        exStringEquals(bAK_HhknSya.getTrkssikibetukey(), "12348", "取消識別キー");
        exStringEquals(bAK_HhknSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_HhknSya.getHhknsakuinmeino(), "1000000001", "被保険者索引名番号");
        exStringEquals(bAK_HhknSya.getHhknnmkn(), "被保険者名（本ＴＢＬ）", "被保険者名（カナ）");
        exStringEquals(bAK_HhknSya.getHhknnmkj(), "被保険者名漢字１", "被保険者名（漢字）");
        exClassificationEquals(bAK_HhknSya.getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(bAK_HhknSya.getHhknseiymd(), BizDate.valueOf("20150301"), "被保険者生年月日");
        exClassificationEquals(bAK_HhknSya.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exStringEquals(bAK_HhknSya.getHhknyno(), "3334444", "被保険者郵便番号");
        exStringEquals(bAK_HhknSya.getHhknadr1kn(), "被保険者住所１カナ１", "被保険者住所１（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr1kj(), "被保険者住所１漢字１", "被保険者住所１（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr2kn(), "被保険者住所２カナ１", "被保険者住所２（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr2kj(), "被保険者住所２漢字１", "被保険者住所２（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr3kn(), "被保険者住所３カナ１", "被保険者住所３（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr3kj(), "被保険者住所３漢字１", "被保険者住所３（漢字）");
        exStringEquals(bAK_HhknSya.getHhkntelno(), null, "被保険者電話番号");
        exStringEquals(bAK_HhknSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        List<IT_BAK_Kariukekin> bAK_Kariukekin = bAK_KykKihon.getBAKKariukekins();
        exNumericEquals(bAK_Kariukekin.size(), 0, "件数");
        List<IT_BAK_KhLincSousinInfo> bAK_KhLincSousinInfo = bAK_KykKihon.getBAKKhLincSousinInfos();
        exNumericEquals(bAK_KhLincSousinInfo.size(), 0, "件数");
        IT_BAK_KhTtdkTyuui bAK_KhTtdkTyuui = bAK_KykKihon.getBAKKhTtdkTyuui();
        assertNull(bAK_KhTtdkTyuui);
        List<IT_BAK_KihrkmpSeisanRireki> bAK_KihrkmpSeisanRireki = bAK_KykKihon.getBAKKihrkmpSeisanRirekis();
        exNumericEquals(bAK_KihrkmpSeisanRireki.size(), 0, "件数");
        List<IT_BAK_KoujyoSymKanri> bAK_KoujyoSymKanri = bAK_KykKihon.getBAKKoujyoSymKanris();
        exNumericEquals(bAK_KoujyoSymKanri.size(), 0, "件数");
        List<IT_BAK_KoujyoSymNaiyou> bAK_KoujyoSymNaiyou = bAK_KykKihon.getBAKKoujyoSymNaiyous();
        exNumericEquals(bAK_KoujyoSymNaiyou.size(), 0, "件数");
        IT_BAK_Kouza bAK_Kouza = bAK_KykKihon.getBAKKouza();
        assertNull(bAK_Kouza);
        IT_BAK_TeikikinKouza bAK_TeikikinKouza = bAK_KykKihon.getBAKTeikikinKouza();
        assertNull(bAK_TeikikinKouza);
        List<IT_BAK_KykDairiten> bAK_KykDairiten = bAK_KykKihon.getBAKKykDairitens();
        exNumericEquals(bAK_KykDairiten.size(), 0, "件数");
        IT_BAK_KykSonotaTkyk bAK_KykSonotaTkyk = bAK_KykKihon.getBAKKykSonotaTkyk();
        exStringEquals(bAK_KykSonotaTkyk.getKbnkey(), "00", "区分キー");
        exStringEquals(bAK_KykSonotaTkyk.getSyono(), "12806345708", "証券番号");
        exStringEquals(bAK_KykSonotaTkyk.getTrkssikibetukey(), "12348", "取消識別キー");
        exClassificationEquals(bAK_KykSonotaTkyk.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getStdrsktkyhkumu(), C_UmuKbn.NONE, "指定代理請求特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getStdrsktkyhkymd(), BizDate.valueOf("20150101"), "指定代理請求特約付加日");
        exClassificationEquals(bAK_KykSonotaTkyk.getYennykntkhkumu(), C_UmuKbn.ARI, "円入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getGaikanykntkhkumu(), C_UmuKbn.ARI, "外貨入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getYenshrkykkykhenkoymd(), BizDate.valueOf("20100101"), "円支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkgkkateitkumu(), C_UmuKbn.NONE, "年金額確定特約有無");
        assertEquals("年金総額保証割合", bAK_KykSonotaTkyk.getNksgkhosyuwari(), BizNumber.valueOf(25));
        exClassificationEquals(bAK_KykSonotaTkyk.getSkjbrnktsumu(), C_UmuKbn.NONE, "即時払年金特則有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku8waritkumu(), C_UmuKbn.ARI, "年金額８割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku9waritkumu(), C_UmuKbn.NONE, "年金額９割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkyentkhukaumu(), C_UmuKbn.ARI, "年金円支払特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getKwsttkhukaumu(), C_UmuKbn.NONE, "為替ターゲット特約付加有無");
        exNumericEquals(bAK_KykSonotaTkyk.getKwstargetrate(), 19, "為替ターゲットレート");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkhkumu(), C_UmuKbn.ARI, "ターゲット特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getTargettkykkykhenkoymd(), BizDate.valueOf("20100101"), "ターゲット特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkkbn(), C_TargetTkKbn.SYUUSIN, "ターゲット特約区分");
        exNumericEquals(bAK_KykSonotaTkyk.getTargettkmokuhyouti(), 123, "ターゲット特約目標値");
        exClassificationEquals(bAK_KykSonotaTkyk.getYsknkshtkumu(), C_UmuKbn.ARI, "新遺族年金支払特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkkykymd(), BizDate.valueOf("20150104"), "保険料免除特約契約日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtksknnkaisiymd(), BizDate.valueOf("20150105"), "保険料免除特約責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkgansknnkaisiymd(), BizDate.valueOf("20150106"), "保険料免除特約がん責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmhktsknnkaisiymd(), BizDate.valueOf("20150107"), "保険料免除特約復活責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjhktgansknnkaisiymd(), BizDate.valueOf("20150108"), "保険料免除特約復活がん責任開始日");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd1(), "111", "保険料免除特約不担保部位コード１");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn1(), C_Htnpkkn.ONE, "保険料免除特約不担保期間１");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd2(), "222", "保険料免除特約不担保部位コード２");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn2(), C_Htnpkkn.TOW, "保険料免除特約不担保期間２");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd3(), "333", "保険料免除特約不担保部位コード３");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn3(), C_Htnpkkn.THREE, "保険料免除特約不担保期間３");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd4(), "444", "保険料免除特約不担保部位コード４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn4(), C_Htnpkkn.FOUR, "保険料免除特約不担保期間４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "保険料免除特約特定高度障害不担保区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getSknnkaisikitkkbn(), C_SknnkaisikitkKbn.SKNNKAISIKITK, "責任開始期特約区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getNkshrtkykhenkoymd(), BizDate.valueOf("20100101"), "年金支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukkn(), 10, "年金支払特約年金期間");
        exClassificationEquals(bAK_KykSonotaTkyk.getInitsbjiyensitihsytkhukaumu(), null, "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(bAK_KykSonotaTkyk.getInitsbjiyenkasaiteihsygk(), null, "初期死亡時円換算最低保証額");
        exClassificationEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaumu(), null, "重度介護前払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaymd(),  null, "重度介護前払特約付加日");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        IT_BAK_KykSya bAK_KykSya = bAK_KykKihon.getBAKKykSya();
        exStringEquals(bAK_KykSya.getKbnkey(), "00", "区分キー");
        exStringEquals(bAK_KykSya.getSyono(), "12806345708", "証券番号");
        exStringEquals(bAK_KykSya.getTrkssikibetukey(), "12348", "取消識別キー");
        exStringEquals(bAK_KykSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_KykSya.getKyksakuinmeino(), "1000000001", "契約者索引名番号");
        exStringEquals(bAK_KykSya.getKyknmkn(), "契約名カナ（本ＴＢＬ）", "契約者名（カナ）");
        exStringEquals(bAK_KykSya.getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exClassificationEquals(bAK_KykSya.getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exDateEquals(bAK_KykSya.getKykseiymd(), BizDate.valueOf("20150201"), "契約者生年月日");
        exClassificationEquals(bAK_KykSya.getKyksei(), C_Kyksei.FEMALE, "契約者性別");
        exClassificationEquals(bAK_KykSya.getKkkyktdk(), C_Tdk.SONOTA, "契約管理契約者続柄");
        exStringEquals(bAK_KykSya.getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_KykSya.getTsinadr1kn(), "通信先住所１カナ１", "通信先住所１（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr1kj(), "通信先住所１漢字１", "通信先住所１（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr2kn(), "通信先住所２カナ１", "通信先住所２（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr2kj(), "通信先住所２漢字１", "通信先住所２（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr3kn(), "通信先住所３カナ１", "通信先住所３（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr3kj(), "通信先住所３漢字１", "通信先住所３（漢字）");
        exStringEquals(bAK_KykSya.getTsintelno(), null, "通信先電話番号");
        exStringEquals(bAK_KykSya.getDai2tsintelno(), null, "第２通信先電話番号");
        exStringEquals(bAK_KykSya.getTsinmailaddress(), "test1@test.com", "通信先メールアドレス");
        exStringEquals(bAK_KykSya.getKinmusakinm(), "勤務先名１", "勤務先名");
        exClassificationEquals(bAK_KykSya.getHjndaiykkbn(), C_HjndaiykKbn.SYOTYOU, "法人代表者役職区分");
        exStringEquals(bAK_KykSya.getHjndaiyknm(), "法人代表者役職名１", "法人代表者役職名");
        exStringEquals(bAK_KykSya.getHjndainmkn(), "法人代表者名カナ１", "法人代表者名（カナ）");
        exStringEquals(bAK_KykSya.getHjndainmkj(), "法人代表者名漢字１", "法人代表者名（漢字）");
        exStringEquals(bAK_KykSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        List<IT_BAK_KykSyouhn> bAK_KykSyouhn = bAK_KykKihon.getBAKKykSyouhns();
        exNumericEquals(bAK_KykSyouhn.size(), 0, "件数");
        List<IT_BAK_KykUkt> bAK_KykUkt = bAK_KykKihon.getBAKKykUkts();
        exNumericEquals(bAK_KykUkt.size(), 0, "件数");
        List<IT_BAK_NyknJissekiRireki> bAK_NyknJissekiRireki = bAK_KykKihon.getBAKNyknJissekiRirekis();
        exNumericEquals(bAK_NyknJissekiRireki.size(), 0, "件数");
        List<IT_BAK_SyouhnTokujou> bAK_SyouhnTokujou = bAK_KykKihon.getBAKSyouhnTokujous();
        exNumericEquals(bAK_SyouhnTokujou.size(), 0, "件数");
        List<IT_BAK_YykIdouAnsyuCreditCard> bAK_YykIdouAnsyuCreditCard = bAK_KykKihon.getBAKYykIdouAnsyuCreditCards();
        exNumericEquals(bAK_YykIdouAnsyuCreditCard.size(), 0, "件数");
        List<IT_BAK_YykIdouNaiyoHrhnk> bAK_YykIdouNaiyoHrhnk = bAK_KykKihon.getBAKYykIdouNaiyoHrhnks();
        exNumericEquals(bAK_YykIdouNaiyoHrhnk.size(), 0, "件数");
        List<IT_BAK_YykIdouUktk> bAK_YykIdouUktk = bAK_KykKihon.getBAKYykIdouUktks();
        exNumericEquals(bAK_YykIdouUktk.size(), 0, "件数");
        List<IT_BAK_HengakuUnit> bAK_HengakuUnit = bAK_KykKihon.getBAKHengakuUnits();
        exNumericEquals(bAK_HengakuUnit.size(), 0, "件数");
        List<IT_BAK_KhTtdkRireki> bAK_KhTtdkRireki = bAK_KykKihon.getBAKKhTtdkRirekis();
        exNumericEquals(bAK_KhTtdkRireki.size(), 0, "件数");
        List<IT_BAK_Tesuuryou> bAK_Tesuuryou = bAK_KykKihon.getBAKTesuuryous();
        exNumericEquals(bAK_Tesuuryou.size(), 0, "件数");
        List<IT_BAK_KoujyoSym> bAK_KoujyoSym = bAK_KykKihon.getBAKKoujyoSyms();
        exNumericEquals(bAK_KoujyoSym.size(), 0, "件数");
        List<IT_BAK_Suiihyou> bAK_Suiihyou = bAK_KykKihon.getBAKSuiihyous();
        exNumericEquals(bAK_Suiihyou.size(), 0, "件数");
        List<IT_BAK_TtdkKan> bAK_TtdkKan = bAK_KykKihon.getBAKTtdkKans();
        exNumericEquals(bAK_TtdkKan.size(), 0, "件数");
        List<IT_BAK_HokenSyouken> bAK_HokenSyouken = bAK_KykKihon.getBAKHokenSyoukens();
        exNumericEquals(bAK_HokenSyouken.size(), 0, "件数");
        List<IT_BAK_TrkKzk> bAK_TrkKzk = bAK_KykKihon.getBAKTrkKzks();
        exNumericEquals(bAK_TrkKzk.size(), 0, "件数");
        List<IT_BAK_CreditCardInfo> bAK_CreditCardInfo = bAK_KykKihon.getBAKCreditCardInfos();
        exNumericEquals(bAK_CreditCardInfo.size(), 0, "件数");
        List<IT_BAK_KoujyoSymNaiyouD> bAK_KoujyoSymNaiyouD = bAK_KykKihon.getBAKKoujyoSymNaiyouDs();
        exNumericEquals(bAK_KoujyoSymNaiyouD.size(), 0, "件数");

        exNumericEquals(bAK_KhDenpyoData.size(), 0, "件数");

        exNumericEquals(bAK_KhFBSoukinData.size(), 0, "件数");

        exNumericEquals(bAK_KhGaikaFBSoukinData.size(), 0, "件数");

        exNumericEquals(bAK_KhSntkInfoTouroku.size(), 0, "件数");

        assertNull(bAK_AnsyuKihon);

        exNumericEquals(bAK_SmbcStyKanri.size(), 0, "件数");

        exNumericEquals(bAK_KhHenkouUktk.size(), 0, "件数");

        exNumericEquals(bAK_KhHaitouKanri.size(), 0, "件数");

        exNumericEquals(bAK_KhTumitateDKanri.size(), 0, "件数");

        exNumericEquals(bAK_NyuukinKakusyouData.size(), 0, "件数");

        exNumericEquals(bAK_KhDshrTuki.size(), 0, "件数");
    }

    @Test
    @Transactional
    @TestOrder(60)
    public void testTableMaintenanceUtil_backUp_1_6() {

        newData();

        deleteBackupData();

        kinou.setKinouKbn(C_KinouKbn.ONLINE);

        tableMaintenanceUtil.backUp("17806000013", "12347");

        bAK_KykKihon = tableMaintenanceUtil.getBakKykKihon();

        bAK_AnsyuKihon = tableMaintenanceUtil.getBakAnsyuKihon();

        bAK_KhDenpyoData = tableMaintenanceUtil.getBakKhDenpyoDataList();

        bAK_KhFBSoukinData = tableMaintenanceUtil.getBakKhFBSoukinDataList();

        bAK_KhGaikaFBSoukinData = tableMaintenanceUtil.getBakKhGaikaFBSoukinDataList();

        bAK_KhSntkInfoTouroku = tableMaintenanceUtil.getBakKhSntkInfoTourokuList();

        bAK_SmbcStyKanri = tableMaintenanceUtil.getBakSmbcStyKanriList();

        bAK_KhHenkouUktk = tableMaintenanceUtil.getBakKhHenkouUktkList();

        bAK_KhHaitouKanri = tableMaintenanceUtil.getBakKhHaitouKanriList();

        bAK_KhTumitateDKanri = tableMaintenanceUtil.getBakKhTumitateDKanriList();

        bAK_NyuukinKakusyouData = tableMaintenanceUtil.getBakNyuukinKakusyouDataList();

        bAK_KhDshrTuki = tableMaintenanceUtil.getBakKhDshrTukiList();

        exStringEquals(bAK_KykKihon.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KykKihon.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KykKihon.getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KykKihon.getAitesyono(), "17806000013", "相手証券番号");
        exClassificationEquals(bAK_KykKihon.getHaitoukbn(), C_HaitouKbn.RISAHAI, "配当区分");
        exClassificationEquals(bAK_KykKihon.getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exClassificationEquals(bAK_KykKihon.getHrkkeiro(), C_Hrkkeiro.DANTAI, "払込経路");
        exClassificationEquals(bAK_KykKihon.getSdpdkbn(), C_Sdpd.GIJIPD, "Ｓ建Ｐ建区分");
        exClassificationEquals(bAK_KykKihon.getDntryouritukbn(), C_DntryourituKbn.A, "団体料率区分");
        exStringEquals(bAK_KykKihon.getDntcd(), "003", "団体コード");
        exClassificationEquals(bAK_KykKihon.getSntkhoukbn(), C_SntkhouKbn.HJY, "選択方法区分");
        exClassificationEquals(bAK_KykKihon.getSinsakbn(), C_SinsaKbn.KENKOUKANRISYOUMEISY, "診査区分");
        exDateEquals(bAK_KykKihon.getMosymd(), BizDate.valueOf("20150202"), "申込日");
        exDateEquals(bAK_KykKihon.getKktymd(), BizDate.valueOf("20150303"), "告知日");
        exDateEquals(bAK_KykKihon.getFstpnyknymd(), BizDate.valueOf("20150404"), "初回保険料入金日");
        exDateEquals(bAK_KykKihon.getMosukeymd(), BizDate.valueOf("20150505"), "申込書受付日");
        exDateEquals(bAK_KykKihon.getMosjimosuktymd(), BizDate.valueOf("20150606"), "申込時申込書受付日");
        exDateEquals(bAK_KykKihon.getSeirituymd(), BizDate.valueOf("20150707"), "成立日");
        exDateEquals(bAK_KykKihon.getItiprsymd(), BizDate.valueOf("20150808"), "１Ｐ領収予定日");
        exBizCalcbleEquals(bAK_KykKihon.getHrkp(), BizCurrency.valueOf(10002), "払込保険料");
        exDateYMEquals(bAK_KykKihon.getBosyuuym(), BizDateYM.valueOf("201503"), "募集年月");
        exDateYMEquals(bAK_KykKihon.getSeisekiym(), BizDateYM.valueOf("201505"), "成績計上年月");
        exDateYMEquals(bAK_KykKihon.getSkeikeijyouym(), BizDateYM.valueOf("201507"), "新契約計上年月");
        exStringEquals(bAK_KykKihon.getPlancd(), "004", "プランコード");
        exNumericEquals(bAK_KykKihon.getPlanrenno(), 03, "プラン連番");
        exClassificationEquals(bAK_KykKihon.getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exClassificationEquals(bAK_KykKihon.getSyusaiumu(), C_UmuKbn.ARI, "出再有無");
        exClassificationEquals(bAK_KykKihon.getStknsetkbn(), C_StknsetKbn.NONE, "質権設定区分");
        exClassificationEquals(bAK_KykKihon.getKykksykjyumu(), C_UmuKbn.NONE, "契約者貸付約定有無");
        exClassificationEquals(bAK_KykKihon.getKykksumu(), C_UmuKbn.ARI, "契約者貸付有無");
        exClassificationEquals(bAK_KykKihon.getAplkahikbn(), C_Aplkahi.NONE, "ＡＰＬ可否区分");
        exClassificationEquals(bAK_KykKihon.getAplumu(), C_UmuKbn.NONE, "ＡＰＬ有無");
        exClassificationEquals(bAK_KykKihon.getFstphrkkeirokbn(), C_FstphrkkeiroKbn.CREDIT, "初回保険料払込経路区分");
        exDateYEquals(bAK_KykKihon.getHaitounendo(), BizDateY.valueOf("2015"), "配当年度");
        exClassificationEquals(bAK_KykKihon.getHaitoukinuketorihoukbn(), C_HaitoukinuketorihouKbn.TUMIHAI, "配当金受取方法区分");
        exClassificationEquals(bAK_KykKihon.getTratkityuiumu(), C_UmuKbn.ARI, "取扱注意有無");
        exStringEquals(bAK_KykKihon.getTratkityuiuny(), "取扱注意内容４", "取扱注意内容");
        exNumericEquals(bAK_KykKihon.getSbuktnin(), 4, "死亡受取人人数");
        exStringEquals(bAK_KykKihon.getGansindankakuteiymd(), "20150909", "がん診断確定日");
        exClassificationEquals(bAK_KykKihon.getMosuketukekbn(), C_MosUketukeKbn.PAPERLESS, "申込受付区分");
        exClassificationEquals(bAK_KykKihon.getKijikbn(), C_KijiKbn.NONE, "記事区分");
        exStringEquals(bAK_KykKihon.getHhknsykgycd(), "104", "被保険者職業コード");
        exClassificationEquals(bAK_KykKihon.getHhknnensyuukbn(), C_NensyuuKbn.UNDER1000, "被保険者年収区分");
        exStringEquals(bAK_KykKihon.getDrtenkanritodoufukencd(), "36", "代理店管理都道府県コード");
        exStringEquals(bAK_KykKihon.getCifcd(), "005", "ＣＩＦコード");
        exStringEquals(bAK_KykKihon.getSmbckanriid(), "007", "ＳＭＢＣ受付管理ＩＤ");
        exClassificationEquals(bAK_KykKihon.getTsryhshrkykumukbn(), C_UmuKbn.ARI, "手数料不支払契約有無区分");
        exClassificationEquals(bAK_KykKihon.getKykhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.KOKUMINKENKOUHOKEN, "契約者本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getSkskknhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.KOKUMINKENKOUHOKEN, "親権者後見人本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getBoskykjyoutai(), C_Boskykjyoutai.TOKKYK, "募集契約状態");
        exNumericEquals(bAK_KykKihon.getKanyuusyano(), 9, "加入者番号");
        exClassificationEquals(bAK_KykKihon.getDrctservicemoskbn(), C_DirectServiceMosKbn.ENTRY, "ダイレクトサービス申込区分");
        exClassificationEquals(bAK_KykKihon.getSksyoukenskskbn(), C_SkSyoukenSksKbn.SINKISAKUSEI, "新契約証券作成区分");
        exDateEquals(bAK_KykKihon.getSinkyksyokensakuseiymd(), BizDate.valueOf("20400101"), "新契約証券作成日");
        exDateEquals(bAK_KykKihon.getSyoyousinkyksyohakkouymd(), BizDate.valueOf("20410101"), "証券用新契約証券発行日");
        exStringEquals(bAK_KykKihon.getSkjmosno(), "1000004", "新契約時申込番号");
        exClassificationEquals(bAK_KykKihon.getNkuikosumikbn(), C_NkIkouzumiKbn.BLNK, "年金移行済区分");
        exDateEquals(bAK_KykKihon.getSyhenkouymd(), BizDate.valueOf("20151010"), "最終変更日");
        exDateEquals(bAK_KykKihon.getLastsyosaihkymd(), BizDate.valueOf("20151111"), "最終証券再発行日");
        exDateEquals(bAK_KykKihon.getLastmeihenymd(), BizDate.valueOf("20151212"), "最終名義変更日");
        exDateEquals(bAK_KykKihon.getLastkykmeighnkymd(), BizDate.valueOf("20151212"), "最終契約者名義変更日");
        exDateEquals(bAK_KykKihon.getLastsbukthenymd(), BizDate.valueOf("20151212"), "最終死亡受取人変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmseiymdhenkouymd(),null, "最終契約者名生年月日変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmkanakjteiymd(), BizDate.valueOf("20150113"), "最終契約者名仮名漢字訂正日");
        exDateEquals(bAK_KykKihon.getLasttsinynohenkouymd(), BizDate.valueOf("20150114"), "最終通信先郵便番号変更日");
        exDateEquals(bAK_KykKihon.getLastjyuuhenymd(), BizDate.valueOf("20151214"), "最終住所変更日");
        exStringEquals(bAK_KykKihon.getGyoumuKousinKinou(), "test3", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinsyaId(), "testuser3", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinTime(), "20150714111111102", "業務用更新時間");

        IT_BAK_CreditCard bAK_CreditCard = bAK_KykKihon.getBAKCreditCard();
        assertNull(bAK_CreditCard);
        List<IT_BAK_FatcaInfo> bAK_FatcaInfo = bAK_KykKihon.getBAKFatcaInfos();
        exNumericEquals(bAK_FatcaInfo.size(), 0, "件数");
        IT_BAK_HhknSya bAK_HhknSya = bAK_KykKihon.getBAKHhknSya();
        exStringEquals(bAK_HhknSya.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_HhknSya.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_HhknSya.getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_HhknSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_HhknSya.getHhknsakuinmeino(), "1000000001", "被保険者索引名番号");
        exStringEquals(bAK_HhknSya.getHhknnmkn(), "被保険者名（本ＴＢＬ）", "被保険者名（カナ）");
        exStringEquals(bAK_HhknSya.getHhknnmkj(), "被保険者名漢字１", "被保険者名（漢字）");
        exClassificationEquals(bAK_HhknSya.getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(bAK_HhknSya.getHhknseiymd(), BizDate.valueOf("20150301"), "被保険者生年月日");
        exClassificationEquals(bAK_HhknSya.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exStringEquals(bAK_HhknSya.getHhknyno(), "3334444", "被保険者郵便番号");
        exStringEquals(bAK_HhknSya.getHhknadr1kn(), "被保険者住所１カナ１", "被保険者住所１（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr1kj(), "被保険者住所１漢字１", "被保険者住所１（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr2kn(), "被保険者住所２カナ１", "被保険者住所２（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr2kj(), "被保険者住所２漢字１", "被保険者住所２（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr3kn(), "被保険者住所３カナ１", "被保険者住所３（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr3kj(), "被保険者住所３漢字１", "被保険者住所３（漢字）");
        exStringEquals(bAK_HhknSya.getHhkntelno(),null, "被保険者電話番号");
        exStringEquals(bAK_HhknSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        List<IT_BAK_Kariukekin> bAK_Kariukekin = bAK_KykKihon.getBAKKariukekins();
        exNumericEquals(bAK_Kariukekin.size(), 0, "件数");
        List<IT_BAK_KhLincSousinInfo> bAK_KhLincSousinInfo = bAK_KykKihon.getBAKKhLincSousinInfos();
        exNumericEquals(bAK_KhLincSousinInfo.size(), 0, "件数");
        IT_BAK_KhTtdkTyuui bAK_KhTtdkTyuui = bAK_KykKihon.getBAKKhTtdkTyuui();
        assertNull(bAK_KhTtdkTyuui);
        List<IT_BAK_KihrkmpSeisanRireki> bAK_KihrkmpSeisanRireki = bAK_KykKihon.getBAKKihrkmpSeisanRirekis();
        exNumericEquals(bAK_KihrkmpSeisanRireki.size(), 0, "件数");
        List<IT_BAK_KoujyoSymKanri> bAK_KoujyoSymKanri = bAK_KykKihon.getBAKKoujyoSymKanris();
        exNumericEquals(bAK_KoujyoSymKanri.size(), 0, "件数");
        List<IT_BAK_KoujyoSymNaiyou> bAK_KoujyoSymNaiyou = bAK_KykKihon.getBAKKoujyoSymNaiyous();
        exNumericEquals(bAK_KoujyoSymNaiyou.size(), 0, "件数");
        IT_BAK_Kouza bAK_Kouza = bAK_KykKihon.getBAKKouza();
        assertNull(bAK_Kouza);
        IT_BAK_TeikikinKouza bAK_TeikikinKouza = bAK_KykKihon.getBAKTeikikinKouza();
        assertNull(bAK_TeikikinKouza);
        List<IT_BAK_KykDairiten> bAK_KykDairiten = bAK_KykKihon.getBAKKykDairitens();
        exNumericEquals(bAK_KykDairiten.size(), 0, "件数");
        IT_BAK_KykSonotaTkyk bAK_KykSonotaTkyk = bAK_KykKihon.getBAKKykSonotaTkyk();
        exStringEquals(bAK_KykSonotaTkyk.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KykSonotaTkyk.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KykSonotaTkyk.getTrkssikibetukey(), "12347", "取消識別キー");
        exClassificationEquals(bAK_KykSonotaTkyk.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getStdrsktkyhkumu(), C_UmuKbn.NONE, "指定代理請求特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getStdrsktkyhkymd(), BizDate.valueOf("20150101"), "指定代理請求特約付加日");
        exClassificationEquals(bAK_KykSonotaTkyk.getYennykntkhkumu(), C_UmuKbn.ARI, "円入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getGaikanykntkhkumu(), C_UmuKbn.ARI, "外貨入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getYenshrkykkykhenkoymd(), BizDate.valueOf("20100101"), "円支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkgkkateitkumu(), C_UmuKbn.NONE, "年金額確定特約有無");
        assertEquals("年金総額保証割合", bAK_KykSonotaTkyk.getNksgkhosyuwari(), BizNumber.valueOf(25));
        exClassificationEquals(bAK_KykSonotaTkyk.getSkjbrnktsumu(), C_UmuKbn.NONE, "即時払年金特則有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku8waritkumu(), C_UmuKbn.ARI, "年金額８割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku9waritkumu(), C_UmuKbn.NONE, "年金額９割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkyentkhukaumu(), C_UmuKbn.ARI, "年金円支払特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getKwsttkhukaumu(), C_UmuKbn.NONE, "為替ターゲット特約付加有無");
        exNumericEquals(bAK_KykSonotaTkyk.getKwstargetrate(), 19, "為替ターゲットレート");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkhkumu(), C_UmuKbn.ARI, "ターゲット特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getTargettkykkykhenkoymd(), BizDate.valueOf("20100101"), "ターゲット特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkkbn(), C_TargetTkKbn.SYUUSIN, "ターゲット特約区分");
        exNumericEquals(bAK_KykSonotaTkyk.getTargettkmokuhyouti(), 123, "ターゲット特約目標値");
        exClassificationEquals(bAK_KykSonotaTkyk.getYsknkshtkumu(), C_UmuKbn.ARI, "新遺族年金支払特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkkykymd(), BizDate.valueOf("20150104"), "保険料免除特約契約日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtksknnkaisiymd(), BizDate.valueOf("20150105"), "保険料免除特約責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkgansknnkaisiymd(), BizDate.valueOf("20150106"), "保険料免除特約がん責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmhktsknnkaisiymd(), BizDate.valueOf("20150107"), "保険料免除特約復活責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjhktgansknnkaisiymd(), BizDate.valueOf("20150108"), "保険料免除特約復活がん責任開始日");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd1(), "111", "保険料免除特約不担保部位コード１");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn1(), C_Htnpkkn.ONE, "保険料免除特約不担保期間１");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd2(), "222", "保険料免除特約不担保部位コード２");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn2(), C_Htnpkkn.TOW, "保険料免除特約不担保期間２");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd3(), "333", "保険料免除特約不担保部位コード３");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn3(), C_Htnpkkn.THREE, "保険料免除特約不担保期間３");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd4(), "444", "保険料免除特約不担保部位コード４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn4(), C_Htnpkkn.FOUR, "保険料免除特約不担保期間４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "保険料免除特約特定高度障害不担保区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getSknnkaisikitkkbn(), C_SknnkaisikitkKbn.SKNNKAISIKITK, "責任開始期特約区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getNkshrtkykhenkoymd(), BizDate.valueOf("20100101"), "年金支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukkn(), 10, "年金支払特約年金期間");
        exClassificationEquals(bAK_KykSonotaTkyk.getInitsbjiyensitihsytkhukaumu(), null, "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(bAK_KykSonotaTkyk.getInitsbjiyenkasaiteihsygk(), null, "初期死亡時円換算最低保証額");
        exClassificationEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaumu(), null, "重度介護前払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaymd(),  null, "重度介護前払特約付加日");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        IT_BAK_KykSya bAK_KykSya = bAK_KykKihon.getBAKKykSya();
        exStringEquals(bAK_KykSya.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KykSya.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KykSya.getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KykSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_KykSya.getKyksakuinmeino(), "1000000001", "契約者索引名番号");
        exStringEquals(bAK_KykSya.getKyknmkn(), "契約名カナ（本ＴＢＬ）", "契約者名（カナ）");
        exStringEquals(bAK_KykSya.getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exClassificationEquals(bAK_KykSya.getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exDateEquals(bAK_KykSya.getKykseiymd(), BizDate.valueOf("20150201"), "契約者生年月日");
        exClassificationEquals(bAK_KykSya.getKyksei(), C_Kyksei.FEMALE, "契約者性別");
        exClassificationEquals(bAK_KykSya.getKkkyktdk(), C_Tdk.SONOTA, "契約管理契約者続柄");
        exStringEquals(bAK_KykSya.getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_KykSya.getTsinadr1kn(), "通信先住所１カナ１", "通信先住所１（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr1kj(), "通信先住所１漢字１", "通信先住所１（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr2kn(), "通信先住所２カナ１", "通信先住所２（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr2kj(), "通信先住所２漢字１", "通信先住所２（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr3kn(), "通信先住所３カナ１", "通信先住所３（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr3kj(), "通信先住所３漢字１", "通信先住所３（漢字）");
        exStringEquals(bAK_KykSya.getTsintelno(), null, "通信先電話番号");
        exStringEquals(bAK_KykSya.getDai2tsintelno(), null, "第２通信先電話番号");
        exStringEquals(bAK_KykSya.getTsinmailaddress(), "test1@test.com", "通信先メールアドレス");
        exStringEquals(bAK_KykSya.getKinmusakinm(), "勤務先名１", "勤務先名");
        exClassificationEquals(bAK_KykSya.getHjndaiykkbn(), C_HjndaiykKbn.SYOTYOU, "法人代表者役職区分");
        exStringEquals(bAK_KykSya.getHjndaiyknm(), "法人代表者役職名１", "法人代表者役職名");
        exStringEquals(bAK_KykSya.getHjndainmkn(), "法人代表者名カナ１", "法人代表者名（カナ）");
        exStringEquals(bAK_KykSya.getHjndainmkj(), "法人代表者名漢字１", "法人代表者名（漢字）");
        exStringEquals(bAK_KykSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        List<IT_BAK_KykSyouhn> bAK_KykSyouhn = bAK_KykKihon.getBAKKykSyouhns();
        exNumericEquals(bAK_KykSyouhn.size(), 0, "件数");
        List<IT_BAK_KykUkt> bAK_KykUkt = bAK_KykKihon.getBAKKykUkts();
        exNumericEquals(bAK_KykUkt.size(), 0, "件数");
        List<IT_BAK_NyknJissekiRireki> bAK_NyknJissekiRireki = bAK_KykKihon.getBAKNyknJissekiRirekis();
        exNumericEquals(bAK_NyknJissekiRireki.size(), 0, "件数");
        List<IT_BAK_SyouhnTokujou> bAK_SyouhnTokujou = bAK_KykKihon.getBAKSyouhnTokujous();
        exNumericEquals(bAK_SyouhnTokujou.size(), 0, "件数");
        List<IT_BAK_YykIdouAnsyuCreditCard> bAK_YykIdouAnsyuCreditCard = bAK_KykKihon.getBAKYykIdouAnsyuCreditCards();
        exNumericEquals(bAK_YykIdouAnsyuCreditCard.size(), 0, "件数");
        List<IT_BAK_YykIdouNaiyoHrhnk> bAK_YykIdouNaiyoHrhnk = bAK_KykKihon.getBAKYykIdouNaiyoHrhnks();
        exNumericEquals(bAK_YykIdouNaiyoHrhnk.size(), 0, "件数");
        List<IT_BAK_YykIdouUktk> bAK_YykIdouUktk = bAK_KykKihon.getBAKYykIdouUktks();
        exNumericEquals(bAK_YykIdouUktk.size(), 0, "件数");
        List<IT_BAK_HengakuUnit> bAK_HengakuUnit = bAK_KykKihon.getBAKHengakuUnits();
        exNumericEquals(bAK_HengakuUnit.size(), 0, "件数");
        List<IT_BAK_KhTtdkRireki> bAK_KhTtdkRireki = bAK_KykKihon.getBAKKhTtdkRirekis();
        exNumericEquals(bAK_KhTtdkRireki.size(), 0, "件数");
        List<IT_BAK_Tesuuryou> bAK_Tesuuryou = bAK_KykKihon.getBAKTesuuryous();
        exNumericEquals(bAK_Tesuuryou.size(), 0, "件数");
        List<IT_BAK_KoujyoSym> bAK_KoujyoSym = bAK_KykKihon.getBAKKoujyoSyms();
        exNumericEquals(bAK_KoujyoSym.size(), 0, "件数");
        List<IT_BAK_Suiihyou> bAK_Suiihyou = bAK_KykKihon.getBAKSuiihyous();
        exNumericEquals(bAK_Suiihyou.size(), 0, "件数");
        List<IT_BAK_TtdkKan> bAK_TtdkKan = bAK_KykKihon.getBAKTtdkKans();
        exNumericEquals(bAK_TtdkKan.size(), 0, "件数");
        List<IT_BAK_HokenSyouken> bAK_HokenSyouken = bAK_KykKihon.getBAKHokenSyoukens();
        exNumericEquals(bAK_HokenSyouken.size(), 0, "件数");
        List<IT_BAK_TrkKzk> bAK_TrkKzk = bAK_KykKihon.getBAKTrkKzks();
        exNumericEquals(bAK_TrkKzk.size(), 0, "件数");
        List<IT_BAK_CreditCardInfo> bAK_CreditCardInfo = bAK_KykKihon.getBAKCreditCardInfos();
        exNumericEquals(bAK_CreditCardInfo.size(), 0, "件数");
        List<IT_BAK_KoujyoSymNaiyouD> bAK_KoujyoSymNaiyouD = bAK_KykKihon.getBAKKoujyoSymNaiyouDs();
        exNumericEquals(bAK_KoujyoSymNaiyouD.size(), 0, "件数");

        exStringEquals(bAK_KhDenpyoData.get(0).getDenrenno(), "12345678917", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(0).getHuridenatesakicd(), "105", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTantocd(), C_TantouCdKbn.SENTAKUINFO, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(0).getDenymd(), BizDate.valueOf("20150417"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTaisyakukbn(), C_TaisyakuKbn.KARIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_PKAKIN_GAIHO_JPY, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSuitoubumoncd(), "105", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDengaikagk(), BizCurrency.valueOf(20013), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(0).getDenkawaserate(), BizNumber.valueOf(105));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getDenyenkagk(), BizCurrency.valueOf(1000000005), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getHuridenskskbn(), C_HuridensksKbn.ONLINEFB, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenhnknhoukbn(), C_DenhnknhouKbn.SONOTAHENKIN, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getDenshrhoukbn(), C_DenshrhouKbn.KARIUKERSKNASI, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(0).getSyoriYmd(), BizDate.valueOf("20150505"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyoricd(), "1005", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(0).getSyorisosikicd(), "1000005", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg1cd(), C_Segcd.BLNK, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getSeg2cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(0).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(0).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exStringEquals(bAK_KhDenpyoData.get(1).getDenrenno(), "12345678918", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(1).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(1).getHuridenatesakicd(), "106", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getTantocd(), C_TantouCdKbn.KETTEI, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(1).getDenymd(), BizDate.valueOf("20150418"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getTaisyakukbn(), C_TaisyakuKbn.KASIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_PKAKIN_GAIHO_USD, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(1).getSuitoubumoncd(), "106", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(1).getDengaikagk(), BizCurrency.valueOf(20014), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(1).getDenkawaserate(), BizNumber.valueOf(106));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(1).getDenyenkagk(), BizCurrency.valueOf(1000000006), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getHuridenskskbn(), C_HuridensksKbn.BLNK, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getDenhnknhoukbn(), C_DenhnknhouKbn.BLNK, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getDenshrhoukbn(), C_DenshrhouKbn.BLNK, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(1).getSyoriYmd(), BizDate.valueOf("20150606"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(1).getSyoricd(), "1006", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(1).getSyorisosikicd(), "1000006", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getSeg1cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getSeg2cd(), C_Segcd.BLNK, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(1).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(1).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(1).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exStringEquals(bAK_KhDenpyoData.get(2).getDenrenno(), "12345678919", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData.get(2).getEdano(), 3, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getDensyskbn(), C_DensysKbn.HKSIHARAI, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDenpyoData.get(2).getHuridenatesakicd(), "107", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getTantocd(), C_TantouCdKbn.SYOUKENTYOUSEI, "担当コード");
        exDateEquals(bAK_KhDenpyoData.get(2).getDenymd(), BizDate.valueOf("20150419"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getTaisyakukbn(), C_TaisyakuKbn.KARIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_PKAKIN_GAIHO_AUD, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData.get(2).getSuitoubumoncd(), "107", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(2).getDengaikagk(), BizCurrency.valueOf(20015), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData.get(2).getDenkawaserate(), BizNumber.valueOf(107));
        exBizCalcbleEquals(bAK_KhDenpyoData.get(2).getDenyenkagk(), BizCurrency.valueOf(1000000007), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getHuridenskskbn(), C_HuridensksKbn.GYOUMUIGAI, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getDenhnknhoukbn(), C_DenhnknhouKbn.YUBINHARAIDASI, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getDenshrhoukbn(), C_DenshrhouKbn.FBSOUKINYOKU, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData.get(2).getSyoriYmd(), BizDate.valueOf("20150707"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData.get(2).getSyoricd(), "1007", "処理コード");
        exStringEquals(bAK_KhDenpyoData.get(2).getSyorisosikicd(), "1000007", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getSeg1cd(), C_Segcd.BLNK, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getSeg2cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData.get(2).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData.get(2).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData.get(2).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData.get(2).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exStringEquals(bAK_KhFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678916", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(0).getDenrenno(), "12345678917", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyoricd(), "1005", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyorisosikicd(), "1000005", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160505"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150427"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_YOKUJITU, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getBankcd(), "1215", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(0).getSitencd(), "126", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getYokinkbn(), C_YokinKbn.HUTUU, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKouzano(), "7654324", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）４", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getSoukingk(), BizCurrency.valueOf(1000000005), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(0).getGaikataikagk(), BizCurrency.valueOf(1000000005), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(5));

        exStringEquals(bAK_KhFBSoukinData.get(1).getFbsoukindatasikibetukey(), "12345678917", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(1).getDenrenno(), "12345678918", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(1).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSyoricd(), "1006", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSyorisosikicd(), "1000006", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(1).getSyoriYmd(), BizDate.valueOf("20160606"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(1).getDenymd(), BizDate.valueOf("20150428"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_2EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(1).getBankcd(), "1216", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(1).getSitencd(), "127", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(1).getKouzano(), "7654325", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(1).getKzmeiginmkn(), "口座名義人氏名（カナ）５", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(1).getSoukingk(), BizCurrency.valueOf(1000000006), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(1).getGaikataikagk(), BizCurrency.valueOf(1000000006), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(1).getSoukinkwsrate(), BizNumber.valueOf(6));

        exStringEquals(bAK_KhFBSoukinData.get(2).getFbsoukindatasikibetukey(), "12345678918", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData.get(2).getDenrenno(), "12345678919", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData.get(2).getEdano(), 3, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getDensyskbn(), C_DensysKbn.HKSIHARAI, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData.get(2).getSyoricd(), "1007", "処理コード");
        exStringEquals(bAK_KhFBSoukinData.get(2).getSyorisosikicd(), "1000007", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData.get(2).getSyoriYmd(), BizDate.valueOf("20160707"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData.get(2).getDenymd(), BizDate.valueOf("20150429"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData.get(2).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData.get(2).getBankcd(), "1217", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData.get(2).getSitencd(), "128", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getYokinkbn(), C_YokinKbn.TTYOKIN, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData.get(2).getKouzano(), "7654326", "口座番号");
        exStringEquals(bAK_KhFBSoukinData.get(2).getKzmeiginmkn(), "口座名義人氏名（カナ）６", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(2).getSoukingk(), BizCurrency.valueOf(1000000007), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData.get(2).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData.get(2).getGaikataikagk(), BizCurrency.valueOf(1000000007), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData.get(2).getSoukinkwsrate(), BizNumber.valueOf(7));

        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getFbsoukindatasikibetukey(), "12345678916", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getDenrenno(), "12345678917", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoricd(), "1005", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyorisosikicd(), "1000005", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getSyoriYmd(), BizDate.valueOf("20160505"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(0).getDenymd(), BizDate.valueOf("20150427"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_YOKUJITU, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBankcd(), "1215", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getBanknmej(), "bank5", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitencd(), "126", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getSitennmej(), "siten5", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKouzano(), "7654324", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getGaikashrgk(), BizCurrency.valueOf(5), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(0).getCrossrateshrgk(), BizCurrency.valueOf(5), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(0).getSoukinkwsrate(), BizNumber.valueOf(5));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getIrninnmei(), "irni4", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinKinou(), "test4", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getFbsoukindatasikibetukey(), "12345678917", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getDenrenno(), "12345678918", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(1).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSyoricd(), "1006", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSyorisosikicd(), "1000006", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(1).getSyoriYmd(), BizDate.valueOf("20160606"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(1).getDenymd(), BizDate.valueOf("20150428"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_2EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getBankcd(), "1216", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getBanknmej(), "bank6", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSitencd(), "127", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getSitennmej(), "siten6", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getKouzano(), "7654325", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(1).getGaikashrgk(), BizCurrency.valueOf(6), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(1).getCrossrateshrgk(), BizCurrency.valueOf(6), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(1).getSoukinkwsrate(), BizNumber.valueOf(6));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getIrninnmei(), "irni5", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getFbsoukindatasikibetukey(), "12345678918", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getDenrenno(), "12345678919", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData.get(2).getEdano(), 3, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getDensyskbn(), C_DensysKbn.HKSIHARAI, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSyoricd(), "1007", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSyorisosikicd(), "1000007", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(2).getSyoriYmd(), BizDate.valueOf("20160707"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData.get(2).getDenymd(), BizDate.valueOf("20150429"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getBankcd(), "1217", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getBanknmej(), "bank7", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSitencd(), "128", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getSitennmej(), "siten7", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getKouzano(), "7654326", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(2).getGaikashrgk(), BizCurrency.valueOf(7), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData.get(2).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData.get(2).getCrossrateshrgk(), BizCurrency.valueOf(7), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData.get(2).getSoukinkwsrate(), BizNumber.valueOf(7));
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getIrninnmei(), "irni6", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getGyoumuKousinKinou(), "test6", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getRenno(), 1, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getSyoriYmd(), BizDate.valueOf("20150104"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kykno(), "1000000005", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getHuho2kyknokbn(), C_Huho2kyknoKbn.MOSNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyouhncd(), "1005", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkn(), "タイショウシャシメイ５", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyounmkj(), "タイショウシャシメイ５", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseiymd(), BizDate.valueOf("20160505"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKetymd(), BizDate.valueOf("20150404"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getKetsyacd(), "55", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getPalketsyacd(), "55", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getSintyou(), 140, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(0).getTaijyuu(), 80, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(0).getKktymd(), BizDate.valueOf("20150404"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd1(), "44", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym1(), BizDateYM.valueOf("201504"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoucd2(), "44", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(0).getKantiym2(), BizDateYM.valueOf("201504"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(0).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinKinou(), "test4", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(1).getRenno(), 2, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getSyoriYmd(), BizDate.valueOf("20150105"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getHuho2kykno(), "1000000006", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getHuho2kyknokbn(), C_Huho2kyknoKbn.SYONO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyouhncd(), "1006", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyounmkn(), "タイショウシャシメイ６", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyounmkj(), "タイショウシャシメイ６", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyouseiymd(), BizDate.valueOf("20160606"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getKetymd(), BizDate.valueOf("20150505"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getKetsyacd(), "66", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getPalketsyacd(), "66", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(1).getSintyou(), 150, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(1).getTaijyuu(), 90, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(1).getKktymd(), BizDate.valueOf("20150505"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoucd1(), "55", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(1).getKantiym1(), BizDateYM.valueOf("201505"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoucd2(), "55", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(1).getKantiym2(), BizDateYM.valueOf("201505"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(1).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(2).getRenno(), 3, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku.get(2).getSyoriYmd(), BizDate.valueOf("20150106"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getHuho2kykno(), "1000000007", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getHuho2kyknokbn(), C_Huho2kyknoKbn.NKSYSYNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getSyouhncd(), "1007", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getTaisyounmkn(), "タイショウシャシメイ７", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getTaisyounmkj(), "タイショウシャシメイ７", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku.get(2).getTaisyouseiymd(), BizDate.valueOf("20160707"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku.get(2).getKetymd(), BizDate.valueOf("20150606"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getKetsyacd(), "77", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getPalketsyacd(), "77", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(2).getSintyou(), 160, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku.get(2).getTaijyuu(), 100, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku.get(2).getKktymd(), BizDate.valueOf("20150606"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getSyoubyoucd1(), "66", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(2).getKantiym1(), BizDateYM.valueOf("201506"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getSyoubyoucd2(), "66", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku.get(2).getKantiym2(), BizDateYM.valueOf("201506"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku.get(2).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getGyoumuKousinKinou(), "test6", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exStringEquals(bAK_AnsyuKihon.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_AnsyuKihon.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_AnsyuKihon.getTrkssikibetukey(), "12347", "取消識別キー");
        exDateYMEquals(bAK_AnsyuKihon.getJkipjytym(), BizDateYM.valueOf("201503"), "次回Ｐ充当年月");
        exClassificationEquals(bAK_AnsyuKihon.getTkiktannaitukisuu(), C_Tkiktannaitukisuu.SIXMONTHS, "定期一括案内月数");
        exClassificationEquals(bAK_AnsyuKihon.getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.SUMI, "控除証明書発行済フラグ");
        exDateEquals(bAK_AnsyuKihon.getSyuharaimanymd(), BizDate.valueOf("20150403"), "主契約払満日");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuKihon.getGyoumuKousinTime(), "20150714111111102", "業務用更新時間");

        IT_BAK_AnsyuCreditCard bAK_AnsyuCreditCard = bAK_AnsyuKihon.getBAKAnsyuCreditCard();
        assertNull(bAK_AnsyuCreditCard);
        List<IT_BAK_AnsyuRireki> bAK_AnsyuRireki = bAK_AnsyuKihon.getBAKAnsyuRirekis();
        exNumericEquals(bAK_AnsyuRireki.size(), 0, "件数");
        IT_BAK_DattaiUktk bAK_DattaiUktk = bAK_AnsyuKihon.getBAKDattaiUktk();
        assertNull(bAK_DattaiUktk);
        List<IT_BAK_SyuunouHenknRireki> bAK_SyuunouHenknRireki = bAK_AnsyuKihon.getBAKSyuunouHenknRirekis();
        exNumericEquals(bAK_SyuunouHenknRireki.size(), 0, "件数");
        IT_BAK_Tokusin bAK_Tokusin = bAK_AnsyuKihon.getBAKTokusin();
        assertNull(bAK_Tokusin);

        exDateEquals(bAK_SmbcStyKanri.get(0).getDatarenymd(), BizDate.valueOf("20151013"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(0).getDatasakuseirenno(), BizNumber.valueOf(1234573));
        exStringEquals(bAK_SmbcStyKanri.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(0).getRendouflg(), C_Rendouflg.MIRENDOU, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatakbn(), "7", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcdatasakuseiymd(), "20151014", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbchknkaisyacd(), "58", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcuktkkanriid(), "1234567893", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihouktkzmymd(), "20151114", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbymd(), "20151215", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcbankhnkykflg(), "4", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohbksyymd(), "20150116", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohjyttykymd(), "20150217", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihonyknzmymd(), "20150318", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosnszmymd(), "20150419", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyknhkkzmymd(), "20150520", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyumoku(), "22", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihosyurui(), "32", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyono(), "12806345694", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcsyonoedaban(), "00004", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcjktkflg(), "3", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihotrksymd(), "20150621", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcseihohktymd(), "20150722", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckykseiymd(), "20150823", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）４", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmosuktymd(), "20150924", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getSmbckosyaareastyknr(), "12121212121203", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinKinou(), "test4", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exDateEquals(bAK_SmbcStyKanri.get(1).getDatarenymd(), BizDate.valueOf("20151014"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(1).getDatasakuseirenno(), BizNumber.valueOf(1234574));
        exStringEquals(bAK_SmbcStyKanri.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(1).getMosno(),null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(1).getRendouflg(), C_Rendouflg.RENDOUZUMI, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcdatakbn(), "8", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcdatasakuseiymd(), "20151015", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbchknkaisyacd(), "59", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcuktkkanriid(), "1234567894", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihouktkzmymd(), "20151115", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohbymd(), "20151216", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcbankhnkykflg(), "5", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohbksyymd(), "20150117", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohjyttykymd(), "20150218", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihonyknzmymd(), "20150319", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosnszmymd(), "20150420", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosyknhkkzmymd(), "20150521", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosyumoku(), "23", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihosyurui(), "33", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcsyono(), "12806345694", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcsyonoedaban(), "00005", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcjktkflg(), "4", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihotrksymd(), "20150622", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcseihohktymd(), "20150723", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbckykseiymd(), "20150824", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）５", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcmosuktymd(), "20150925", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getSmbckosyaareastyknr(), "12121212121204", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(1).getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exDateEquals(bAK_SmbcStyKanri.get(2).getDatarenymd(), BizDate.valueOf("20151015"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri.get(2).getDatasakuseirenno(), BizNumber.valueOf(1234575));
        exStringEquals(bAK_SmbcStyKanri.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(2).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri.get(2).getRendouflg(), C_Rendouflg.MIRENDOU, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcdatakbn(), "9", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcdatasakuseiymd(), "20151016", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbchknkaisyacd(), "60", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcuktkkanriid(), "1234567895", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihouktkzmymd(), "20151116", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihohbymd(), "20151217", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcbankhnkykflg(), "6", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihohbksyymd(), "20150118", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihohjyttykymd(), "20150219", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihonyknzmymd(), "20150320", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihosnszmymd(), "20150421", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihosyknhkkzmymd(), "20150522", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihosyumoku(), "24", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihosyurui(), "34", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcsyono(), "12806345694", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcsyonoedaban(), "00006", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcjktkflg(), "5", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihotrksymd(), "20150623", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcseihohktymd(), "20150724", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbckykseiymd(), "20150825", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）６", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcmosuktymd(), "20150926", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getSmbckosyaareastyknr(), "12121212121205", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri.get(2).getGyoumuKousinKinou(), "test6", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(0).getUktkymd(), BizDate.valueOf("20180108"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getTourokuroute(), C_TourokuRouteKbn.DS, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktksyorikbn(), C_UktkSyoriKbn.KAIYAKU, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20180208"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(0).getSyoriyoteiymd(), BizDate.valueOf("20180308"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.SYORIZUMI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(1).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(1).getHozenhenkouuktkrenno(), 2, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(1).getUktkymd(), BizDate.valueOf("20180109"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getTourokuroute(), C_TourokuRouteKbn.TEL, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getUktksyorikbn(), C_UktkSyoriKbn.BLNK, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(1).getKouryokuhasseiymd(), BizDate.valueOf("20180209"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(1).getSyoriyoteiymd(), BizDate.valueOf("20180309"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.TORIKESI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(2).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(2).getHozenhenkouuktkrenno(), 3, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(2).getUktkymd(), BizDate.valueOf("20180110"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(2).getTourokuroute(), C_TourokuRouteKbn.BLNK, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(2).getUktksyorikbn(), C_UktkSyoriKbn.KAIYAKU, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(2).getKouryokuhasseiymd(), BizDate.valueOf("20180210"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(2).getSyoriyoteiymd(), BizDate.valueOf("20180310"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(2).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.ERROR, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(2).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(2).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        List<IT_BAK_KhHenkouUktkKaiyaku> bAK_KhHenkouUktkKaiyakuLst1 = bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus();
        exNumericEquals(bAK_KhHenkouUktkKaiyakuLst1.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkKaiyaku> bAK_KhHenkouUktkKaiyakuLst2 = bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus();
        exNumericEquals(bAK_KhHenkouUktkKaiyakuLst2.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkKaiyaku> bAK_KhHenkouUktkKaiyakuLst3 = bAK_KhHenkouUktk.get(2).getBAKKhHenkouUktkKaiyakus();
        exNumericEquals(bAK_KhHenkouUktkKaiyakuLst3.size(), 0, "件数");

        List<IT_BAK_KhHenkouUktkYendtHnk> bAK_KhHenkouUktkYendtHnkLst1 = bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks();
        exNumericEquals(bAK_KhHenkouUktkYendtHnkLst1.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkYendtHnk> bAK_KhHenkouUktkYendtHnkLst2 = bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks();
        exNumericEquals(bAK_KhHenkouUktkYendtHnkLst2.size(), 0, "件数");
        List<IT_BAK_KhHenkouUktkYendtHnk> bAK_KhHenkouUktkYendtHnkLst3 = bAK_KhHenkouUktk.get(2).getBAKKhHenkouUktkYendtHnks();
        exNumericEquals(bAK_KhHenkouUktkYendtHnkLst3.size(), 0, "件数");

        exStringEquals(bAK_KhHaitouKanri.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(0).getRenno(), 8, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.SEISIKI, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2016"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getTounendod(), BizCurrency.valueOf(80000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrymd(), BizDate.valueOf("20180108"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedruigk(), BizCurrency.valueOf(90000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(8000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(12000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(0).getGyoumuKousinTime(), "20181018111111118", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri.get(1).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(1).getRenno(), 9, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(1).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIDSIHARAI, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(1).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(1).getFstkariwariatednendo(), BizDateY.valueOf("2017"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getTounendod(), BizCurrency.valueOf(90000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.NAITEI, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(1).getKariwariatedshrymd(), BizDate.valueOf("20180109"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getKariwariatedruigk(), BizCurrency.valueOf(100000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getKariwariatedgngkkngk(), BizCurrency.valueOf(9000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(1).getKariwariatedshrgk(), BizCurrency.valueOf(13000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(1).getGyoumuKousinTime(), "20181018111111119", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri.get(2).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHaitouKanri.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHaitouKanri.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri.get(2).getRenno(), 10, "連番");
        exClassificationEquals(bAK_KhHaitouKanri.get(2).getHaitoukinskskbn(), C_HaitoukinsksKbn.YENDTHNKSEISIKI, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri.get(2).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri.get(2).getFstkariwariatednendo(), BizDateY.valueOf("2018"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(2).getTounendod(), BizCurrency.valueOf(100000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri.get(2).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri.get(2).getKariwariatedshrymd(), BizDate.valueOf("20180110"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(2).getKariwariatedruigk(), BizCurrency.valueOf(110000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(2).getKariwariatedgngkkngk(), BizCurrency.valueOf(10000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri.get(2).getKariwariatedshrgk(), BizCurrency.valueOf(14000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri.get(2).getGyoumuKousinTime(), "20181018111111110", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20180108"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(0).getRenno(), 8, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.RISOKUKURIIRE, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(0).getTumitated(), BizCurrency.valueOf(90000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20180208"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(0).getGyoumuKousinTime(), "20181018111111118", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(1).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(1).getTumitatedtumitateymd(), BizDate.valueOf("20180109"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(1).getRenno(), 9, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(1).getTumitatedskskbn(), C_TumitateDSakuseiKbn.SEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(1).getTumitated(), BizCurrency.valueOf(100000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(1).getTumitatedshrkrkymd(), BizDate.valueOf("20180209"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.NAITEI, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(1).getGyoumuKousinTime(), "20181018111111119", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri.get(2).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri.get(2).getTumitatedtumitateymd(), BizDate.valueOf("20180110"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri.get(2).getRenno(), 10, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri.get(2).getTumitatedskskbn(), C_TumitateDSakuseiKbn.YENDTHNKSEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri.get(2).getTumitated(), BizCurrency.valueOf(110000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri.get(2).getTumitatedshrkrkymd(), BizDate.valueOf("20180210"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri.get(2).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri.get(2).getGyoumuKousinTime(), "20181018111111110", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyouno(), "23214331223451323212", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyksyoriymd(), BizDate.valueOf("20180108"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180208"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNykkeiro(), C_Nykkeiro.SKEI, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.HARAIHENYOUP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(0).getJyuutouym(), BizDateYM.valueOf("201808"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuuy(), 8, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(0).getJyutoukaisuum(), 3, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(0).getRsgaku(), BizCurrency.valueOf(80000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getRyosyuymd(), BizDate.valueOf("20180308"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getDenrenno(), "10000000000000000008", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(0).getNykdenymd(), BizDate.valueOf("20180408"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitoubumoncd(), "108", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaebankcd(), "1008", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getKzhurikaesitencd(), "208", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getTabakarikanjyono(), "08", "");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getNyuukinkakusyounrkno(), "10000008", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(0).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.OKYKSM_IKKATU, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getSuitososhikicd(), "1000008", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(0).getGyoumuKousinTime(), "20181018111111118", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(1).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getNyuukinkakusyouno(), "22133451234123123423", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getNyksyoriymd(), BizDate.valueOf("20180109"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180209"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getNykkeiro(), C_Nykkeiro.OTHER, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getNyknaiyoukbn(), C_NyknaiyouKbn.PMENYOUP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getIktnyuukinnumu(), C_UmuKbn.NONE, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(1).getJyuutouym(), BizDateYM.valueOf("201809"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(1).getJyutoukaisuuy(), 9, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(1).getJyutoukaisuum(), 2, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(1).getRsgaku(), BizCurrency.valueOf(90000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getRyosyuymd(), BizDate.valueOf("20180309"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getDenrenno(), "10000000000000000009", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(1).getNykdenymd(), BizDate.valueOf("20180409"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getSuitoubumoncd(), "109", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getKzhurikaebankcd(), "1009", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getKzhurikaesitencd(), "209", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getTabakarikanjyono(), "09", "");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getNyuukinkakusyounrkno(), "10000009", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(1).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.TAISYOUGAI, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getSuitososhikicd(), "1000009", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(1).getGyoumuKousinTime(), "20181018111111119", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData.get(2).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getNyuukinkakusyouno(), "31223142331232321253", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData.get(2).getNyksyoriymd(), BizDate.valueOf("20180110"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData.get(2).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180210"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getNykkeiro(), C_Nykkeiro.BLNK, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getHrkkaisuu(), C_Hrkkaisuu.ITIJI, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getNyknaiyoukbn(), C_NyknaiyouKbn.OTHER, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData.get(2).getJyuutouym(), BizDateYM.valueOf("201810"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData.get(2).getJyutoukaisuuy(), 10, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData.get(2).getJyutoukaisuum(), 1, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData.get(2).getRsgaku(), BizCurrency.valueOf(100000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData.get(2).getRyosyuymd(), BizDate.valueOf("20180310"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getDenrenno(), "10000000000000000010", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData.get(2).getNykdenymd(), BizDate.valueOf("20180410"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getSuitoubumoncd(), "110", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getKzhurikaebankcd(), "1010", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getKzhurikaesitencd(), "210", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getTabakarikanjyono(), "10", "");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getNyuukinkakusyounrkno(), "10000010", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData.get(2).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.EGSYOKUIN, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getSuitososhikicd(), "1000010", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData.get(2).getGyoumuKousinTime(), "20181018111111110", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(0).getDshrtoukeisikibetukey(), "23214331223451323212", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(0).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(0).getHenkousikibetukey(), "107", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriYmd(), BizDate.valueOf("20190108"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyorikbn(), C_SyoriKbn.SBMUKOU, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(0).getSyouhncd(), "1007", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getKykjyoutai(), C_Kykjyoutai.IKKATUNK, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.MUKOU_1PMINYUUKIN, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(0).getKykymd(), BizDate.valueOf("20190408"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(0).getYendthnkymd(), BizDate.valueOf("20190508"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKihons(), BizCurrency.valueOf(999998), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(0).getYoteiriritu(), BizNumber.valueOf(1.28));
        exDateEquals(bAK_KhDshrTuki.get(0).getDenymd(), BizDate.valueOf("20190608"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getSiharaid(), BizCurrency.valueOf(888888), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(0).getCalckijyunymd(), BizDate.valueOf("20190708"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(0).getSyoriymd2(), BizDate.valueOf("20190808"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(0).getJkipjytym(), BizDateYM.valueOf("201910"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(0).getKinoubetukijyunymd(), BizDate.valueOf("20190908"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(0).getGengkwari(), BizNumber.valueOf(0.18));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getItibushrgk(), BizCurrency.valueOf(118), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkin(), BizCurrency.valueOf(228), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk(), BizCurrency.valueOf(338), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(448), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(558), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getDkeisanhaitoukin(), BizCurrency.valueOf(668), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitoushrkingk(), BizCurrency.valueOf(18), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedganrikindshr(), BizCurrency.valueOf(29), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated(), BizCurrency.valueOf(40), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosimae(), BizCurrency.valueOf(51), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitatedmodosigo(), BizCurrency.valueOf(62), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTkbthaitou(), BizCurrency.valueOf(73), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(0).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.SEISIKI, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTounendod(), BizCurrency.valueOf(448), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrymd(), BizDate.valueOf("20201008"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedruigk2(), BizCurrency.valueOf(558), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedgngkkngk2(), BizCurrency.valueOf(668), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getKariwariatedshrgk2(), BizCurrency.valueOf(778), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20201108"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.YENDTHNKSEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getTumitated2(), BizCurrency.valueOf(888), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20191208"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(0).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalckari(), BizCurrency.valueOf(998), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(0).getKariwariatedriritu1(), BizNumber.valueOf(0.218));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(0).getKariwariatedriritu2(), BizNumber.valueOf(0.118));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(0).getHaitouganrikincalctumi(), BizCurrency.valueOf(22228), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(0).getTumitatedriritu1(), BizNumber.valueOf(0.138));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(0).getTumitatedriritu2(), BizNumber.valueOf(0.148));
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(0).getGyoumuKousinTime(), "20181018111111118", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(1).getDshrtoukeisikibetukey(), "22133451234123123423", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(1).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(1).getHenkousikibetukey(), "108", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(1).getSyoriYmd(), BizDate.valueOf("20190109"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getSyorikbn(), C_SyoriKbn.SBKAIJO, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getHrkkeiro(), C_Hrkkeiro.DANTAI, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(1).getSyouhncd(), "1008", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(1).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getKykjyoutai(), C_Kykjyoutai.ITIJIBARAI, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getSyoumetujiyuu(), C_Syoumetujiyuu.GANMUKOU, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(1).getKykymd(), BizDate.valueOf("20190409"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(1).getYendthnkymd(), BizDate.valueOf("20190509"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKihons(), BizCurrency.valueOf(999999), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(1).getYoteiriritu(), BizNumber.valueOf(1.29));
        exDateEquals(bAK_KhDshrTuki.get(1).getDenymd(), BizDate.valueOf("20190609"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getSiharaid(), BizCurrency.valueOf(888889), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(1).getCalckijyunymd(), BizDate.valueOf("20190709"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(1).getSyoriymd2(), BizDate.valueOf("20190809"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(1).getJkipjytym(), BizDateYM.valueOf("201911"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(1).getKinoubetukijyunymd(), BizDate.valueOf("20190909"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(1).getGengkwari(), BizNumber.valueOf(0.19));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getItibushrgk(), BizCurrency.valueOf(119), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitoushrkin(), BizCurrency.valueOf(229), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedruigk(), BizCurrency.valueOf(339), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedgngkkngk(), BizCurrency.valueOf(449), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedshrgk(), BizCurrency.valueOf(559), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getDkeisanhaitoukin(), BizCurrency.valueOf(669), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(1).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitoushrkingk(), BizCurrency.valueOf(19), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedganrikindshr(), BizCurrency.valueOf(30), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitated(), BizCurrency.valueOf(41), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitatedmodosimae(), BizCurrency.valueOf(52), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitatedmodosigo(), BizCurrency.valueOf(63), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTkbthaitou(), BizCurrency.valueOf(74), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(1).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIDSIHARAI, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(1).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTounendod(), BizCurrency.valueOf(449), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(1).getKariwariatedshrymd(), BizDate.valueOf("20201009"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedruigk2(), BizCurrency.valueOf(559), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedgngkkngk2(), BizCurrency.valueOf(669), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getKariwariatedshrgk2(), BizCurrency.valueOf(779), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(1).getTumitatedtumitateymd(), BizDate.valueOf("20201109"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getTumitatedskskbn(), C_TumitateDSakuseiKbn.ZENHIKIDASI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getTumitated2(), BizCurrency.valueOf(889), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(1).getTumitatedshrkrkymd(), BizDate.valueOf("20191209"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(1).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitouganrikincalckari(), BizCurrency.valueOf(999), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(1).getKariwariatedriritu1(), BizNumber.valueOf(0.219));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(1).getKariwariatedriritu2(), BizNumber.valueOf(0.119));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(1).getHaitouganrikincalctumi(), BizCurrency.valueOf(22229), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(1).getTumitatedriritu1(), BizNumber.valueOf(0.139));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(1).getTumitatedriritu2(), BizNumber.valueOf(0.149));
        exStringEquals(bAK_KhDshrTuki.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(1).getGyoumuKousinTime(), "20181018111111119", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki.get(2).getDshrtoukeisikibetukey(), "31223142331232321253", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDshrTuki.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki.get(2).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki.get(2).getHenkousikibetukey(), "109", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki.get(2).getSyoriYmd(), BizDate.valueOf("20190110"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getSyorikbn(), C_SyoriKbn.SBMENSEKI, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getHrkkeiro(), C_Hrkkeiro.SYUUDAN, "払込経路");
        exStringEquals(bAK_KhDshrTuki.get(2).getSyouhncd(), "1009", "商品コード");
        exNumericEquals(bAK_KhDshrTuki.get(2).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getKykjyoutai(), C_Kykjyoutai.BLNK, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getSyoumetujiyuu(), C_Syoumetujiyuu.SIBOU, "消滅事由");
        exDateEquals(bAK_KhDshrTuki.get(2).getKykymd(), BizDate.valueOf("20190410"), "契約日");
        exDateEquals(bAK_KhDshrTuki.get(2).getYendthnkymd(), BizDate.valueOf("20190510"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKihons(), BizCurrency.valueOf(1000000), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki.get(2).getYoteiriritu(), BizNumber.valueOf(1.3));
        exDateEquals(bAK_KhDshrTuki.get(2).getDenymd(), BizDate.valueOf("20190610"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getSiharaid(), BizCurrency.valueOf(888890), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki.get(2).getCalckijyunymd(), BizDate.valueOf("20190710"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki.get(2).getSyoriymd2(), BizDate.valueOf("20190810"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki.get(2).getJkipjytym(), BizDateYM.valueOf("201912"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki.get(2).getKinoubetukijyunymd(), BizDate.valueOf("20190910"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki.get(2).getGengkwari(), BizNumber.valueOf(0.2));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getItibushrgk(), BizCurrency.valueOf(120), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getHaitoushrkin(), BizCurrency.valueOf(230), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedruigk(), BizCurrency.valueOf(340), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedgngkkngk(), BizCurrency.valueOf(450), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedshrgk(), BizCurrency.valueOf(560), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getDkeisanhaitoukin(), BizCurrency.valueOf(670), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki.get(2).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getHaitoushrkingk(), BizCurrency.valueOf(20), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedganrikindshr(), BizCurrency.valueOf(31), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTumitated(), BizCurrency.valueOf(42), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTumitatedmodosimae(), BizCurrency.valueOf(53), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTumitatedmodosigo(), BizCurrency.valueOf(64), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTkbthaitou(), BizCurrency.valueOf(75), "特別配当");
        exDateYEquals(bAK_KhDshrTuki.get(2).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getHaitoukinskskbn(), C_HaitoukinsksKbn.YENDTHNKSEISIKI, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki.get(2).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTounendod(), BizCurrency.valueOf(450), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki.get(2).getKariwariatedshrymd(), BizDate.valueOf("20201010"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedruigk2(), BizCurrency.valueOf(560), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedgngkkngk2(), BizCurrency.valueOf(670), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getKariwariatedshrgk2(), BizCurrency.valueOf(780), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki.get(2).getTumitatedtumitateymd(), BizDate.valueOf("20201110"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getTumitatedskskbn(), C_TumitateDSakuseiKbn.ITIBUHIKIDASI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getTumitated2(), BizCurrency.valueOf(890), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki.get(2).getTumitatedshrkrkymd(), BizDate.valueOf("20191210"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki.get(2).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getHaitouganrikincalckari(), BizCurrency.valueOf(1000), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki.get(2).getKariwariatedriritu1(), BizNumber.valueOf(0.22));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki.get(2).getKariwariatedriritu2(), BizNumber.valueOf(0.12));
        exBizCalcbleEquals(bAK_KhDshrTuki.get(2).getHaitouganrikincalctumi(), BizCurrency.valueOf(22230), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki.get(2).getTumitatedriritu1(), BizNumber.valueOf(0.14));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki.get(2).getTumitatedriritu2(), BizNumber.valueOf(0.15));
        exStringEquals(bAK_KhDshrTuki.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki.get(2).getGyoumuKousinTime(), "20181018111111110", "業務用更新時間");

        testTableMaintenanceUtil_backUp_1_6_Db();
    }

    private void testTableMaintenanceUtil_backUp_1_6_Db() {
        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);
        SinkeiyakuDomManager sinkeiyakuDomManager = SWAKInjector.getInstance(SinkeiyakuDomManager.class);

        IT_BAK_KykKihon bAK_KykKihon1 = hozenDomManager.getBAKKykKihon("17806000013", "12347");

        IT_BAK_AnsyuKihon bAK_AnsyuKihon1 = hozenDomManager.getBAKAnsyuKihon("17806000013", "12347");

        List<IT_BAK_KhDenpyoData> bAK_KhDenpyoData1 = hozenDomManager.getBAKKhDenpyoDatasBySyonoTrkssikibetukey("17806000013", "12347");

        List<IT_BAK_KhFBSoukinData> bAK_KhFBSoukinData1 = hozenDomManager.getBAKKhFBSoukinDatasBySyonoTrkssikibetukey("17806000013", "12347");

        List<IT_BAK_KhGaikaFBSoukinData> bAK_KhGaikaFBSoukinData1 = hozenDomManager.getBAKKhGaikaFBSoukinDatasBySyonoTrkssikibetukey("17806000013", "12347");

        List<IT_BAK_KhSntkInfoTouroku> bAK_KhSntkInfoTouroku1 = hozenDomManager.getAllBAKKhSntkInfoTouroku();
        List<HT_BAK_SmbcStyKanri> bAK_SmbcStyKanri1 = sinkeiyakuDomManager.getBAKSmbcStyKanrisBySyonoTrkssikibetukey("17806000013", "12347");

        List<IT_BAK_KhHenkouUktk> bAK_KhHenkouUktk1 = hozenDomManager.getAllBAKKhHenkouUktk();

        List<IT_BAK_KhHaitouKanri> bAK_KhHaitouKanri1 = hozenDomManager.getAllBAKKhHaitouKanri();

        List<IT_BAK_KhTumitateDKanri> bAK_KhTumitateDKanri1 = hozenDomManager.getAllBAKKhTumitateDKanri();

        List<IT_BAK_NyuukinKakusyouData> bAK_NyuukinKakusyouData1 = hozenDomManager.getAllBAKNyuukinKakusyouData();

        List<IT_BAK_KhDshrTuki> bAK_KhDshrTuki1 = hozenDomManager.getAllBAKKhDshrTuki();

        exStringEquals(bAK_KykKihon1.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KykKihon1.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KykKihon1.getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KykKihon1.getAitesyono(), "17806000013", "相手証券番号");
        exClassificationEquals(bAK_KykKihon1.getHaitoukbn(), C_HaitouKbn.RISAHAI, "配当区分");
        exClassificationEquals(bAK_KykKihon1.getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exClassificationEquals(bAK_KykKihon1.getHrkkeiro(), C_Hrkkeiro.DANTAI, "払込経路");
        exClassificationEquals(bAK_KykKihon1.getSdpdkbn(), C_Sdpd.GIJIPD, "Ｓ建Ｐ建区分");
        exClassificationEquals(bAK_KykKihon1.getDntryouritukbn(), C_DntryourituKbn.A, "団体料率区分");
        exStringEquals(bAK_KykKihon1.getDntcd(), "003", "団体コード");
        exClassificationEquals(bAK_KykKihon1.getSntkhoukbn(), C_SntkhouKbn.HJY, "選択方法区分");
        exClassificationEquals(bAK_KykKihon1.getSinsakbn(), C_SinsaKbn.KENKOUKANRISYOUMEISY, "診査区分");
        exDateEquals(bAK_KykKihon1.getMosymd(), BizDate.valueOf("20150202"), "申込日");
        exDateEquals(bAK_KykKihon1.getKktymd(), BizDate.valueOf("20150303"), "告知日");
        exDateEquals(bAK_KykKihon1.getFstpnyknymd(), BizDate.valueOf("20150404"), "初回保険料入金日");
        exDateEquals(bAK_KykKihon1.getMosukeymd(), BizDate.valueOf("20150505"), "申込書受付日");
        exDateEquals(bAK_KykKihon1.getMosjimosuktymd(), BizDate.valueOf("20150606"), "申込時申込書受付日");
        exDateEquals(bAK_KykKihon1.getSeirituymd(), BizDate.valueOf("20150707"), "成立日");
        exDateEquals(bAK_KykKihon1.getItiprsymd(), BizDate.valueOf("20150808"), "１Ｐ領収予定日");
        exBizCalcbleEquals(bAK_KykKihon1.getHrkp(), BizCurrency.valueOf(10002), "払込保険料");
        exDateYMEquals(bAK_KykKihon1.getBosyuuym(), BizDateYM.valueOf("201503"), "募集年月");
        exDateYMEquals(bAK_KykKihon1.getSeisekiym(), BizDateYM.valueOf("201505"), "成績計上年月");
        exDateYMEquals(bAK_KykKihon1.getSkeikeijyouym(), BizDateYM.valueOf("201507"), "新契約計上年月");
        exStringEquals(bAK_KykKihon1.getPlancd(), "004", "プランコード");
        exNumericEquals(bAK_KykKihon1.getPlanrenno(), 03, "プラン連番");
        exClassificationEquals(bAK_KykKihon1.getAisyoumeikbn(), C_AisyoumeiKbn.GAIKASYUUSIN_K2_MDHN, "愛称名区分");
        exClassificationEquals(bAK_KykKihon1.getSyusaiumu(), C_UmuKbn.ARI, "出再有無");
        exClassificationEquals(bAK_KykKihon1.getStknsetkbn(), C_StknsetKbn.NONE, "質権設定区分");
        exClassificationEquals(bAK_KykKihon1.getKykksykjyumu(), C_UmuKbn.NONE, "契約者貸付約定有無");
        exClassificationEquals(bAK_KykKihon1.getKykksumu(), C_UmuKbn.ARI, "契約者貸付有無");
        exClassificationEquals(bAK_KykKihon1.getAplkahikbn(), C_Aplkahi.NONE, "ＡＰＬ可否区分");
        exClassificationEquals(bAK_KykKihon1.getAplumu(), C_UmuKbn.NONE, "ＡＰＬ有無");
        exClassificationEquals(bAK_KykKihon1.getFstphrkkeirokbn(), C_FstphrkkeiroKbn.CREDIT, "初回保険料払込経路区分");
        exDateYEquals(bAK_KykKihon1.getHaitounendo(), BizDateY.valueOf("2015"), "配当年度");
        exClassificationEquals(bAK_KykKihon1.getHaitoukinuketorihoukbn(), C_HaitoukinuketorihouKbn.TUMIHAI, "配当金受取方法区分");
        exClassificationEquals(bAK_KykKihon1.getTratkityuiumu(), C_UmuKbn.ARI, "取扱注意有無");
        exStringEquals(bAK_KykKihon1.getTratkityuiuny(), "取扱注意内容４", "取扱注意内容");
        exNumericEquals(bAK_KykKihon1.getSbuktnin(), 4, "死亡受取人人数");
        exStringEquals(bAK_KykKihon1.getGansindankakuteiymd(), "20150909", "がん診断確定日");
        exClassificationEquals(bAK_KykKihon1.getMosuketukekbn(), C_MosUketukeKbn.PAPERLESS, "申込受付区分");
        exClassificationEquals(bAK_KykKihon1.getKijikbn(), C_KijiKbn.NONE, "記事区分");
        exStringEquals(bAK_KykKihon.getHhknsykgycd(), "104", "被保険者職業コード");
        exClassificationEquals(bAK_KykKihon.getHhknnensyuukbn(), C_NensyuuKbn.UNDER1000, "被保険者年収区分");
        exStringEquals(bAK_KykKihon.getDrtenkanritodoufukencd(), "36", "代理店管理都道府県コード");
        exStringEquals(bAK_KykKihon.getCifcd(), "005", "ＣＩＦコード");
        exStringEquals(bAK_KykKihon.getSmbckanriid(), "007", "ＳＭＢＣ受付管理ＩＤ");
        exClassificationEquals(bAK_KykKihon.getTsryhshrkykumukbn(), C_UmuKbn.ARI, "手数料不支払契約有無区分");
        exClassificationEquals(bAK_KykKihon.getKykhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.KOKUMINKENKOUHOKEN, "契約者本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getSkskknhonninkakninsyoruikbn(), C_HonninkakuninSyoruiKbn.KOKUMINKENKOUHOKEN, "親権者後見人本人確認書類区分");
        exClassificationEquals(bAK_KykKihon.getBoskykjyoutai(), C_Boskykjyoutai.TOKKYK, "募集契約状態");
        exNumericEquals(bAK_KykKihon.getKanyuusyano(), 9, "加入者番号");
        exClassificationEquals(bAK_KykKihon.getDrctservicemoskbn(), C_DirectServiceMosKbn.ENTRY, "ダイレクトサービス申込区分");
        exClassificationEquals(bAK_KykKihon.getSksyoukenskskbn(), C_SkSyoukenSksKbn.SINKISAKUSEI, "新契約証券作成区分");
        exDateEquals(bAK_KykKihon.getSinkyksyokensakuseiymd(), BizDate.valueOf("20400101"), "新契約証券作成日");
        exDateEquals(bAK_KykKihon.getSyoyousinkyksyohakkouymd(), BizDate.valueOf("20410101"), "証券用新契約証券発行日");
        exStringEquals(bAK_KykKihon.getSkjmosno(), "1000004", "新契約時申込番号");
        exClassificationEquals(bAK_KykKihon.getNkuikosumikbn(), C_NkIkouzumiKbn.BLNK, "年金移行済区分");
        exDateEquals(bAK_KykKihon.getSyhenkouymd(), BizDate.valueOf("20151010"), "最終変更日");
        exDateEquals(bAK_KykKihon.getLastsyosaihkymd(), BizDate.valueOf("20151111"), "最終証券再発行日");
        exDateEquals(bAK_KykKihon.getLastmeihenymd(), BizDate.valueOf("20151212"), "最終名義変更日");
        exDateEquals(bAK_KykKihon.getLastkykmeighnkymd(), BizDate.valueOf("20151212"), "最終契約者名義変更日");
        exDateEquals(bAK_KykKihon.getLastsbukthenymd(), BizDate.valueOf("20151212"), "最終死亡受取人変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmseiymdhenkouymd(),null, "最終契約者名生年月日変更日");
        exDateEquals(bAK_KykKihon.getLastkyknmkanakjteiymd(), BizDate.valueOf("20150113"), "最終契約者名仮名漢字訂正日");
        exDateEquals(bAK_KykKihon.getLasttsinynohenkouymd(), BizDate.valueOf("20150114"), "最終通信先郵便番号変更日");
        exDateEquals(bAK_KykKihon.getLastjyuuhenymd(), BizDate.valueOf("20151214"), "最終住所変更日");
        exStringEquals(bAK_KykKihon.getGyoumuKousinKinou(), "test3", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinsyaId(), "testuser3", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykKihon.getGyoumuKousinTime(), "20150714111111102", "業務用更新時間");

        IT_BAK_HhknSya bAK_HhknSya = bAK_KykKihon1.getBAKHhknSya();
        exStringEquals(bAK_HhknSya.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_HhknSya.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_HhknSya.getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_HhknSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_HhknSya.getHhknsakuinmeino(), "1000000001", "被保険者索引名番号");
        exStringEquals(bAK_HhknSya.getHhknnmkn(), "被保険者名（本ＴＢＬ）", "被保険者名（カナ）");
        exStringEquals(bAK_HhknSya.getHhknnmkj(), "被保険者名漢字１", "被保険者名（漢字）");
        exClassificationEquals(bAK_HhknSya.getHhknnmkjkhukakbn(), C_KjkhukaKbn.BLNK, "被保険者名漢字化不可区分");
        exDateEquals(bAK_HhknSya.getHhknseiymd(), BizDate.valueOf("20150301"), "被保険者生年月日");
        exClassificationEquals(bAK_HhknSya.getHhknsei(), C_Hhknsei.MALE, "被保険者性別");
        exStringEquals(bAK_HhknSya.getHhknyno(), "3334444", "被保険者郵便番号");
        exStringEquals(bAK_HhknSya.getHhknadr1kn(), "被保険者住所１カナ１", "被保険者住所１（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr1kj(), "被保険者住所１漢字１", "被保険者住所１（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr2kn(), "被保険者住所２カナ１", "被保険者住所２（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr2kj(), "被保険者住所２漢字１", "被保険者住所２（漢字）");
        exStringEquals(bAK_HhknSya.getHhknadr3kn(), "被保険者住所３カナ１", "被保険者住所３（カナ）");
        exStringEquals(bAK_HhknSya.getHhknadr3kj(), "被保険者住所３漢字１", "被保険者住所３（漢字）");
        exStringEquals(bAK_HhknSya.getHhkntelno(),null, "被保険者電話番号");
        exStringEquals(bAK_HhknSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_HhknSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        IT_BAK_KykSonotaTkyk bAK_KykSonotaTkyk = bAK_KykKihon1.getBAKKykSonotaTkyk();
        exStringEquals(bAK_KykSonotaTkyk.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KykSonotaTkyk.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KykSonotaTkyk.getTrkssikibetukey(), "12347", "取消識別キー");
        exClassificationEquals(bAK_KykSonotaTkyk.getLivingneedshukaumu(), C_UmuKbn.ARI, "リビングニーズ特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getStdrsktkyhkumu(), C_UmuKbn.NONE, "指定代理請求特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getStdrsktkyhkymd(), BizDate.valueOf("20150101"), "指定代理請求特約付加日");
        exClassificationEquals(bAK_KykSonotaTkyk.getYennykntkhkumu(), C_UmuKbn.ARI, "円入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getGaikanykntkhkumu(), C_UmuKbn.ARI, "外貨入金特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getYenshrkykkykhenkoymd(), BizDate.valueOf("20100101"), "円支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkgkkateitkumu(), C_UmuKbn.NONE, "年金額確定特約有無");
        assertEquals("年金総額保証割合", bAK_KykSonotaTkyk.getNksgkhosyuwari(), BizNumber.valueOf(25));
        exClassificationEquals(bAK_KykSonotaTkyk.getSkjbrnktsumu(), C_UmuKbn.NONE, "即時払年金特則有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku8waritkumu(), C_UmuKbn.ARI, "年金額８割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNenkingaku9waritkumu(), C_UmuKbn.NONE, "年金額９割保証特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkyentkhukaumu(), C_UmuKbn.ARI, "年金円支払特約付加有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getKwsttkhukaumu(), C_UmuKbn.NONE, "為替ターゲット特約付加有無");
        exNumericEquals(bAK_KykSonotaTkyk.getKwstargetrate(), 19, "為替ターゲットレート");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkhkumu(), C_UmuKbn.ARI, "ターゲット特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getTargettkykkykhenkoymd(), BizDate.valueOf("20100101"), "ターゲット特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getTargettkkbn(), C_TargetTkKbn.SYUUSIN, "ターゲット特約区分");
        exNumericEquals(bAK_KykSonotaTkyk.getTargettkmokuhyouti(), 123, "ターゲット特約目標値");
        exClassificationEquals(bAK_KykSonotaTkyk.getYsknkshtkumu(), C_UmuKbn.ARI, "新遺族年金支払特約有無");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkkbn(), C_PmnjtkKbn.SANDAISIPPMNJTOK, "保険料免除特約区分");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkkykymd(), BizDate.valueOf("20150104"), "保険料免除特約契約日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtksknnkaisiymd(), BizDate.valueOf("20150105"), "保険料免除特約責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjtkgansknnkaisiymd(), BizDate.valueOf("20150106"), "保険料免除特約がん責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmhktsknnkaisiymd(), BizDate.valueOf("20150107"), "保険料免除特約復活責任開始日");
        exDateEquals(bAK_KykSonotaTkyk.getPmnjhktgansknnkaisiymd(), BizDate.valueOf("20150108"), "保険料免除特約復活がん責任開始日");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd1(), "111", "保険料免除特約不担保部位コード１");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn1(), C_Htnpkkn.ONE, "保険料免除特約不担保期間１");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd2(), "222", "保険料免除特約不担保部位コード２");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn2(), C_Htnpkkn.TOW, "保険料免除特約不担保期間２");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd3(), "333", "保険料免除特約不担保部位コード３");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn3(), C_Htnpkkn.THREE, "保険料免除特約不担保期間３");
        exStringEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpbuicd4(), "444", "保険料免除特約不担保部位コード４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtkhtnpkkn4(), C_Htnpkkn.FOUR, "保険料免除特約不担保期間４");
        exClassificationEquals(bAK_KykSonotaTkyk.getPmnjtokkoudosghtnpkbn(), C_TokkoudosghtnpKbn.ARI, "保険料免除特約特定高度障害不担保区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getSknnkaisikitkkbn(), C_SknnkaisikitkKbn.SKNNKAISIKITK, "責任開始期特約区分");
        exClassificationEquals(bAK_KykSonotaTkyk.getNstkhkumu(), C_UmuKbn.ARI, "年金支払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getNkshrtkykhenkoymd(), BizDate.valueOf("20100101"), "年金支払特約契約変更日");
        exClassificationEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukbn(), C_Nstknsyu.KAKUTEINENKIN, "年金支払特約年金種類区分");
        exNumericEquals(bAK_KykSonotaTkyk.getNkshrtkyknksyukkn(), 10, "年金支払特約年金期間");
        exClassificationEquals(bAK_KykSonotaTkyk.getInitsbjiyensitihsytkhukaumu(), null, "初期死亡時円換算最低保証特約付加有無");
        exBizCalcbleEquals(bAK_KykSonotaTkyk.getInitsbjiyenkasaiteihsygk(), null, "初期死亡時円換算最低保証額");
        exClassificationEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaumu(), null, "重度介護前払特約付加有無");
        exDateEquals(bAK_KykSonotaTkyk.getJyudkaigomeharaitkhukaymd(),  null, "重度介護前払特約付加日");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSonotaTkyk.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");
        IT_BAK_KykSya bAK_KykSya = bAK_KykKihon1.getBAKKykSya();
        exStringEquals(bAK_KykSya.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KykSya.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KykSya.getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KykSya.getKokno(), "200000201", "顧客番号");
        exStringEquals(bAK_KykSya.getKyksakuinmeino(), "1000000001", "契約者索引名番号");
        exStringEquals(bAK_KykSya.getKyknmkn(), "契約名カナ（本ＴＢＬ）", "契約者名（カナ）");
        exStringEquals(bAK_KykSya.getKyknmkj(), "契約者名（漢字）１", "契約者名（漢字）");
        exClassificationEquals(bAK_KykSya.getKyknmkjkhukakbn(), C_KjkhukaKbn.BLNK, "契約者名漢字化不可区分");
        exDateEquals(bAK_KykSya.getKykseiymd(), BizDate.valueOf("20150201"), "契約者生年月日");
        exClassificationEquals(bAK_KykSya.getKyksei(), C_Kyksei.FEMALE, "契約者性別");
        exClassificationEquals(bAK_KykSya.getKkkyktdk(), C_Tdk.SONOTA, "契約管理契約者続柄");
        exStringEquals(bAK_KykSya.getTsinyno(), "1112222", "通信先郵便番号");
        exStringEquals(bAK_KykSya.getTsinadr1kn(), "通信先住所１カナ１", "通信先住所１（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr1kj(), "通信先住所１漢字１", "通信先住所１（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr2kn(), "通信先住所２カナ１", "通信先住所２（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr2kj(), "通信先住所２漢字１", "通信先住所２（漢字）");
        exStringEquals(bAK_KykSya.getTsinadr3kn(), "通信先住所３カナ１", "通信先住所３（カナ）");
        exStringEquals(bAK_KykSya.getTsinadr3kj(), "通信先住所３漢字１", "通信先住所３（漢字）");
        exStringEquals(bAK_KykSya.getTsintelno(), null, "通信先電話番号");
        exStringEquals(bAK_KykSya.getDai2tsintelno(), null, "第２通信先電話番号");
        exStringEquals(bAK_KykSya.getTsinmailaddress(), "test1@test.com", "通信先メールアドレス");
        exStringEquals(bAK_KykSya.getKinmusakinm(), "勤務先名１", "勤務先名");
        exClassificationEquals(bAK_KykSya.getHjndaiykkbn(), C_HjndaiykKbn.SYOTYOU, "法人代表者役職区分");
        exStringEquals(bAK_KykSya.getHjndaiyknm(), "法人代表者役職名１", "法人代表者役職名");
        exStringEquals(bAK_KykSya.getHjndainmkn(), "法人代表者名カナ１", "法人代表者名（カナ）");
        exStringEquals(bAK_KykSya.getHjndainmkj(), "法人代表者名漢字１", "法人代表者名（漢字）");
        exStringEquals(bAK_KykSya.getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KykSya.getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exNumericEquals(bAK_KhDenpyoData1.size(), 3, "件数");
        exStringEquals(bAK_KhDenpyoData1.get(0).getDenrenno(), "12345678917", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData1.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData1.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDenpyoData1.get(0).getHuridenatesakicd(), "105", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getTantocd(), C_TantouCdKbn.SENTAKUINFO, "担当コード");
        exDateEquals(bAK_KhDenpyoData1.get(0).getDenymd(), BizDate.valueOf("20150417"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getTaisyakukbn(), C_TaisyakuKbn.KARIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_PKAKIN_GAIHO_JPY, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData1.get(0).getSuitoubumoncd(), "105", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(0).getDengaikagk(), BizCurrency.valueOf(20013), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData1.get(0).getDenkawaserate(), BizNumber.valueOf(105));
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(0).getDenyenkagk(), BizCurrency.valueOf(1000000005), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getHuridenskskbn(), C_HuridensksKbn.ONLINEFB, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getDenhnknhoukbn(), C_DenhnknhouKbn.SONOTAHENKIN, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getDenshrhoukbn(), C_DenshrhouKbn.KARIUKERSKNASI, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData1.get(0).getSyoriYmd(), BizDate.valueOf("20150505"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData1.get(0).getSyoricd(), "1005", "処理コード");
        exStringEquals(bAK_KhDenpyoData1.get(0).getSyorisosikicd(), "1000005", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getSeg1cd(), C_Segcd.BLNK, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getSeg2cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData1.get(0).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData1.get(0).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(0).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData1.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData1.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exStringEquals(bAK_KhDenpyoData1.get(1).getDenrenno(), "12345678918", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData1.get(1).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData1.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDenpyoData1.get(1).getHuridenatesakicd(), "106", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getTantocd(), C_TantouCdKbn.KETTEI, "担当コード");
        exDateEquals(bAK_KhDenpyoData1.get(1).getDenymd(), BizDate.valueOf("20150418"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getTaisyakukbn(), C_TaisyakuKbn.KASIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_PKAKIN_GAIHO_USD, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData1.get(1).getSuitoubumoncd(), "106", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(1).getDengaikagk(), BizCurrency.valueOf(20014), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData1.get(1).getDenkawaserate(), BizNumber.valueOf(106));
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(1).getDenyenkagk(), BizCurrency.valueOf(1000000006), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getHuridenskskbn(), C_HuridensksKbn.BLNK, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getDenhnknhoukbn(), C_DenhnknhouKbn.BLNK, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getDenshrhoukbn(), C_DenshrhouKbn.BLNK, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData1.get(1).getSyoriYmd(), BizDate.valueOf("20150606"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData1.get(1).getSyoricd(), "1006", "処理コード");
        exStringEquals(bAK_KhDenpyoData1.get(1).getSyorisosikicd(), "1000006", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getSeg1cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getSeg2cd(), C_Segcd.BLNK, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData1.get(1).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData1.get(1).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData1.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(1).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData1.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData1.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exStringEquals(bAK_KhDenpyoData1.get(2).getDenrenno(), "12345678919", "伝票データ連番");
        exStringEquals(bAK_KhDenpyoData1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDenpyoData1.get(2).getEdano(), 3, "枝番号");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getDensyskbn(), C_DensysKbn.HKSIHARAI, "伝票用システム区分");
        exStringEquals(bAK_KhDenpyoData1.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDenpyoData1.get(2).getHuridenatesakicd(), "107", "振替伝票宛先部課コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getTantocd(), C_TantouCdKbn.SYOUKENTYOUSEI, "担当コード");
        exDateEquals(bAK_KhDenpyoData1.get(2).getDenymd(), BizDate.valueOf("20150419"), "伝票日付");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getTaisyakukbn(), C_TaisyakuKbn.KARIKATA, "貸借区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getKanjyoukmkcd(), C_Kanjyoukmkcd.HOKENKEIYAKU_PKAKIN_GAIHO_AUD, "勘定科目コード");
        exStringEquals(bAK_KhDenpyoData1.get(2).getSuitoubumoncd(), "107", "出納部門コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getTuukasyu(), C_Tuukasyu.JPY, "通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(2).getDengaikagk(), BizCurrency.valueOf(20015), "伝票金額（外貨）");
        assertEquals("伝票用為替レート", bAK_KhDenpyoData1.get(2).getDenkawaserate(), BizNumber.valueOf(107));
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(2).getDenyenkagk(), BizCurrency.valueOf(1000000007), "伝票金額（円）");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getHuridenskskbn(), C_HuridensksKbn.GYOUMUIGAI, "振替伝票作成区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getDenhnknhoukbn(), C_DenhnknhouKbn.YUBINHARAIDASI, "伝票用返金方法区分");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getDenshrhoukbn(), C_DenshrhouKbn.FBSOUKINYOKU, "伝票用支払方法区分");
        exDateEquals(bAK_KhDenpyoData1.get(2).getSyoriYmd(), BizDate.valueOf("20150707"), "処理年月日");
        exStringEquals(bAK_KhDenpyoData1.get(2).getSyoricd(), "1007", "処理コード");
        exStringEquals(bAK_KhDenpyoData1.get(2).getSyorisosikicd(), "1000007", "処理組織コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getSeg1cd(), C_Segcd.BLNK, "セグメント１コード");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getSeg2cd(), C_Segcd.USDSYUUSINITIJIBARAIJYUNYUUHAI, "セグメント２コード");
        exBooleanEquals(bAK_KhDenpyoData1.get(2).getKakokawaserateshiteiflg(),false, "過去為替レート指定フラグ");
        exDateEquals(bAK_KhDenpyoData1.get(2).getKakokawaserateshiteiymd(), BizDate.valueOf("20150414"), "過去為替レート指定年月日");
        exClassificationEquals(bAK_KhDenpyoData1.get(2).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhDenpyoData1.get(2).getKeiyakutuukagk(), BizCurrency.valueOf(111), "契約通貨金額");
        exStringEquals(bAK_KhDenpyoData1.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDenpyoData1.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exNumericEquals(bAK_KhFBSoukinData1.size(), 3, "件数");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getFbsoukindatasikibetukey(), "12345678916", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getDenrenno(), "12345678917", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData1.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getSyoricd(), "1005", "処理コード");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getSyorisosikicd(), "1000005", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData1.get(0).getSyoriYmd(), BizDate.valueOf("20160505"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData1.get(0).getDenymd(), BizDate.valueOf("20150427"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_YOKUJITU, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getBankcd(), "1215", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getSitencd(), "126", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getYokinkbn(), C_YokinKbn.HUTUU, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getKouzano(), "7654324", "口座番号");
        exStringEquals(bAK_KhFBSoukinData1.get(0).getKzmeiginmkn(), "口座名義人氏名（カナ）４", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData1.get(0).getSoukingk(), BizCurrency.valueOf(1000000005), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData1.get(0).getGaikataikagk(), BizCurrency.valueOf(1000000005), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData1.get(0).getSoukinkwsrate(), BizNumber.valueOf(5));

        exStringEquals(bAK_KhFBSoukinData1.get(1).getFbsoukindatasikibetukey(), "12345678917", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData1.get(1).getDenrenno(), "12345678918", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData1.get(1).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData1.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData1.get(1).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData1.get(1).getSyoricd(), "1006", "処理コード");
        exStringEquals(bAK_KhFBSoukinData1.get(1).getSyorisosikicd(), "1000006", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData1.get(1).getSyoriYmd(), BizDate.valueOf("20160606"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData1.get(1).getDenymd(), BizDate.valueOf("20150428"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData1.get(1).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData1.get(1).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_2EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData1.get(1).getBankcd(), "1216", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData1.get(1).getSitencd(), "127", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData1.get(1).getYokinkbn(), C_YokinKbn.TOUZA, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData1.get(1).getKouzano(), "7654325", "口座番号");
        exStringEquals(bAK_KhFBSoukinData1.get(1).getKzmeiginmkn(), "口座名義人氏名（カナ）５", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData1.get(1).getSoukingk(), BizCurrency.valueOf(1000000006), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData1.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData1.get(1).getGaikataikagk(), BizCurrency.valueOf(1000000006), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData1.get(1).getSoukinkwsrate(), BizNumber.valueOf(6));

        exStringEquals(bAK_KhFBSoukinData1.get(2).getFbsoukindatasikibetukey(), "12345678918", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhFBSoukinData1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhFBSoukinData1.get(2).getDenrenno(), "12345678919", "伝票データ連番");
        exNumericEquals(bAK_KhFBSoukinData1.get(2).getEdano(), 3, "枝番号");
        exClassificationEquals(bAK_KhFBSoukinData1.get(2).getDensyskbn(), C_DensysKbn.HKSIHARAI, "伝票用システム区分");
        exClassificationEquals(bAK_KhFBSoukinData1.get(2).getGyoumucd(), C_Gyoumucd.SKFUSEIRITUPHENKIN, "業務コード");
        exStringEquals(bAK_KhFBSoukinData1.get(2).getSyoricd(), "1007", "処理コード");
        exStringEquals(bAK_KhFBSoukinData1.get(2).getSyorisosikicd(), "1000007", "処理組織コード");
        exDateEquals(bAK_KhFBSoukinData1.get(2).getSyoriYmd(), BizDate.valueOf("20160707"), "処理年月日");
        exDateEquals(bAK_KhFBSoukinData1.get(2).getDenymd(), BizDate.valueOf("20150429"), "伝票日付");
        exStringEquals(bAK_KhFBSoukinData1.get(2).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhFBSoukinData1.get(2).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhFBSoukinData1.get(2).getBankcd(), "1217", "銀行コード");
        exStringEquals(bAK_KhFBSoukinData1.get(2).getSitencd(), "128", "支店コード");
        exClassificationEquals(bAK_KhFBSoukinData1.get(2).getYokinkbn(), C_YokinKbn.TTYOKIN, "預金種目区分");
        exStringEquals(bAK_KhFBSoukinData1.get(2).getKouzano(), "7654326", "口座番号");
        exStringEquals(bAK_KhFBSoukinData1.get(2).getKzmeiginmkn(), "口座名義人氏名（カナ）６", "口座名義人氏名（カナ）");
        exBizCalcbleEquals(bAK_KhFBSoukinData1.get(2).getSoukingk(), BizCurrency.valueOf(1000000007), "送金金額");
        exClassificationEquals(bAK_KhFBSoukinData1.get(2).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhFBSoukinData1.get(2).getGaikataikagk(), BizCurrency.valueOf(1000000007), "外貨対価額");
        assertEquals("送金用為替レート", bAK_KhFBSoukinData1.get(2).getSoukinkwsrate(), BizNumber.valueOf(7));

        exNumericEquals(bAK_KhGaikaFBSoukinData1.size(), 3, "件数");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getFbsoukindatasikibetukey(), "12345678916", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getDenrenno(), "12345678917", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData1.get(0).getEdano(), 1, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getDensyskbn(), C_DensysKbn.SKEI, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSyoricd(), "1005", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSyorisosikicd(), "1000005", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData1.get(0).getSyoriYmd(), BizDate.valueOf("20160505"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData1.get(0).getDenymd(), BizDate.valueOf("20150427"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_YOKUJITU, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getBankcd(), "1215", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getBanknmej(), "bank5", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSitencd(), "126", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getSitennmej(), "siten5", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getKouzano(), "7654324", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData1.get(0).getGaikashrgk(), BizCurrency.valueOf(5), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(0).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData1.get(0).getCrossrateshrgk(), BizCurrency.valueOf(5), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData1.get(0).getSoukinkwsrate(), BizNumber.valueOf(5));
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getIrninnmei(), "irni4", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getGyoumuKousinKinou(), "test4", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getFbsoukindatasikibetukey(), "12345678917", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getDenrenno(), "12345678918", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData1.get(1).getEdano(), 2, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(1).getDensyskbn(), C_DensysKbn.HOZEN, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(1).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getSyoricd(), "1006", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getSyorisosikicd(), "1000006", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData1.get(1).getSyoriYmd(), BizDate.valueOf("20160606"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData1.get(1).getDenymd(), BizDate.valueOf("20150428"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(1).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_2EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getBankcd(), "1216", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getBanknmej(), "bank6", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getSitencd(), "127", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getSitennmej(), "siten6", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getKouzano(), "7654325", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(1).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData1.get(1).getGaikashrgk(), BizCurrency.valueOf(6), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(1).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData1.get(1).getCrossrateshrgk(), BizCurrency.valueOf(6), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData1.get(1).getSoukinkwsrate(), BizNumber.valueOf(6));
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getIrninnmei(), "irni5", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getFbsoukindatasikibetukey(), "12345678918", "ＦＢ送金データ識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getDenrenno(), "12345678919", "伝票データ連番");
        exNumericEquals(bAK_KhGaikaFBSoukinData1.get(2).getEdano(), 3, "枝番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(2).getDensyskbn(), C_DensysKbn.HKSIHARAI, "伝票用システム区分");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(2).getGkgyoumucd(), C_Gkgyoumucd.SKFUSEIRITUPHENKIN, "外貨業務コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getSyoricd(), "1007", "処理コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getSyorisosikicd(), "1000007", "処理組織コード");
        exDateEquals(bAK_KhGaikaFBSoukinData1.get(2).getSyoriYmd(), BizDate.valueOf("20160707"), "処理年月日");
        exDateEquals(bAK_KhGaikaFBSoukinData1.get(2).getDenymd(), BizDate.valueOf("20150429"), "伝票日付");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getSyono(), "17806000013", "証券番号");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(2).getShrhousiteikbn(), C_ShrhousiteiKbn.FB_3EIGYOUBI, "支払方法指定区分");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getBankcd(), "1217", "銀行コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getBanknmej(), "bank7", "銀行名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getSitencd(), "128", "支店コード");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getSitennmej(), "siten7", "支店名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getKouzano(), "7654326", "口座番号");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getKzmeiginmei(), "カナ", "口座名義人名（英字）");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(2).getShrtuukasyu(), C_Tuukasyu.JPY, "支払通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData1.get(2).getGaikashrgk(), BizCurrency.valueOf(7), "外貨支払額");
        exClassificationEquals(bAK_KhGaikaFBSoukinData1.get(2).getKyktuukasyu(), C_Tuukasyu.JPY, "契約通貨種類");
        exBizCalcbleEquals(bAK_KhGaikaFBSoukinData1.get(2).getCrossrateshrgk(), BizCurrency.valueOf(7), "クロスレート支払額");
        assertEquals("送金用為替レート", bAK_KhGaikaFBSoukinData1.get(2).getSoukinkwsrate(), BizNumber.valueOf(7));
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getIrninnmei(), "irni6", "依頼人名（英字）");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getGyoumuKousinKinou(), "test6", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhGaikaFBSoukinData1.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");

        exNumericEquals(bAK_KhSntkInfoTouroku1.size(), 3, "件数");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(0).getRenno(), 1, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoriYmd(), BizDate.valueOf("20150104"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getHuho2kykno(), "1000000005", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getHuho2kyknokbn(), C_Huho2kyknoKbn.MOSNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getSyouhncd(), "1005", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getTaisyounmkn(), "タイショウシャシメイ５", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getTaisyounmkj(), "タイショウシャシメイ５", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(0).getTaisyouseiymd(), BizDate.valueOf("20160505"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(0).getKetymd(), BizDate.valueOf("20150404"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getKetsyacd(), "55", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getPalketsyacd(), "55", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(0).getSintyou(), 140, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(0).getTaijyuu(), 80, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(0).getKktymd(), BizDate.valueOf("20150404"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoubyoucd1(), "44", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku1.get(0).getKantiym1(), BizDateYM.valueOf("201504"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoubyoucd2(), "44", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku1.get(0).getKantiym2(), BizDateYM.valueOf("201504"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(0).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getGyoumuKousinKinou(), "test4", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(1).getRenno(), 2, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(1).getSyoriYmd(), BizDate.valueOf("20150105"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getHuho2kykno(), "1000000006", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getHuho2kyknokbn(), C_Huho2kyknoKbn.SYONO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getSyouhncd(), "1006", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getTaisyounmkn(), "タイショウシャシメイ６", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getTaisyounmkj(), "タイショウシャシメイ６", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(1).getTaisyouseiymd(), BizDate.valueOf("20160606"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(1).getKetymd(), BizDate.valueOf("20150505"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getKetsyacd(), "66", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getPalketsyacd(), "66", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(1).getSintyou(), 150, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(1).getTaijyuu(), 90, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(1).getKktymd(), BizDate.valueOf("20150505"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getSyoubyoucd1(), "55", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku1.get(1).getKantiym1(), BizDateYM.valueOf("201505"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getSyoubyoucd2(), "55", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku1.get(1).getKantiym2(), BizDateYM.valueOf("201505"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(1).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(2).getRenno(), 3, "連番");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(2).getSyoriYmd(), BizDate.valueOf("20150106"), "処理年月日");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getHuho2kykno(), "1000000007", "普保Ⅱ契約番号");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getHuho2kyknokbn(), C_Huho2kyknoKbn.NKSYSYNO, "普保Ⅱ契約番号区分");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getSyouhncd(), "1007", "商品コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getSntkinfokankeisyakbn(), C_KankeisyaKbn.BLNK, "選択情報関係者区分");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getTaisyounmkn(), "タイショウシャシメイ７", "対象者氏名（カナ）");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getTaisyounmkj(), "タイショウシャシメイ７", "対象者氏名（漢字）");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(2).getTaisyouseiymd(), BizDate.valueOf("20160707"), "対象者生年月日");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getTaisyouseibetu(), C_Seibetu.MALE, "対象者性別");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getDakuhiketnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "諾否決定内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getKktnaiyouumukbn(), C_BlnktkumuKbn.BLNK, "告知内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getKijinaiyouumukbn(), C_BlnktkumuKbn.BLNK, "記事内容有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getMrumukbn(), C_BlnktkumuKbn.BLNK, "ＭＲ有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getKoudosyougaiumukbn(), C_BlnktkumuKbn.BLNK, "高度障害有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getTorikaijoumukbn(), C_BlnktkumuKbn.BLNK, "取消解除有無区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getSeiritukbn(), C_SeirituKbn.NONE, "成立区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getDeckbn(), C_DecKbn.BLNK, "ＤＥＣ区分");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(2).getKetymd(), BizDate.valueOf("20150606"), "決定日");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getKetkekkacd(), C_Ketkekkacd.GENKAITAI_SYOUDAKU, "決定結果コード");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getKetriyuucd1(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getKetriyuucd2(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getKetriyuucd3(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード３");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getKetriyuucd4(), C_Ketriyuucd.HHKN_TOUSYAKIOUSYOU, "決定理由コード４");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getKetsyacd(), "77", "決定者コード");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getPalketsyacd(), "77", "ＰＡＬ決定者コード");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(2).getSintyou(), 160, "身長");
        exNumericEquals(bAK_KhSntkInfoTouroku1.get(2).getTaijyuu(), 100, "体重");
        exDateEquals(bAK_KhSntkInfoTouroku1.get(2).getKktymd(), BizDate.valueOf("20150606"), "告知日");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getSyoubyoucd1(), "66", "傷病コード１");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getSyoubyoujyoutaikbn1(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分１");
        exDateYMEquals(bAK_KhSntkInfoTouroku1.get(2).getKantiym1(), BizDateYM.valueOf("201506"), "完治年月１");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getSyoubyoucd2(), "66", "傷病コード２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getSyoubyoujyoutaikbn2(), C_SyoubyoujyoutaiKbn.BLNK, "傷病状態区分２");
        exDateYMEquals(bAK_KhSntkInfoTouroku1.get(2).getKantiym2(), BizDateYM.valueOf("201506"), "完治年月２");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getMrriyuucdkbn(), C_MrRiyuucdKbn.BLNK, "ＭＲ理由コード区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getSntkinfokyktorikesikbn(), C_SntkInfoKykTorikesiKbn.BLNK, "選択情報用契約取消処理区分");
        exClassificationEquals(bAK_KhSntkInfoTouroku1.get(2).getSyorizumiflg(), C_Syorizumiflg.SYORIZUMI, "処理済フラグ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getGyoumuKousinKinou(), "test6", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhSntkInfoTouroku1.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");


        exStringEquals(bAK_AnsyuKihon1.getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_AnsyuKihon1.getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_AnsyuKihon1.getTrkssikibetukey(), "12347", "取消識別キー");
        exDateYMEquals(bAK_AnsyuKihon1.getJkipjytym(), BizDateYM.valueOf("201503"), "次回Ｐ充当年月");
        exClassificationEquals(bAK_AnsyuKihon1.getTkiktannaitukisuu(), C_Tkiktannaitukisuu.SIXMONTHS, "定期一括案内月数");
        exClassificationEquals(bAK_AnsyuKihon1.getKjsmhakkouzumiflg(), C_Kjsmhakkouzumiflg.SUMI, "控除証明書発行済フラグ");
        exDateEquals(bAK_AnsyuKihon1.getSyuharaimanymd(), BizDate.valueOf("20150403"), "主契約払満日");
        exStringEquals(bAK_AnsyuKihon1.getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_AnsyuKihon1.getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_AnsyuKihon1.getGyoumuKousinTime(), "20150714111111102", "業務用更新時間");


        exNumericEquals(bAK_SmbcStyKanri1.size(), 3, "件数");
        exDateEquals(bAK_SmbcStyKanri1.get(0).getDatarenymd(), BizDate.valueOf("20151013"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri1.get(0).getDatasakuseirenno(), BizNumber.valueOf(1234573));
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri1.get(0).getRendouflg(), C_Rendouflg.MIRENDOU, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcdatakbn(), "7", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcdatasakuseiymd(), "20151014", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbchknkaisyacd(), "58", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcuktkkanriid(), "1234567893", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihouktkzmymd(), "20151114", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihohbymd(), "20151215", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcbankhnkykflg(), "4", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihohbksyymd(), "20150116", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihohjyttykymd(), "20150217", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihonyknzmymd(), "20150318", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihosnszmymd(), "20150419", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihosyknhkkzmymd(), "20150520", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihosyumoku(), "22", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihosyurui(), "32", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcsyono(), "12806345694", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcsyonoedaban(), "00004", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcjktkflg(), "3", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihotrksymd(), "20150621", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcseihohktymd(), "20150722", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbckykseiymd(), "20150823", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）４", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcmosuktymd(), "20150924", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getSmbckosyaareastyknr(), "12121212121203", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getGyoumuKousinKinou(), "test4", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getGyoumuKousinsyaId(), "testuser4", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri1.get(0).getGyoumuKousinTime(), "20150714111111114", "業務用更新時間");

        exDateEquals(bAK_SmbcStyKanri1.get(1).getDatarenymd(), BizDate.valueOf("20151014"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri1.get(1).getDatasakuseirenno(), BizNumber.valueOf(1234574));
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getMosno(),null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri1.get(1).getRendouflg(), C_Rendouflg.RENDOUZUMI, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcdatakbn(), "8", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcdatasakuseiymd(), "20151015", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbchknkaisyacd(), "59", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcuktkkanriid(), "1234567894", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihouktkzmymd(), "20151115", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihohbymd(), "20151216", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcbankhnkykflg(), "5", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihohbksyymd(), "20150117", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihohjyttykymd(), "20150218", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihonyknzmymd(), "20150319", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihosnszmymd(), "20150420", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihosyknhkkzmymd(), "20150521", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihosyumoku(), "23", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihosyurui(), "33", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcsyono(), "12806345694", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcsyonoedaban(), "00005", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcjktkflg(), "4", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihotrksymd(), "20150622", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcseihohktymd(), "20150723", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbckykseiymd(), "20150824", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）５", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcmosuktymd(), "20150925", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getSmbckosyaareastyknr(), "12121212121204", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getGyoumuKousinKinou(), "test5", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getGyoumuKousinsyaId(), "testuser5", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri1.get(1).getGyoumuKousinTime(), "20150714111111115", "業務用更新時間");

        exDateEquals(bAK_SmbcStyKanri1.get(2).getDatarenymd(), BizDate.valueOf("20151015"), "データ連動日");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        assertEquals("データ作成連番", bAK_SmbcStyKanri1.get(2).getDatasakuseirenno(), BizNumber.valueOf(1234575));
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getMosno(), null, "申込番号");
        exClassificationEquals(bAK_SmbcStyKanri1.get(2).getRendouflg(), C_Rendouflg.MIRENDOU, "連動フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcdatakbn(), "9", "ＳＭＢＣ＿データ区分");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcdatasakuseiymd(), "20151016", "ＳＭＢＣ＿データ作成日");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbchknkaisyacd(), "60", "ＳＭＢＣ＿保険会社コード");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcuktkkanriid(), "1234567895", "ＳＭＢＣ＿受付管理ID");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihouktkzmymd(), "20151116", "ＳＭＢＣ＿生保受付済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihohbymd(), "20151217", "ＳＭＢＣ＿生保不備DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcbankhnkykflg(), "6", "ＳＭＢＣ＿銀行返却フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihohbksyymd(), "20150118", "ＳＭＢＣ＿生保不備解消DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihohjyttykymd(), "20150219", "ＳＭＢＣ＿生保報状到着DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihonyknzmymd(), "20150320", "ＳＭＢＣ＿生保入金済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihosnszmymd(), "20150421", "ＳＭＢＣ＿生保審査済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihosyknhkkzmymd(), "20150522", "ＳＭＢＣ＿生保証券発行済DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihosyumoku(), "24", "ＳＭＢＣ＿生保種目");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihosyurui(), "34", "ＳＭＢＣ＿生保種類");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcsyono(), "12806345694", "ＳＭＢＣ＿証券番号");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcsyonoedaban(), "00006", "ＳＭＢＣ＿証券番号枝番");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcjktkflg(), "5", "ＳＭＢＣ＿条件付フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihotrksymd(), "20150623", "ＳＭＢＣ＿生保取消DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcseihohktymd(), "20150724", "ＳＭＢＣ＿生保否決DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbckykseiymd(), "20150825", "ＳＭＢＣ＿契約者生年月日");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbckyknmkn(), "ＳＭＢＣ＿契約者名（カナ）６", "ＳＭＢＣ＿契約者名（カナ）");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcmosuktymd(), "20150926", "ＳＭＢＣ＿申込書受付DATE");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbcmossyoriflg(), "1", "ＳＭＢＣ＿申込処理フラグ");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getSmbckosyaareastyknr(), "12121212121205", "ＳＭＢＣ＿個社領域（進捗管理）");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getGyoumuKousinKinou(), "test6", "業務用更新機能ＩＤ");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getGyoumuKousinsyaId(), "testuser6", "業務用更新者ＩＤ");
        exStringEquals(bAK_SmbcStyKanri1.get(2).getGyoumuKousinTime(), "20150714111111116", "業務用更新時間");


        exStringEquals(bAK_KhHenkouUktk1.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk1.get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk1.get(0).getUktkymd(), BizDate.valueOf("20180108"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getTourokuroute(), C_TourokuRouteKbn.DS, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getUktksyorikbn(), C_UktkSyoriKbn.KAIYAKU, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk1.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20180208"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk1.get(0).getSyoriyoteiymd(), BizDate.valueOf("20180308"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk1.get(0).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.SYORIZUMI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk1.get(1).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk1.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHenkouUktk1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk1.get(1).getHozenhenkouuktkrenno(), 2, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk1.get(1).getUktkymd(), BizDate.valueOf("20180109"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk1.get(1).getTourokuroute(), C_TourokuRouteKbn.TEL, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk1.get(1).getUktksyorikbn(), C_UktkSyoriKbn.BLNK, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk1.get(1).getKouryokuhasseiymd(), BizDate.valueOf("20180209"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk1.get(1).getSyoriyoteiymd(), BizDate.valueOf("20180309"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk1.get(1).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.TORIKESI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk1.get(1).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(1).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk1.get(2).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk1.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHenkouUktk1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk1.get(2).getHozenhenkouuktkrenno(), 3, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk1.get(2).getUktkymd(), BizDate.valueOf("20180110"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk1.get(2).getTourokuroute(), C_TourokuRouteKbn.BLNK, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk1.get(2).getUktksyorikbn(), C_UktkSyoriKbn.KAIYAKU, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk1.get(2).getKouryokuhasseiymd(), BizDate.valueOf("20180210"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk1.get(2).getSyoriyoteiymd(), BizDate.valueOf("20180310"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk1.get(2).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.ERROR, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk1.get(2).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk1.get(2).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri1.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri1.get(0).getRenno(), 8, "連番");
        exClassificationEquals(bAK_KhHaitouKanri1.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.SEISIKI, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri1.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri1.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2016"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(0).getTounendod(), BizCurrency.valueOf(80000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri1.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri1.get(0).getKariwariatedshrymd(), BizDate.valueOf("20180108"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(0).getKariwariatedruigk(), BizCurrency.valueOf(90000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(8000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(12000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri1.get(0).getGyoumuKousinTime(), "20181018111111118", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri1.get(1).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHaitouKanri1.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHaitouKanri1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri1.get(1).getRenno(), 9, "連番");
        exClassificationEquals(bAK_KhHaitouKanri1.get(1).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIDSIHARAI, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri1.get(1).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri1.get(1).getFstkariwariatednendo(), BizDateY.valueOf("2017"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(1).getTounendod(), BizCurrency.valueOf(90000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri1.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.NAITEI, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri1.get(1).getKariwariatedshrymd(), BizDate.valueOf("20180109"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(1).getKariwariatedruigk(), BizCurrency.valueOf(100000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(1).getKariwariatedgngkkngk(), BizCurrency.valueOf(9000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(1).getKariwariatedshrgk(), BizCurrency.valueOf(13000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri1.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri1.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri1.get(1).getGyoumuKousinTime(), "20181018111111119", "業務用更新時間");

        exStringEquals(bAK_KhHaitouKanri1.get(2).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHaitouKanri1.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhHaitouKanri1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhHaitouKanri1.get(2).getRenno(), 10, "連番");
        exClassificationEquals(bAK_KhHaitouKanri1.get(2).getHaitoukinskskbn(), C_HaitoukinsksKbn.YENDTHNKSEISIKI, "配当金作成区分");
        exClassificationEquals(bAK_KhHaitouKanri1.get(2).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhHaitouKanri1.get(2).getFstkariwariatednendo(), BizDateY.valueOf("2018"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(2).getTounendod(), BizCurrency.valueOf(100000), "当年度Ｄ");
        exClassificationEquals(bAK_KhHaitouKanri1.get(2).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhHaitouKanri1.get(2).getKariwariatedshrymd(), BizDate.valueOf("20180110"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(2).getKariwariatedruigk(), BizCurrency.valueOf(110000), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(2).getKariwariatedgngkkngk(), BizCurrency.valueOf(10000), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhHaitouKanri1.get(2).getKariwariatedshrgk(), BizCurrency.valueOf(14000), "仮割当Ｄ支払額");
        exStringEquals(bAK_KhHaitouKanri1.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHaitouKanri1.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHaitouKanri1.get(2).getGyoumuKousinTime(), "20181018111111110", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri1.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri1.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20180108"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri1.get(0).getRenno(), 8, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri1.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.RISOKUKURIIRE, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri1.get(0).getTumitated(), BizCurrency.valueOf(90000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri1.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20180208"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri1.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri1.get(0).getGyoumuKousinTime(), "20181018111111118", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri1.get(1).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri1.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri1.get(1).getTumitatedtumitateymd(), BizDate.valueOf("20180109"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri1.get(1).getRenno(), 9, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri1.get(1).getTumitatedskskbn(), C_TumitateDSakuseiKbn.SEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri1.get(1).getTumitated(), BizCurrency.valueOf(100000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri1.get(1).getTumitatedshrkrkymd(), BizDate.valueOf("20180209"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri1.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.NAITEI, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri1.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri1.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri1.get(1).getGyoumuKousinTime(), "20181018111111119", "業務用更新時間");

        exStringEquals(bAK_KhTumitateDKanri1.get(2).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhTumitateDKanri1.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhTumitateDKanri1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_KhTumitateDKanri1.get(2).getTumitatedtumitateymd(), BizDate.valueOf("20180110"), "積立Ｄ積立年月日");
        exNumericEquals(bAK_KhTumitateDKanri1.get(2).getRenno(), 10, "連番");
        exClassificationEquals(bAK_KhTumitateDKanri1.get(2).getTumitatedskskbn(), C_TumitateDSakuseiKbn.YENDTHNKSEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhTumitateDKanri1.get(2).getTumitated(), BizCurrency.valueOf(110000), "積立Ｄ");
        exDateEquals(bAK_KhTumitateDKanri1.get(2).getTumitatedshrkrkymd(), BizDate.valueOf("20180210"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhTumitateDKanri1.get(2).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exStringEquals(bAK_KhTumitateDKanri1.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri1.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhTumitateDKanri1.get(2).getGyoumuKousinTime(), "20181018111111110", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getNyuukinkakusyouno(), "23214331223451323212", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData1.get(1).getNyksyoriymd(), BizDate.valueOf("20180108"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData1.get(1).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180208"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(1).getNykkeiro(), C_Nykkeiro.SKEI, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(1).getHrkkaisuu(), C_Hrkkaisuu.HALFY, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(1).getNyknaiyoukbn(), C_NyknaiyouKbn.HARAIHENYOUP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(1).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData1.get(1).getJyuutouym(), BizDateYM.valueOf("201808"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData1.get(1).getJyutoukaisuuy(), 8, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData1.get(1).getJyutoukaisuum(), 3, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData1.get(1).getRsgaku(), BizCurrency.valueOf(80000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData1.get(1).getRyosyuymd(), BizDate.valueOf("20180308"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getDenrenno(), "10000000000000000008", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData1.get(1).getNykdenymd(), BizDate.valueOf("20180408"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getSuitoubumoncd(), "108", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getKzhurikaebankcd(), "1008", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getKzhurikaesitencd(), "208", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getTabakarikanjyono(), "08", "束仮勘定番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getNyuukinkakusyounrkno(), "10000008", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(1).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.OKYKSM_IKKATU, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getSuitososhikicd(), "1000008", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData1.get(1).getGyoumuKousinTime(), "20181018111111118", "業務用更新時間");

        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getNyuukinkakusyouno(), "22133451234123123423", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData1.get(0).getNyksyoriymd(), BizDate.valueOf("20180109"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData1.get(0).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180209"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getNykkeiro(), C_Nykkeiro.OTHER, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getHrkkaisuu(), C_Hrkkaisuu.NEN, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getNyknaiyoukbn(), C_NyknaiyouKbn.PMENYOUP, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getIktnyuukinnumu(), C_UmuKbn.NONE, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData1.get(0).getJyuutouym(), BizDateYM.valueOf("201809"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData1.get(0).getJyutoukaisuuy(), 9, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData1.get(0).getJyutoukaisuum(), 2, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData1.get(0).getRsgaku(), BizCurrency.valueOf(90000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData1.get(0).getRyosyuymd(), BizDate.valueOf("20180309"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getDenrenno(), "10000000000000000009", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData1.get(0).getNykdenymd(), BizDate.valueOf("20180409"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getSuitoubumoncd(), "109", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getKzhurikaebankcd(), "1009", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getKzhurikaesitencd(), "209", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getTabakarikanjyono(), "09", "束仮勘定番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getNyuukinkakusyounrkno(), "10000009", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(0).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.TAISYOUGAI, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getSuitososhikicd(), "1000009", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData1.get(0).getGyoumuKousinTime(), "20181018111111119", "業務用更新時間");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getNyuukinkakusyouno(), "31223142331232321253", "入金確証番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exDateEquals(bAK_NyuukinKakusyouData1.get(2).getNyksyoriymd(), BizDate.valueOf("20180110"), "入金処理日");
        exDateEquals(bAK_NyuukinKakusyouData1.get(2).getNyuukinkakusyounrkymd(), BizDate.valueOf("20180210"), "入金確証入力年月日");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(2).getNykkeiro(), C_Nykkeiro.BLNK, "入金経路");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(2).getHrkkaisuu(), C_Hrkkaisuu.ITIJI, "払込回数");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(2).getNyknaiyoukbn(), C_NyknaiyouKbn.OTHER, "入金内容区分");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(2).getIktnyuukinnumu(), C_UmuKbn.ARI, "一括入金有無");
        exDateYMEquals(bAK_NyuukinKakusyouData1.get(2).getJyuutouym(), BizDateYM.valueOf("201810"), "充当年月");
        exNumericEquals(bAK_NyuukinKakusyouData1.get(2).getJyutoukaisuuy(), 10, "充当回数（年）");
        exNumericEquals(bAK_NyuukinKakusyouData1.get(2).getJyutoukaisuum(), 1, "充当回数（月）");
        exBizCalcbleEquals(bAK_NyuukinKakusyouData1.get(2).getRsgaku(), BizCurrency.valueOf(100000), "領収金額");
        exDateEquals(bAK_NyuukinKakusyouData1.get(2).getRyosyuymd(), BizDate.valueOf("20180310"), "領収日");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getDenrenno(), "10000000000000000010", "伝票データ連番");
        exDateEquals(bAK_NyuukinKakusyouData1.get(2).getNykdenymd(), BizDate.valueOf("20180410"), "入金伝票日付");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getSuitoubumoncd(), "110", "出納部門コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getKzhurikaebankcd(), "1010", "口座振替銀行コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getKzhurikaesitencd(), "210", "口座振替支店コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getTabakarikanjyono(), "10", "束仮勘定番号");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getNyuukinkakusyounrkno(), "10000010", "入金確証入力番号");
        exClassificationEquals(bAK_NyuukinKakusyouData1.get(2).getHrkmyousinkkbn(), C_KrkPayEasyHrkmyousiNkKbn.EGSYOKUIN, "振込用紙入金区分");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getSuitososhikicd(), "1000010", "出納組織コード");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_NyuukinKakusyouData1.get(2).getGyoumuKousinTime(), "20181018111111110", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki1.get(0).getDshrtoukeisikibetukey(), "22133451234123123423", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki1.get(0).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDshrTuki1.get(0).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki1.get(0).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki1.get(0).getHenkousikibetukey(), "108", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki1.get(0).getSyoriYmd(), BizDate.valueOf("20190109"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getSyorikbn(), C_SyoriKbn.SBKAIJO, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getHrkkeiro(), C_Hrkkeiro.DANTAI, "払込経路");
        exStringEquals(bAK_KhDshrTuki1.get(0).getSyouhncd(), "1008", "商品コード");
        exNumericEquals(bAK_KhDshrTuki1.get(0).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getKykjyoutai(), C_Kykjyoutai.ITIJIBARAI, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getSyoumetujiyuu(), C_Syoumetujiyuu.GANMUKOU, "消滅事由");
        exDateEquals(bAK_KhDshrTuki1.get(0).getKykymd(), BizDate.valueOf("20190409"), "契約日");
        exDateEquals(bAK_KhDshrTuki1.get(0).getYendthnkymd(), BizDate.valueOf("20190509"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKihons(), BizCurrency.valueOf(999999), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki1.get(0).getYoteiriritu(), BizNumber.valueOf(1.29));
        exDateEquals(bAK_KhDshrTuki1.get(0).getDenymd(), BizDate.valueOf("20190609"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getSiharaid(), BizCurrency.valueOf(888889), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki1.get(0).getCalckijyunymd(), BizDate.valueOf("20190709"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki1.get(0).getSyoriymd2(), BizDate.valueOf("20190809"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki1.get(0).getJkipjytym(), BizDateYM.valueOf("201911"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki1.get(0).getKinoubetukijyunymd(), BizDate.valueOf("20190909"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki1.get(0).getGengkwari(), BizNumber.valueOf(0.19));
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getItibushrgk(), BizCurrency.valueOf(119), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getHaitoushrkin(), BizCurrency.valueOf(229), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedruigk(), BizCurrency.valueOf(339), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedgngkkngk(), BizCurrency.valueOf(449), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedshrgk(), BizCurrency.valueOf(559), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getDkeisanhaitoukin(), BizCurrency.valueOf(669), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki1.get(0).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getHaitoushrkingk(), BizCurrency.valueOf(19), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedganrikindshr(), BizCurrency.valueOf(30), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTumitated(), BizCurrency.valueOf(41), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTumitatedmodosimae(), BizCurrency.valueOf(52), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTumitatedmodosigo(), BizCurrency.valueOf(63), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTkbthaitou(), BizCurrency.valueOf(74), "特別配当");
        exDateYEquals(bAK_KhDshrTuki1.get(0).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getHaitoukinskskbn(), C_HaitoukinsksKbn.KARIDSIHARAI, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.BLNK, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki1.get(0).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTounendod(), BizCurrency.valueOf(449), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki1.get(0).getKariwariatedshrymd(), BizDate.valueOf("20201009"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedruigk2(), BizCurrency.valueOf(559), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedgngkkngk2(), BizCurrency.valueOf(669), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getKariwariatedshrgk2(), BizCurrency.valueOf(779), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki1.get(0).getTumitatedtumitateymd(), BizDate.valueOf("20201109"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getTumitatedskskbn(), C_TumitateDSakuseiKbn.ZENHIKIDASI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getTumitated2(), BizCurrency.valueOf(889), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki1.get(0).getTumitatedshrkrkymd(), BizDate.valueOf("20191209"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki1.get(0).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.BLNK, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getHaitouganrikincalckari(), BizCurrency.valueOf(999), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki1.get(0).getKariwariatedriritu1(), BizNumber.valueOf(0.219));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki1.get(0).getKariwariatedriritu2(), BizNumber.valueOf(0.119));
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(0).getHaitouganrikincalctumi(), BizCurrency.valueOf(22229), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki1.get(0).getTumitatedriritu1(), BizNumber.valueOf(0.139));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki1.get(0).getTumitatedriritu2(), BizNumber.valueOf(0.149));
        exStringEquals(bAK_KhDshrTuki1.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki1.get(0).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki1.get(0).getGyoumuKousinTime(), "20181018111111119", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki1.get(1).getDshrtoukeisikibetukey(), "23214331223451323212", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki1.get(1).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDshrTuki1.get(1).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki1.get(1).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki1.get(1).getHenkousikibetukey(), "107", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki1.get(1).getSyoriYmd(), BizDate.valueOf("20190108"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getSyorikbn(), C_SyoriKbn.SBMUKOU, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getHrkkeiro(), C_Hrkkeiro.KOUHURI, "払込経路");
        exStringEquals(bAK_KhDshrTuki1.get(1).getSyouhncd(), "1007", "商品コード");
        exNumericEquals(bAK_KhDshrTuki1.get(1).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getKykjyoutai(), C_Kykjyoutai.IKKATUNK, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getSyoumetujiyuu(), C_Syoumetujiyuu.MUKOU_1PMINYUUKIN, "消滅事由");
        exDateEquals(bAK_KhDshrTuki1.get(1).getKykymd(), BizDate.valueOf("20190408"), "契約日");
        exDateEquals(bAK_KhDshrTuki1.get(1).getYendthnkymd(), BizDate.valueOf("20190508"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getKihons(), BizCurrency.valueOf(999998), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki1.get(1).getYoteiriritu(), BizNumber.valueOf(1.28));
        exDateEquals(bAK_KhDshrTuki1.get(1).getDenymd(), BizDate.valueOf("20190608"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getSiharaid(), BizCurrency.valueOf(888888), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki1.get(1).getCalckijyunymd(), BizDate.valueOf("20190708"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki1.get(1).getSyoriymd2(), BizDate.valueOf("20190808"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki1.get(1).getJkipjytym(), BizDateYM.valueOf("201910"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki1.get(1).getKinoubetukijyunymd(), BizDate.valueOf("20190908"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki1.get(1).getGengkwari(), BizNumber.valueOf(0.18));
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getItibushrgk(), BizCurrency.valueOf(118), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getHaitoushrkin(), BizCurrency.valueOf(228), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getKariwariatedruigk(), BizCurrency.valueOf(338), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getKariwariatedgngkkngk(), BizCurrency.valueOf(448), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getKariwariatedshrgk(), BizCurrency.valueOf(558), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getDkeisanhaitoukin(), BizCurrency.valueOf(668), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki1.get(1).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getHaitoushrkingk(), BizCurrency.valueOf(18), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getKariwariatedganrikindshr(), BizCurrency.valueOf(29), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getTumitated(), BizCurrency.valueOf(40), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getTumitatedmodosimae(), BizCurrency.valueOf(51), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getTumitatedmodosigo(), BizCurrency.valueOf(62), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getTkbthaitou(), BizCurrency.valueOf(73), "特別配当");
        exDateYEquals(bAK_KhDshrTuki1.get(1).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getHaitoukinskskbn(), C_HaitoukinsksKbn.SEISIKI, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki1.get(1).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getTounendod(), BizCurrency.valueOf(448), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki1.get(1).getKariwariatedshrymd(), BizDate.valueOf("20201008"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getKariwariatedruigk2(), BizCurrency.valueOf(558), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getKariwariatedgngkkngk2(), BizCurrency.valueOf(668), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getKariwariatedshrgk2(), BizCurrency.valueOf(778), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki1.get(1).getTumitatedtumitateymd(), BizDate.valueOf("20201108"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getTumitatedskskbn(), C_TumitateDSakuseiKbn.YENDTHNKSEISIKI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getTumitated2(), BizCurrency.valueOf(888), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki1.get(1).getTumitatedshrkrkymd(), BizDate.valueOf("20191208"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki1.get(1).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getHaitouganrikincalckari(), BizCurrency.valueOf(998), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki1.get(1).getKariwariatedriritu1(), BizNumber.valueOf(0.218));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki1.get(1).getKariwariatedriritu2(), BizNumber.valueOf(0.118));
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(1).getHaitouganrikincalctumi(), BizCurrency.valueOf(22228), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki1.get(1).getTumitatedriritu1(), BizNumber.valueOf(0.138));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki1.get(1).getTumitatedriritu2(), BizNumber.valueOf(0.148));
        exStringEquals(bAK_KhDshrTuki1.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki1.get(1).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki1.get(1).getGyoumuKousinTime(), "20181018111111118", "業務用更新時間");

        exStringEquals(bAK_KhDshrTuki1.get(2).getDshrtoukeisikibetukey(), "31223142331232321253", "Ｄ支払統計識別キー");
        exStringEquals(bAK_KhDshrTuki1.get(2).getSyono(), "17806000013", "証券番号");
        exStringEquals(bAK_KhDshrTuki1.get(2).getTrkssikibetukey(), "12347", "取消識別キー");
        exNumericEquals(bAK_KhDshrTuki1.get(2).getRenno(), 1, "連番");
        exStringEquals(bAK_KhDshrTuki1.get(2).getHenkousikibetukey(), "109", "変更識別キー");
        exDateEquals(bAK_KhDshrTuki1.get(2).getSyoriYmd(), BizDate.valueOf("20190110"), "処理年月日");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getSyorikbn(), C_SyoriKbn.SBMENSEKI, "処理区分");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getHrkkeiro(), C_Hrkkeiro.SYUUDAN, "払込経路");
        exStringEquals(bAK_KhDshrTuki1.get(2).getSyouhncd(), "1009", "商品コード");
        exNumericEquals(bAK_KhDshrTuki1.get(2).getSyouhnsdno(), 1, "商品世代番号");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getKykjyoutai(), C_Kykjyoutai.BLNK, "契約状態");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getSyoumetujiyuu(), C_Syoumetujiyuu.SIBOU, "消滅事由");
        exDateEquals(bAK_KhDshrTuki1.get(2).getKykymd(), BizDate.valueOf("20190410"), "契約日");
        exDateEquals(bAK_KhDshrTuki1.get(2).getYendthnkymd(), BizDate.valueOf("20190510"), "円建変更日");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getKihons(), BizCurrency.valueOf(1000000), "基本Ｓ");
        assertEquals("予定利率", bAK_KhDshrTuki1.get(2).getYoteiriritu(), BizNumber.valueOf(1.3));
        exDateEquals(bAK_KhDshrTuki1.get(2).getDenymd(), BizDate.valueOf("20190610"), "伝票日付");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getSiharaid(), BizCurrency.valueOf(888890), "支払Ｄ");
        exDateEquals(bAK_KhDshrTuki1.get(2).getCalckijyunymd(), BizDate.valueOf("20190710"), "計算基準日");
        exDateEquals(bAK_KhDshrTuki1.get(2).getSyoriymd2(), BizDate.valueOf("20190810"), "処理年月日２");
        exDateYMEquals(bAK_KhDshrTuki1.get(2).getJkipjytym(), BizDateYM.valueOf("201912"), "次回Ｐ充当年月");
        exDateEquals(bAK_KhDshrTuki1.get(2).getKinoubetukijyunymd(), BizDate.valueOf("20190910"), "機能別基準日");
        assertEquals("減額割合", bAK_KhDshrTuki1.get(2).getGengkwari(), BizNumber.valueOf(0.2));
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getItibushrgk(), BizCurrency.valueOf(120), "一部支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getHaitoushrkin(), BizCurrency.valueOf(230), "配当支払金");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getKariwariatedruigk(), BizCurrency.valueOf(340), "仮割当Ｄ累計額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getKariwariatedgngkkngk(), BizCurrency.valueOf(450), "仮割当Ｄ減額金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getKariwariatedshrgk(), BizCurrency.valueOf(560), "仮割当Ｄ支払額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getDkeisanhaitoukin(), BizCurrency.valueOf(670), "配当金計算配当金");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getDkeisannaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "配当金計算内定確定区分");
        exDateYEquals(bAK_KhDshrTuki1.get(2).getHaitounendo(), BizDateY.valueOf("2019"), "配当年度");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getHaitoushrkingk(), BizCurrency.valueOf(20), "配当支払金額");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getKariwariatedganrikindshr(), BizCurrency.valueOf(31), "仮割当Ｄ元利金（配当支払金用）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getTumitated(), BizCurrency.valueOf(42), "積立Ｄ");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getTumitatedmodosimae(), BizCurrency.valueOf(53), "積立Ｄ（割戻し前）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getTumitatedmodosigo(), BizCurrency.valueOf(64), "積立Ｄ（割戻し後）");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getTkbthaitou(), BizCurrency.valueOf(75), "特別配当");
        exDateYEquals(bAK_KhDshrTuki1.get(2).getHaitounendo2(), BizDateY.valueOf("2020"), "配当年度２");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getHaitoukinskskbn(), C_HaitoukinsksKbn.YENDTHNKSEISIKI, "配当金作成区分");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getHaitoumeisaikbn(), C_HaitoumeisaiKbn.SYU, "配当明細区分");
        exDateYEquals(bAK_KhDshrTuki1.get(2).getFstkariwariatednendo(), BizDateY.valueOf("2020"), "初回仮割当Ｄ年度");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getTounendod(), BizCurrency.valueOf(450), "当年度Ｄ");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getNaiteikakuteikbn(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分");
        exDateEquals(bAK_KhDshrTuki1.get(2).getKariwariatedshrymd(), BizDate.valueOf("20201010"), "仮割当Ｄ支払年月日");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getKariwariatedruigk2(), BizCurrency.valueOf(560), "仮割当Ｄ累計額２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getKariwariatedgngkkngk2(), BizCurrency.valueOf(670), "仮割当Ｄ減額金額２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getKariwariatedshrgk2(), BizCurrency.valueOf(780), "仮割当Ｄ支払額２");
        exDateEquals(bAK_KhDshrTuki1.get(2).getTumitatedtumitateymd(), BizDate.valueOf("20201110"), "積立Ｄ積立年月日");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getTumitatedskskbn(), C_TumitateDSakuseiKbn.ITIBUHIKIDASI, "積立Ｄ作成区分");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getTumitated2(), BizCurrency.valueOf(890), "積立Ｄ２");
        exDateEquals(bAK_KhDshrTuki1.get(2).getTumitatedshrkrkymd(), BizDate.valueOf("20191210"), "積立Ｄ支払効力日");
        exClassificationEquals(bAK_KhDshrTuki1.get(2).getNaiteikakuteikbn2(), C_NaiteiKakuteiKbn.KAKUTEI, "内定確定区分２");
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getHaitouganrikincalckari(), BizCurrency.valueOf(1000), "配当元利金計算（仮割当Ｄ元利金）");
        assertEquals("仮割当Ｄ利率１", bAK_KhDshrTuki1.get(2).getKariwariatedriritu1(), BizNumber.valueOf(0.22));
        assertEquals("仮割当Ｄ利率２", bAK_KhDshrTuki1.get(2).getKariwariatedriritu2(), BizNumber.valueOf(0.12));
        exBizCalcbleEquals(bAK_KhDshrTuki1.get(2).getHaitouganrikincalctumi(), BizCurrency.valueOf(22230), "配当元利金計算（積立Ｄ元利金）");
        assertEquals("積立Ｄ利率１", bAK_KhDshrTuki1.get(2).getTumitatedriritu1(), BizNumber.valueOf(0.14));
        assertEquals("積立Ｄ利率２", bAK_KhDshrTuki1.get(2).getTumitatedriritu2(), BizNumber.valueOf(0.15));
        exStringEquals(bAK_KhDshrTuki1.get(2).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhDshrTuki1.get(2).getGyoumuKousinKinou(), "test20181018", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhDshrTuki1.get(2).getGyoumuKousinTime(), "20181018111111110", "業務用更新時間");
    }

    @Test
    @Transactional
    @TestOrder(70)
    public void testTableMaintenanceUtil_backUp_1_7() {

        newData();

        deleteBackupData();

        kinou.setKinouKbn(C_KinouKbn.ONLINE);

        tableMaintenanceUtil.backUp("17806000024", "12348");

        bAK_KykKihon = tableMaintenanceUtil.getBakKykKihon();

        bAK_AnsyuKihon = tableMaintenanceUtil.getBakAnsyuKihon();

        bAK_KhDenpyoData = tableMaintenanceUtil.getBakKhDenpyoDataList();

        bAK_KhFBSoukinData = tableMaintenanceUtil.getBakKhFBSoukinDataList();

        bAK_KhGaikaFBSoukinData = tableMaintenanceUtil.getBakKhGaikaFBSoukinDataList();

        bAK_KhSntkInfoTouroku = tableMaintenanceUtil.getBakKhSntkInfoTourokuList();

        bAK_SmbcStyKanri = tableMaintenanceUtil.getBakSmbcStyKanriList();

        bAK_KhHenkouUktk = tableMaintenanceUtil.getBakKhHenkouUktkList();

        bAK_KhHaitouKanri = tableMaintenanceUtil.getBakKhHaitouKanriList();

        bAK_KhTumitateDKanri = tableMaintenanceUtil.getBakKhTumitateDKanriList();

        bAK_NyuukinKakusyouData = tableMaintenanceUtil.getBakNyuukinKakusyouDataList();

        bAK_KhDshrTuki = tableMaintenanceUtil.getBakKhDshrTukiList();

        assertNull(bAK_KykKihon);

        exNumericEquals(bAK_KhDenpyoData.size(), 0, "件数");

        exNumericEquals(bAK_KhFBSoukinData.size(), 0, "件数");

        exNumericEquals(bAK_KhGaikaFBSoukinData.size(), 0, "件数");

        exNumericEquals(bAK_KhSntkInfoTouroku.size(), 0, "件数");

        assertNull(bAK_AnsyuKihon);

        exNumericEquals(bAK_SmbcStyKanri.size(), 0, "件数");

        exNumericEquals(bAK_KhHenkouUktk.size(), 0, "件数");

        exNumericEquals(bAK_KhHaitouKanri.size(), 0, "件数");

        exNumericEquals(bAK_KhTumitateDKanri.size(), 0, "件数");

        exNumericEquals(bAK_NyuukinKakusyouData.size(), 0, "件数");

        exNumericEquals(bAK_KhDshrTuki.size(), 0, "件数");

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);
        SinkeiyakuDomManager sinkeiyakuDomManager = SWAKInjector.getInstance(SinkeiyakuDomManager.class);

        IT_BAK_KykKihon bAK_KykKihon1 = hozenDomManager.getBAKKykKihon("17806000024", "12348");
        assertNull(bAK_KykKihon1);

        IT_BAK_AnsyuKihon bAK_AnsyuKihon1 = hozenDomManager.getBAKAnsyuKihon("17806000024", "12348");
        assertNull(bAK_AnsyuKihon1);

        List<IT_BAK_KhDenpyoData> bAK_KhDenpyoData1 = hozenDomManager.getBAKKhDenpyoDatasBySyonoTrkssikibetukey("17806000024", "12348");
        exNumericEquals(bAK_KhDenpyoData1.size(), 0, "件数");

        List<IT_BAK_KhFBSoukinData> bAK_KhFBSoukinData1 = hozenDomManager.getBAKKhFBSoukinDatasBySyonoTrkssikibetukey("17806000024", "12348");
        exNumericEquals(bAK_KhFBSoukinData1.size(), 0, "件数");

        List<IT_BAK_KhGaikaFBSoukinData> bAK_KhGaikaFBSoukinData1 = hozenDomManager.getBAKKhGaikaFBSoukinDatasBySyonoTrkssikibetukey("17806000024", "12348");
        exNumericEquals(bAK_KhGaikaFBSoukinData1.size(), 0, "件数");

        List<IT_BAK_KhSntkInfoTouroku> bAK_KhSntkInfoTouroku1 = hozenDomManager.getAllBAKKhSntkInfoTouroku();
        exNumericEquals(bAK_KhSntkInfoTouroku1.size(), 0, "件数");

        List<HT_BAK_SmbcStyKanri> bAK_SmbcStyKanri1 = sinkeiyakuDomManager.getBAKSmbcStyKanrisBySyonoTrkssikibetukey("17806000024", "12348");
        exNumericEquals(bAK_SmbcStyKanri1.size(), 0, "件数");

        List<IT_BAK_KhHenkouUktk> bAK_KhHenkouUktk1 = hozenDomManager.getAllBAKKhHenkouUktk();
        exNumericEquals(bAK_KhHenkouUktk1.size(), 0, "件数");

        List<IT_BAK_KhHaitouKanri> bAK_KhHaitouKanri1 = hozenDomManager.getAllBAKKhHaitouKanri();
        exNumericEquals(bAK_KhHaitouKanri1.size(), 0, "件数");

        List<IT_BAK_KhTumitateDKanri> bAK_KhTumitateDKanri1 = hozenDomManager.getAllBAKKhTumitateDKanri();
        exNumericEquals(bAK_KhTumitateDKanri1.size(), 0, "件数");

        List<IT_BAK_NyuukinKakusyouData> bAK_NyuukinKakusyouData1 = hozenDomManager.getAllBAKNyuukinKakusyouData();
        exNumericEquals(bAK_NyuukinKakusyouData1.size(), 0, "件数");

        List<IT_BAK_KhDshrTuki> bAK_KhDshrTuki1 = hozenDomManager.getAllBAKKhDshrTuki();
        exNumericEquals(bAK_KhDshrTuki1.size(), 0, "件数");
    }

    @Test
    @Transactional
    @TestOrder(80)
    public void testTableMaintenanceUtil_backUp_1_8() {

        newData();

        deleteBackupData();

        kinou.setKinouKbn(C_KinouKbn.BATCH);

        tableMaintenanceUtil.backUp("18806000014", "12348");

        bAK_KhHenkouUktk = tableMaintenanceUtil.getBakKhHenkouUktkList();

        exStringEquals(bAK_KhHenkouUktk.get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getSyono(), "18806000014", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getTrkssikibetukey(), "12348", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(0).getUktkymd(), BizDate.valueOf("20180111"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getTourokuroute(), C_TourokuRouteKbn.DS, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktksyorikbn(), C_UktkSyoriKbn.BLNK, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(0).getKouryokuhasseiymd(), BizDate.valueOf("20180211"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(0).getSyoriyoteiymd(), BizDate.valueOf("20180311"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.BLNK, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(1).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(1).getSyono(), "18806000014", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(1).getTrkssikibetukey(), "12348", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(1).getHozenhenkouuktkrenno(), 2, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(1).getUktkymd(), BizDate.valueOf("20180112"), "受付日");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getTourokuroute(), C_TourokuRouteKbn.TEL, "登録ルート");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getUktksyorikbn(), C_UktkSyoriKbn.KAIYAKU, "受付処理区分");
        exDateEquals(bAK_KhHenkouUktk.get(1).getKouryokuhasseiymd(), BizDate.valueOf("20180212"), "効力発生日");
        exDateEquals(bAK_KhHenkouUktk.get(1).getSyoriyoteiymd(), BizDate.valueOf("20180312"), "処理予定日");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getUktkjyoutaikbn(), C_UktkJyoutaiKbn.MISYORI, "受付状態区分");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");


        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getSyono(), "18806000014", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getTrkssikibetukey(), "12348", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getInputshrhousiteikbn(), C_InputShrhousiteiKbn.BLNK, "入力用支払方法指定区分");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getYenshrtkhkumu(), C_UmuKbn.NONE, "円支払特約付加有無");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getBankcd(), "1003", "銀行コード");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getSitencd(), "103", "支店コード");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getYokinkbn(), C_YokinKbn.BLNK, "預金種目区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKouzano(), "201801250003", "口座番号");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKzdoukbn(), C_Kzdou.BLNK, "口座名義人同一区分");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getKzmeiginmkn(), "テスト名義人３", "口座名義人氏名（カナ）");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getSyono(), "18806000014", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getTrkssikibetukey(), "12348", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getHozenhenkouuktkrenno(), 2, "保全変更受付連番");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getInputshrhousiteikbn(), C_InputShrhousiteiKbn.FBSOUKIN, "入力用支払方法指定区分");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getYenshrtkhkumu(), C_UmuKbn.ARI, "円支払特約付加有無");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getBankcd(), "1004", "銀行コード");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getSitencd(), "104", "支店コード");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getYokinkbn(), C_YokinKbn.HUTUU, "預金種目区分");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getKouzano(), "201801250004", "口座番号");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getKzdoukbn(), C_Kzdou.DOUITU, "口座名義人同一区分");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getKzmeiginmkn(), "テスト名義人４", "口座名義人氏名（カナ）");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkKaiyakus().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getSyono(), "18806000014", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getTrkssikibetukey(), "12348", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHozenhenkouuktkrenno(), 1, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkymd(), BizDate.valueOf("20180103"), "円建変更日");
        exDateEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttymd(), BizDate.valueOf("20180203"), "目標額到達日");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttkaiyakuhr(), BizCurrency.valueOf(113000), "目標額到達時解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewkaiyakuhr(), BizCurrency.valueOf(123000), "変更後解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkhr(), BizCurrency.valueOf(133000), "円建変更時返戻金");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNyuuryokuhassoukbn(), C_HassouKbn.BLNK, "入力発送区分");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu1(), C_HnskariyuuKbn.BLNK, "本社回送理由１");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu2(), C_HnskariyuuKbn.YENDTHNKHR_ARI, "本社回送理由２");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhrgaika(), BizCurrency.valueOf(143000), "円建変更時解約返戻金（外貨）");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhryen(), BizCurrency.valueOf(153000), "円建変更時解約返戻金（円貨）");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhncd(), "1003", "変更後商品コード");
        exNumericEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhnsdno(), 13, "変更後商品世代番号");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkihons(), BizCurrency.valueOf(163000), "円建変更後基本Ｓ");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewhokenryou(), BizCurrency.valueOf(173000), "変更後保険料");
        exClassificationEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewkyktuukasyu(), C_Tuukasyu.JPY, "変更後契約通貨種類");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getNewryouritusdno(), "103", "変更後料率世代番号");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(0).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getKbnkey(), "01", "区分キー");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getSyono(), "18806000014", "証券番号");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getTrkssikibetukey(), "12348", "取消識別キー");
        exNumericEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getHozenhenkouuktkrenno(), 2, "保全変更受付連番");
        exDateEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkymd(), BizDate.valueOf("20180104"), "円建変更日");
        exDateEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttymd(), BizDate.valueOf("20180204"), "目標額到達日");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getMkhgktttkaiyakuhr(), BizCurrency.valueOf(114000), "目標額到達時解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getNewkaiyakuhr(), BizCurrency.valueOf(124000), "変更後解約返戻金");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkhr(), BizCurrency.valueOf(134000), "円建変更時返戻金");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getNyuuryokuhassoukbn(), C_HassouKbn.TYOKUSOU, "入力発送区分");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu1(), C_HnskariyuuKbn.YENDTHNKHR_ARI, "本社回送理由１");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getHnskariyuu2(), C_HnskariyuuKbn.JIMU_ARI, "本社回送理由２");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhrgaika(), BizCurrency.valueOf(144000), "円建変更時解約返戻金（外貨）");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkaiyakuhryen(), BizCurrency.valueOf(154000), "円建変更時解約返戻金（円貨）");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhncd(), "1004", "変更後商品コード");
        exNumericEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getNewsyouhnsdno(), 14, "変更後商品世代番号");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getYendthnkkihons(), BizCurrency.valueOf(164000), "円建変更後基本Ｓ");
        exBizCalcbleEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getNewhokenryou(), BizCurrency.valueOf(174000), "変更後保険料");
        exClassificationEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getNewkyktuukasyu(), C_Tuukasyu.USD, "変更後契約通貨種類");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getNewryouritusdno(), "104", "変更後料率世代番号");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinKinou(), "test1", "業務用更新機能ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinsyaId(), "testuser1", "業務用更新者ＩＤ");
        exStringEquals(bAK_KhHenkouUktk.get(1).getBAKKhHenkouUktkYendtHnks().get(0).getGyoumuKousinTime(), "20150714111111111", "業務用更新時間");

        HozenDomManager hozenDomManager = SWAKInjector.getInstance(HozenDomManager.class);

        List<IT_BAK_KhHenkouUktk>bAK_KhHenkouUktk1 = hozenDomManager.getAllBAKKhHenkouUktk();
        exNumericEquals(bAK_KhHenkouUktk1.size(), 0, "件数");
    }


    @Test
    @TestOrder(210)
    public void testTableMaintenanceUtil_backUp_2_1() {
        IT_BAK_KykKihon bAK_KykKihon = tableMaintenanceUtil.getBakKykKihon();
        assertNull(bAK_KykKihon);

    }

    @Test
    @TestOrder(310)
    public void testTableMaintenanceUtil_backUp_3_1() {
        IT_BAK_AnsyuKihon bAK_AnsyuKihon = tableMaintenanceUtil.getBakAnsyuKihon();
        assertNull(bAK_AnsyuKihon);

    }

    @Test
    @TestOrder(410)
    public void testTableMaintenanceUtil_backUp_4_1() {
        List<IT_BAK_KhDenpyoData> bakKhDenpyoDataList = tableMaintenanceUtil.getBakKhDenpyoDataList();
        assertNull(bakKhDenpyoDataList);


    }

    @Test
    @TestOrder(510)
    public void testTableMaintenanceUtil_backUp_5_1() {
        List<IT_BAK_KhGaikaFBSoukinData> bakKhGaikaFBSoukinDataList = tableMaintenanceUtil.getBakKhGaikaFBSoukinDataList();
        assertNull(bakKhGaikaFBSoukinDataList);

    }

    @Test
    @TestOrder(610)
    public void testTableMaintenanceUtil_backUp_6_1() {
        List<IT_BAK_KhSntkInfoTouroku>  bakKhSntkInfoTourokuList = tableMaintenanceUtil.getBakKhSntkInfoTourokuList();
        assertNull(bakKhSntkInfoTourokuList);

    }

    @Test
    @TestOrder(710)
    public void testTableMaintenanceUtil_backUp_7_1() {
        List<IT_BAK_KhFBSoukinData>  bakKhFBSoukinDataList = tableMaintenanceUtil.getBakKhFBSoukinDataList();
        assertNull(bakKhFBSoukinDataList);

    }

    @Test
    @TestOrder(810)
    public void testTableMaintenanceUtil_backUp_8_1() {
        List<HT_BAK_SmbcStyKanri>  bakSmbcStyKanriList = tableMaintenanceUtil.getBakSmbcStyKanriList();
        assertNull(bakSmbcStyKanriList);

    }

    @Test
    @TestOrder(910)
    public void testTableMaintenanceUtil_backUp_9_1() {
        List<IT_BAK_KhHenkouUktk>  bakKhHenkouUktkList = tableMaintenanceUtil.getBakKhHenkouUktkList();
        assertNull(bakKhHenkouUktkList);

    }

    @Test
    @TestOrder(1010)
    public void testTableMaintenanceUtil_backUp_10_1() {
        List<IT_BAK_KhHaitouKanri>  bakKhHaitouKanriList = tableMaintenanceUtil.getBakKhHaitouKanriList();
        assertNull(bakKhHaitouKanriList);

    }

    @Test
    @TestOrder(1110)
    public void testTableMaintenanceUtil_backUp_11_1() {
        List<IT_BAK_KhTumitateDKanri>  bakKhTumitateDKanriList = tableMaintenanceUtil.getBakKhTumitateDKanriList();
        assertNull(bakKhTumitateDKanriList);

    }

    @Test
    @TestOrder(1210)
    public void testTableMaintenanceUtil_backUp_12_1() {
        List<IT_BAK_NyuukinKakusyouData>  bakNyuukinKakusyouDataList = tableMaintenanceUtil.getBakNyuukinKakusyouDataList();
        assertNull(bakNyuukinKakusyouDataList);

    }

    @Test
    @TestOrder(1310)
    public void testTableMaintenanceUtil_backUp_13_1() {
        List<IT_BAK_KhDshrTuki>  bakKhDshrTukiList = tableMaintenanceUtil.getBakKhDshrTukiList();
        assertNull(bakKhDshrTukiList);

    }

}
